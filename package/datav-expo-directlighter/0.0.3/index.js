// env=undefined => env=publish 
Cube("datav:/com/datav-expo-directlighter/0.0.3",["datav:/npm/eventemitter3/2.0.3"],function(a,b,c){let d=null;const e=c("datav:/npm/eventemitter3/2.0.3"),f={intensity:0.8,positionX:1,positionY:1,positionZ:1,color:16777215};return a.exports=class extends e{constructor(a,b){super(),this.options=Object.assign(f,b||{})}addTo(a){return a?void(d=a.three,this.viewer=a,this.scene=a.scene,this.init(),this.viewer.on("projChanged",this.updatePostions.bind(this))):console.log("Direct Lighter layer needs viewer layer")}init(){const a=this.options,b=new d.Color(this.viewer.Utils.Chroma(a.color).hex()),c=this.light=new d.DirectionalLight(b,a.intensity);this.updatePostions(),this.scene.add(c)}getProjPos(a,b,c){return this.viewer&&this.viewer.Projection([a,b,c])}updatePostions(){const a=this.options,b=this.getProjPos(a.positionX,a.positionY,a.positionZ);this.light.position.set(b[0],b[1],b[2])}updateLight(){let a=this.options,b=new d.Color(this.viewer.Utils.Chroma(a.color).hex());this.light.intensity=a.intensity,this.light.color.setRGB(b.r,b.g,b.b),this.updatePostions()}updateOptions(a){this.options=this.viewer.Utils.mergeOptions(this.options,a||{}),this.updateLight()}remove(){this.scene.remove(this.light),this.light&&this.light.shadow&&this.light.shadow.map&&this.light.shadow.map.dispose&&this.light.shadow.map.dispose(),this.light=null}},a.exports});