// env=undefined => env=publish 
Cube("datav:/com/datav-engine-pointlighter/0.0.12/Lensflare",[],function(a){return a.exports=function(a){a.Lensflare=function(){a.Mesh.call(this,a.Lensflare.Geometry,new a.MeshBasicMaterial({opacity:0,transparent:!0})),this.type="Lensflare",this.frustumCulled=!1,this.renderOrder=Infinity;var b=new a.Vector3,c=new a.DataTexture(new Uint8Array(768),16,16,a.RGBFormat);c.minFilter=a.NearestFilter,c.magFilter=a.NearestFilter,c.wrapS=a.ClampToEdgeWrapping,c.wrapT=a.ClampToEdgeWrapping,c.needsUpdate=!0;var d=new a.DataTexture(new Uint8Array(768),16,16,a.RGBFormat);d.minFilter=a.NearestFilter,d.magFilter=a.NearestFilter,d.wrapS=a.ClampToEdgeWrapping,d.wrapT=a.ClampToEdgeWrapping,d.needsUpdate=!0;var e=a.Lensflare.Geometry,f=new a.ShaderMaterial({uniforms:{scale:{value:null},screenPosition:{value:null}},vertexShader:["uniform vec3 screenPosition;","uniform vec2 scale;",a.ShaderChunk.logdepthbuf_pars_vertex,"void main() {","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );",a.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:[a.ShaderChunk.logdepthbuf_pars_fragment,"void main() {",a.ShaderChunk.logdepthbuf_fragment,"\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );","}"].join("\n"),depthTest:!0,depthWrite:!1,transparent:!1}),g=new a.ShaderMaterial({uniforms:{map:{value:c},scale:{value:null},screenPosition:{value:null}},vertexShader:["uniform vec3 screenPosition;","uniform vec2 scale;","varying vec2 vUV;",a.ShaderChunk.logdepthbuf_pars_vertex,"void main() {","\tvUV = uv;","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );",a.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D map;","varying vec2 vUV;",a.ShaderChunk.logdepthbuf_pars_fragment,"void main() {",a.ShaderChunk.logdepthbuf_fragment,"\tgl_FragColor = texture2D( map, vUV );","#include <premultiplied_alpha_fragment>","}"].join("\n"),depthTest:!0,depthWrite:!1,transparent:!0}),h=new a.Mesh(e,f),j=[],i=a.LensflareElement.Shader,k=new a.ShaderMaterial({uniforms:{map:{value:null},occlusionMap:{value:d},color:{value:new a.Color(16777215)},scale:{value:new a.Vector2},screenPosition:{value:new a.Vector3}},vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,blending:a.AdditiveBlending,transparent:!0,depthWrite:!1}),l=new a.Mesh(e,k);this.addElement=function(a){j.push(a)};var m=new a.Vector2,n=new a.Vector2,o=new a.Box2,p=new a.Vector4;this.onBeforeRender=function(a,q,r){p.copy(a.getCurrentViewport());var s=p.w/p.z,t=p.z/2,u=p.w/2,v=16/p.w;if(m.set(v*s,v),o.min.set(p.x,p.y),o.max.set(p.x+(p.z-16),p.y+(p.w-16)),b.setFromMatrixPosition(this.matrixWorld),b.applyMatrix4(r.matrixWorldInverse),b.applyMatrix4(r.projectionMatrix),n.x=p.x+b.x*t+t-8,n.y=p.y+b.y*u+u-8,o.containsPoint(n)){a.copyFramebufferToTexture(n,c);var w=f.uniforms;w.scale.value=m,w.screenPosition.value=b,a.renderBufferDirect(r,null,e,f,h,null),a.copyFramebufferToTexture(n,d);var w=g.uniforms;w.scale.value=m,w.screenPosition.value=b,a.renderBufferDirect(r,null,e,g,h,null);for(var x=2*-b.x,y=2*-b.y,z=0,i=j.length;z<i;z++){var A=j[z],w=k.uniforms;w.color.value.copy(A.color),w.map.value=A.texture,w.screenPosition.value.x=b.x+x*A.distance,w.screenPosition.value.y=b.y+y*A.distance;var v=A.size/p.w,s=p.w/p.z;w.scale.value.set(v*s,v),k.uniformsNeedUpdate=!0,a.renderBufferDirect(r,null,e,k,l,null)}}},this.dispose=function(){f.dispose(),g.dispose(),k.dispose(),c.dispose(),d.dispose();for(var a=0,b=j.length;a<b;a++)j[a].texture.dispose();j=[]}},a.Lensflare.prototype=Object.create(a.Mesh.prototype),a.Lensflare.prototype.constructor=a.Lensflare,a.Lensflare.prototype.isLensflare=!0,a.LensflareElement=function(b,c,d,e){this.texture=b,this.size=c||1,this.distance=d||0,this.color=e||new a.Color(16777215)},a.LensflareElement.Shader={uniforms:{map:{value:null},occlusionMap:{value:null},color:{value:null},scale:{value:null},screenPosition:{value:null}},vertexShader:["uniform vec3 screenPosition;","uniform vec2 scale;","uniform sampler2D occlusionMap;","varying vec2 vUV;","varying float vVisibility;",a.ShaderChunk.logdepthbuf_pars_vertex,"void main() {","\tvUV = uv;","\tvec2 pos = position.xy;","\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );","\tvVisibility =        visibility.r / 9.0;","\tvVisibility *= 1.0 - visibility.g / 9.0;","\tvVisibility *=       visibility.b / 9.0;","\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",a.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D map;","uniform vec3 color;","varying vec2 vUV;","varying float vVisibility;",a.ShaderChunk.logdepthbuf_pars_fragment,"void main() {",a.ShaderChunk.logdepthbuf_fragment,"\tvec4 texture = texture2D( map, vUV );","\ttexture.a *= vVisibility;","\tgl_FragColor = texture;","\tgl_FragColor.rgb *= color;","}"].join("\n")},a.Lensflare.Geometry=function(){var b=new a.BufferGeometry,c=new Float32Array([-1,-1,0,0,0,1,-1,0,1,0,1,1,0,1,1,-1,1,0,0,1]),d=new a.InterleavedBuffer(c,5);return b.setIndex([0,1,2,0,2,3]),b.addAttribute("position",new a.InterleavedBufferAttribute(d,3,0,!1)),b.addAttribute("uv",new a.InterleavedBufferAttribute(d,2,3,!1)),b}()},a.exports});;
Cube("datav:/com/datav-engine-pointlighter/0.0.12/layer",["datav:/npm/eventemitter3/3.0.0"],function(a,b,c){const d=c("datav:/npm/eventemitter3/3.0.0");return a.exports=class extends d{constructor(){super(),this.preSceneName="main",this.usingSceneName="main"}addTo(a){return a?void(this.viewer=a,this.Utils=a.Utils,this.controller=a.controller,this.scene=this.getAssignedScene(),this.viewer.on("projChanged",this.updatePostions.bind(this))):console.log("Layer needs viewer layer")}getProjPos(a,b,c){return this.viewer&&this.viewer.Projection([a,b,c])}updatePostions(){}getAssignedScene(){const a=this.options;return a.isSceneGroup&&a.sceneName?a.sceneName?this.controller.getScene(a.sceneName)?this.controller.getScene(a.sceneName):this.controller.createScene(a.sceneName):void 0:this.controller.getScene("main")}toggleScene(a,b,c){this.controller.switchScene(a,b,c).then(()=>{this.preSceneName=b,this.usingSceneName=c})}show(){}hide(){}updateOptions(){}},a.exports});;
Cube("datav:/com/datav-engine-pointlighter/0.0.12",[],function(a,b,c){let d=null;const e=c("datav:/com/datav-engine-pointlighter/0.0.12/layer");return a.exports=class extends e{constructor(a,b){super(),this.options=Object.assign({visible:!0,isSceneGroup:!1,sceneName:"",intensity:0.8,color:16777215,distance:0,decay:1,isLensflare:!0},b||{})}addTo(a){super.addTo(a),d=a.three,c("datav:/com/datav-engine-pointlighter/0.0.12/Lensflare")(d),this.init()}init(){const a=this.options,b=new d.Color(this.Utils.Chroma(a.color).hex());this.light=new d.PointLight(b,a.intensity,a.distance,a.decay),this.light.castShadow=!0,this.scene.add(this.light);const c=new d.TextureLoader;this.textureFlare0=c.load(a.textureUrl0),this.textureFlare3=c.load(a.textureUrl2),this.lensflare=new d.Lensflare,this.useLensflare(),this.updateLensflare(),this.updatePostions(),this.checkVisible()}updateLensflare(){const a=this.options,b=a.lensflareScale,c=new d.Color(this.Utils.Chroma(this.options.color).hex());this.lensflare&&(this.lensflare.dispose(),this.lensflare.addElement(new d.LensflareElement(this.textureFlare0,70*b,0,c)),this.lensflare.addElement(new d.LensflareElement(this.textureFlare3,6*b,0.6,c)),this.lensflare.addElement(new d.LensflareElement(this.textureFlare3,7*b,0.7,c)),this.lensflare.addElement(new d.LensflareElement(this.textureFlare3,12*b,0.9,c)),this.lensflare.addElement(new d.LensflareElement(this.textureFlare3,7*b,1,c)))}useLensflare(){const a=this.options.isLensflare;a?this.light.add(this.lensflare):this.light.remove(this.lensflare)}updatePostions(){const a=this.options,b=this.getProjPos(a.posX,a.posY,a.posZ);this.light.position.set(b[0],b[1],b[2])}updateLight(){let a=this.options,b=new d.Color(this.Utils.Chroma(a.color).hex());this.light.decay=a.decay,this.light.distance=a.distance,this.light.intensity=a.intensity,this.light.color.setRGB(b.r,b.g,b.b),this.updatePostions()}updateOptions(a){const b=this.Utils.deepClone(this.options);this.options=this.Utils.mergeOptions(this.options,a||{}),this.updateLight(),this.Utils.easyDiff(b.isLensflare,a.isLensflare)||this.useLensflare(),this.Utils.easyDiff(b.color,a.color)&&this.Utils.easyDiff(b.lensflareScale,a.lensflareScale)||this.updateLensflare(),this.Utils.easyDiff(b.sceneName,a.sceneName)||(this.scene=this.getAssignedScene(),this.toggleScene(this.light,this.usingSceneName,a.sceneName)),this.checkVisible()}checkVisible(){let a=this.options;a.visible?this.show():this.hide()}show(){this.options.visible=!0,this.light&&(this.light.visible=!0)}hide(){this.options.visible=!1,this.light&&(this.light.visible=!1)}remove(){this.scene.remove(this.light),this.light.remove(this.lensflare),this.light&&this.light.shadow&&this.light.shadow.map&&this.light.shadow.map.dispose&&this.light.shadow.map.dispose(),this.light=null,this.lensflare.dispose(),this.lensflare=null}},a.exports});