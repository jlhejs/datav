// env=undefined => env=publish 
Cube("datav:/com/datav-engine-buildings/0.0.7/layer.js",["datav:/npm/eventemitter3/3.0.0"],function(a,b,c){const d=c("datav:/npm/eventemitter3/3.0.0");return a.exports=class extends d{constructor(){super(),this.preSceneName="main",this.usingSceneName="main"}addTo(a){return a?void(this.viewer=a,this.Utils=a.Utils,this.controller=a.controller,this.scene=this.getAssignedScene(),this.viewer.on("projChanged",this.updatePostions.bind(this))):console.log("Layer needs viewer layer")}getProjPos(a,b,c){return this.viewer&&this.viewer.Projection([a,b,c])}updatePostions(){}getAssignedScene(){const a=this.options;return a.isSceneGroup&&a.sceneName?a.sceneName?this.controller.getScene(a.sceneName)?this.controller.getScene(a.sceneName):this.controller.createScene(a.sceneName):void 0:this.controller.getScene("main")}toggleScene(a,b,c){this.controller.switchScene(a,b,c).then(()=>{this.preSceneName=b,this.usingSceneName=c})}show(){throw new Error("method: show must be overwritten")}hide(){throw new Error("method: hide must be overwritten")}updateOptions(){}},a.exports});;
Cube("datav:/com/datav-engine-buildings/0.0.7",[],function(a,b,c){let d=null,e=null;const f=c("datav:/com/datav-engine-buildings/0.0.7/layer.js");return a.exports=class extends f{constructor(a,b){super(),this.options=Object.assign({visible:!0},b)}addTo(a){super.addTo(a),d=a.three,e=a.Utils,this.initMaterial()}genGeometry(a){let b=new d.BufferGeometry;return b.setIndex(new d.BufferAttribute(new Uint32Array(a.indices),1)),b.addAttribute("position",new d.BufferAttribute(new Float32Array(a.positions),3)),b.addAttribute("color",new d.BufferAttribute(new Float32Array(4*(a.positions.length/3)),4)),b.addAttribute("uv",new d.BufferAttribute(a.uvs,2)),b.addAttribute("height",new d.BufferAttribute(a.heights,1)),b.computeVertexNormals(),b.computeBoundingSphere(),b.computeBoundingBox(),b}initMaterial(){this.textureLoader=new d.TextureLoader().setCrossOrigin("*");const{color:a,envMapIntensity:b,metalness:f,roughness:g,buildingTexture:h}=this.options,i=e.Chroma(a).gl();this.material=new d.MeshStandardMaterial({map:this.textureLoader.load(h),color:new d.Color(i[0],i[1],i[2]),flatShading:!0,side:d.DoubleSide,transparent:!0,opacity:i[3],envMapIntensity:b,metalness:f,roughness:g}),this.material.needsUpdate=!0}setData(a){if(this.cleanComByEmptyArray(a),this.data=a,a&&a.features&&Array.isArray(a.features)&&0<a.features.length){const{heightPosition:b,buildingsScaleZ:c}=this.options;let f=e.extrude_building(a,{getHeight:(a)=>(void 0===a.properties.floor?0:a.properties.floor)*c,getBase:()=>0,project:this.viewer.Projection});this.geometry=this.genGeometry(f),this.mesh=new d.Mesh(this.geometry,this.material),this.mesh.position.y=b,this.scene.add(this.mesh),this.checkVisible()}}cleanComByEmptyArray(a){a&&Array.isArray(a)&&!a.length&&this.dispose()}updateMaterial(){if(this.material){const{color:a,envMapIntensity:b,metalness:f,roughness:g}=this.options,h=e.Chroma(a).gl();this.material.color=new d.Color(h[0],h[1],h[2]),this.material.metalness=f,this.material.roughness=g,this.material.opacity=h[3],this.material.envMapIntensity=b,this.material.needsUpdate=!0}}updateTexture(){this.material&&(this.material.map=this.textureLoader.load(this.options.buildingTexture))}updateOptions(a){const b=e.deepClone(this.options);this.options=e.mergeOptions(this.options,a),e.easyDiff(b.color,a.color)&&e.easyDiff(b.metalness,a.metalness)&&e.easyDiff(b.roughness,a.roughness)&&e.easyDiff(b.envMapIntensity,a.envMapIntensity)||this.updateMaterial(),e.easyDiff(b.buildingTexture,a.buildingTexture)||this.updateTexture(),e.easyDiff(b.buildingsScaleZ,a.buildingsScaleZ)||(this.dispose(),this.setData(this.data)),this.checkVisible(),!e.easyDiff(b.heightPosition,a.heightPosition)&&this.mesh&&(this.mesh.position.y=this.options.heightPosition),e.easyDiff(b.sceneName,a.sceneName)||(this.scene=this.getAssignedScene(),this.toggleScene(this.mesh,this.usingSceneName,a.sceneName))}checkVisible(){let a=this.options;a.visible?this.show():this.hide()}show(){this.options.visible=!0,this.mesh&&(this.mesh.visible=!0)}hide(){this.options.visible=!1,this.mesh&&(this.mesh.visible=!1)}dispose(){this.mesh&&this.scene.remove(this.mesh),this.mesh&&this.mesh.dispose&&this.mesh.dispose(),this.geometry&&this.geometry.dispose&&this.geometry.dispose()}remove(){this.dispose(),this.material&&this.material.dispose&&this.material.dispose(),this.mesh=null,this.material=null,this.geometry=null,this.data=null}},a.exports});