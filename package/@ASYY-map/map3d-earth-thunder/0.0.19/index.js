// env=undefined => env=publish 
Cube("datav:/com/map3d-earth-thunder/0.0.19/beijing-road-300",[],function(a){return a.exports={type:"FeatureCollection",features:[{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.460892,39.908215],[116.453117,39.862541],[116.687248,39.652046],[116.704453,39.523808]]},type:"Feature",properties:{destinationid:"131000",id:1,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.808762,39.80302],[117.271515,39.777222],[117.434494,39.718342],[117.642586,39.731419],[117.749008,39.762032],[117.896202,39.758461],[118.069168,39.778931],[118.079971,39.746449],[118.065582,39.698341],[118.10434,39.667942],[118.177429,39.666622],[118.174934,39.635117]]},type:"Feature",properties:{destinationid:"130200",id:2,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.546509,39.844662],[116.629921,39.795994],[116.814674,39.64048],[116.891289,39.605282],[116.988655,39.481907],[117.083832,39.441257],[117.133461,39.389668],[117.246101,39.366161],[117.310692,39.324532],[117.283836,39.216293],[117.190338,39.125511]]},type:"Feature",properties:{destinationid:"120000",id:3,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.116478,39.736225],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.036705,39.465698],[115.96283,39.349369],[115.877937,39.249359],[115.815712,39.209446],[115.73761,39.109138],[115.685486,38.994228],[115.603806,38.908321],[115.552132,38.911938],[115.509514,38.865238],[115.48243,38.867626]]},type:"Feature",properties:{destinationid:"130600",id:4,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.006187,40.357853],[115.886833,40.359108],[115.778557,40.324116],[115.732643,40.325008],[115.631119,40.34864],[115.550354,40.426338],[115.338646,40.45607],[115.31517,40.498009],[115.255508,40.54425],[115.153099,40.560555],[115.145424,40.600956],[115.123718,40.61673],[115.023926,40.632507],[114.950783,40.668591],[114.918495,40.706524],[114.883743,40.811966]]},type:"Feature",properties:{destinationid:"130700",id:5,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.514717,38.914326],[116.512344,38.85429],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645164,38.548027],[116.700516,38.502953],[116.733376,38.450607],[116.851479,38.400513],[116.844162,38.313358],[116.857437,38.310474]]},type:"Feature",properties:{destinationid:"130900",id:6,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292625,39.165592],[116.200417,38.878586],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.805733,38.51004],[115.692268,38.323738],[115.686577,38.265633],[115.64785,38.190586],[115.639488,38.136738],[115.694313,38.024784],[115.706703,37.907101],[115.699158,37.769703],[115.672195,37.769482],[115.666016,37.735092]]},type:"Feature",properties:{destinationid:"131100",id:7,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543732,38.788353],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.98912,38.462227],[114.872971,38.438675],[114.739304,38.349804],[114.681152,38.298336],[114.649673,38.219131],[114.594826,38.164028],[114.586349,38.097397],[114.523476,38.100876],[114.501526,38.045452]]},type:"Feature",properties:{destinationid:"130100",id:8,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.445389,39.71817],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.864868,39.920227],[119.382568,39.932072],[119.539513,39.978806],[119.586861,39.941841]]},type:"Feature",properties:{destinationid:"130300",id:9,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.436333,39.907188],[116.433624,39.948978],[116.471458,39.971195],[116.444656,39.989765],[116.482132,40.045166],[116.484047,40.150162],[116.511459,40.22216],[116.621506,40.273315],[116.744972,40.27919],[116.767532,40.311089],[116.906494,40.391865],[116.993309,40.398499],[117.033966,40.378632],[117.162186,40.422188],[117.175232,40.495102],[117.133553,40.514946],[117.148491,40.552773],[117.255074,40.625408],[117.250198,40.667263],[117.303246,40.698292],[117.356972,40.822605],[117.410255,40.849342],[117.478699,40.848568],[117.511322,40.870369],[117.577431,40.875629],[117.627449,40.898052],[117.694794,40.879002],[117.737007,40.89336],[117.808952,40.882401],[117.956886,40.90884],[117.960571,40.960968],[117.938995,40.97612]]},type:"Feature",properties:{destinationid:"130800",id:10,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740814,39.113834],[115.686035,38.995022],[115.590446,38.893341],[115.545654,38.790501],[115.496872,38.75106],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.640411,38.211655],[114.50605,38.207657],[114.449661,38.222797],[114.295929,38.177883],[114.168297,38.184624],[114.098984,38.160294],[114.036934,38.113987],[113.939156,38.123322],[113.919403,38.055195],[113.876656,38.070461],[113.785339,38.067108],[113.612167,38.032646],[113.573288,38.010662],[113.59993,37.987633],[113.614189,37.942177],[113.589149,37.942795],[113.583588,37.861523]]},type:"Feature",properties:{destinationid:"140300",id:11,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.005424,40.358265],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.334488,40.418697],[115.269585,40.425003],[115.223633,40.4505],[115.213318,40.498508],[115.193291,40.517761],[115.079346,40.55159],[115.042923,40.546196],[114.994438,40.490963],[114.868683,40.478939],[114.77594,40.34737],[114.641945,40.295746],[114.600945,40.24675],[114.5392,40.211239],[114.416397,40.157032],[114.243523,40.139748],[114.20002,40.122917],[114.155052,40.080585],[114.042007,40.045994],[113.317322,40.013885],[113.289726,40.025398],[113.295197,40.090302]]},type:"Feature",properties:{destinationid:"140200",id:12,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.641006,37.68877],[114.65094,37.534119],[114.607689,37.391609],[114.577789,37.190643],[114.588287,37.064575],[114.550179,36.896275],[114.55262,36.66132],[114.515755,36.634506],[114.508255,36.609325],[114.490356,36.612286]]},type:"Feature",properties:{destinationid:"130400",id:13,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.763283,38.357841],[114.785545,38.061672],[114.748932,37.941711],[114.751595,37.857975],[114.687447,37.798782],[114.641006,37.68877],[114.65094,37.534119],[114.5989,37.348904],[114.577553,37.187267],[114.58931,37.110466],[114.515129,37.105217],[114.50898,37.0676]]},type:"Feature",properties:{destinationid:"130500",id:14,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.57666,38.009747],[113.511261,38.051426],[113.388382,38.064552],[113.318199,38.100586],[113.190269,38.11673],[113.06794,38.107559],[112.984406,38.049622],[112.917473,38.040104],[112.846046,38.060333],[112.669128,38.006241],[112.61982,38.019825],[112.586113,37.959278],[112.613609,37.884129],[112.583992,37.881729],[112.584709,37.860649],[112.549492,37.857021]]},type:"Feature",properties:{destinationid:"140100",id:15,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.036705,39.465698],[115.989616,39.39706],[115.843063,39.394772],[115.764992,39.357147],[115.662704,39.33287],[115.562439,39.339428],[115.396027,39.30949],[115.266518,39.336517],[115.189156,39.431049],[115.139084,39.436848],[114.921501,39.42305],[114.879204,39.383419],[114.843536,39.377377],[114.798447,39.336361],[114.747589,39.319683],[114.656891,39.355637],[114.512276,39.377377],[114.451927,39.401089],[114.408905,39.397964],[114.357132,39.420006],[114.327393,39.453674],[114.262299,39.476093],[114.213219,39.473034],[114.122459,39.427227],[114.019745,39.439732],[113.947105,39.429737],[113.838081,39.509048],[113.824127,39.562885],[113.767761,39.619968],[113.685921,39.649658],[113.624603,39.653183],[113.532211,39.62677],[113.404785,39.562828],[113.302162,39.55529],[113.2519,39.580585],[113.168968,39.589714],[112.976974,39.577114],[112.92318,39.515808],[112.869316,39.386555],[112.816978,39.310135],[112.644638,39.338924],[112.43338,39.331417]]},type:"Feature",properties:{destinationid:"140600",id:16,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643875,38.213333],[114.506676,38.207626],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.384987,38.066311],[113.396133,38.047501],[113.359688,37.891396],[113.36937,37.864906],[113.171227,37.874371],[113.089211,37.913761],[113.015869,37.890427],[112.97155,37.900528],[112.938118,37.866634],[112.890251,37.859039],[112.860886,37.793522],[112.747124,37.762417],[112.735199,37.696423]]},type:"Feature",properties:{destinationid:"140700",id:17,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.88089,39.252312],[115.814514,39.207943],[115.738167,39.110035],[115.697945,39.027794],[115.647003,39.059982],[115.441345,39.073982],[115.40226,39.027309],[115.277092,38.998966],[115.236694,38.942986],[115.060257,38.83453],[114.770805,38.887634],[114.585365,38.844185],[114.450035,38.840771],[114.228966,38.876911],[114.156967,38.862354],[114.044052,38.876266],[113.805565,38.956875],[113.746193,38.919735],[113.694016,38.784161],[113.595619,38.747425],[113.517647,38.686012],[113.343094,38.663235],[113.289268,38.691685],[113.244125,38.687298],[113.185928,38.663116],[113.170464,38.626987],[113.12429,38.606682],[113.105316,38.579243],[113.05423,38.564579],[113.000687,38.516548],[112.927864,38.491535],[112.85778,38.499378],[112.844872,38.462097],[112.731438,38.453133],[112.733429,38.417786]]},type:"Feature",properties:{destinationid:"140900",id:18,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.54174,38.786579],[115.488281,38.74675],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.465286,38.215508],[114.377983,38.141567],[114.344818,38.061462],[114.277885,38.034668],[114.260887,38.007694],[114.199532,38.002724],[114.162376,37.969555],[114.054199,37.990772],[114.002281,37.97794],[113.931465,37.937492],[113.908195,37.889114],[113.854248,37.840828],[113.752632,37.783268],[113.694778,37.785072],[113.718834,37.692001],[113.770531,37.625542],[113.78392,37.525055],[113.726021,37.467628],[113.663651,37.344131],[113.569336,37.29837],[113.516113,37.223244],[113.464447,37.191093],[113.45179,37.157124],[113.398758,37.10767],[113.275581,37.114128],[113.200035,37.10078],[113.142967,37.118423],[113.037277,37.090347],[113.004196,37.104855],[112.935287,37.100441],[112.962021,37.0802],[112.935532,37.015888],[112.941414,36.970459],[112.881851,36.833881],[112.893654,36.751343],[112.944733,36.676109],[112.928612,36.622261],[112.931503,36.480328],[112.99511,36.320934],[112.998337,36.224335],[113.118965,36.204723],[113.114006,36.190979]]},type:"Feature",properties:{destinationid:"140400",id:19,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.420349,35.995926],[114.38707,35.882088],[114.331306,35.793156],[114.316132,35.72345],[114.218086,35.598866],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[114.008476,35.334949],[113.862633,35.382282],[113.778343,35.369736],[113.718536,35.329739],[113.620148,35.302174],[113.48851,35.208469],[113.410522,35.193336],[113.309441,35.144619],[113.252228,35.141094],[113.15741,35.203255],[113.150391,35.239964],[113.107376,35.289188],[113.134773,35.35107],[113.053505,35.402344],[113.004913,35.468548],[112.850708,35.497112]]},type:"Feature",properties:{destinationid:"140500",id:20,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.436333,39.907188],[116.433624,39.948978],[116.471458,39.971195],[116.444656,39.989765],[116.482361,40.046032],[116.49131,40.190208],[116.539024,40.24493],[116.62265,40.273586],[116.744637,40.279053],[116.769157,40.312222],[116.906494,40.391865],[116.993309,40.398499],[117.033966,40.378632],[117.160583,40.421196],[117.175278,40.494617],[117.133553,40.514946],[117.148872,40.553555],[117.255074,40.625408],[117.250198,40.667263],[117.303246,40.698292],[117.341682,40.762299],[117.355957,40.821892],[117.410255,40.849342],[117.478699,40.848568],[117.527412,40.875126],[117.65197,40.895863],[117.700356,40.930782],[117.754799,40.944214],[117.789688,41.014835],[118.059288,41.078903],[118.069351,41.151875],[118.039841,41.255787],[118.063171,41.335995],[118.101906,41.367336],[118.097404,41.439697],[118.123398,41.488682],[118.131691,41.550217],[118.163383,41.565586],[118.194267,41.625084],[118.288498,41.606098],[118.326683,41.615421],[118.387161,41.672367],[118.382034,41.721729],[118.450859,41.792679],[118.538994,41.851028],[118.621529,41.858486],[118.714371,41.917431],[118.806221,42.034962],[118.924568,42.124237],[118.945297,42.165524],[118.92318,42.255833],[118.956886,42.275055]]},type:"Feature",properties:{destinationid:"150400",id:21,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.385963,40.393459],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.772446,40.731174],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.122597,40.761761],[114.026917,40.804081],[113.792809,40.872055],[113.696136,40.926727],[113.603592,40.941746],[113.455513,40.935074],[113.37706,40.962486],[113.078827,40.965614],[113.015488,40.982204],[112.984459,40.977612],[112.941673,40.939369],[112.820358,40.878311],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.319855,40.988552],[112.231041,40.962685],[112.091431,40.882751],[111.968666,40.901745],[111.694984,40.886383],[111.59446,40.845764],[111.455002,40.75845],[111.253716,40.731972],[111.106094,40.730293],[110.73381,40.600876],[110.533432,40.606583],[110.420097,40.572506],[110.265327,40.554901],[110.056213,40.598724],[109.961403,40.692921],[109.856522,40.713921],[109.840416,40.658257]]},type:"Feature",properties:{destinationid:"150200",id:22,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.005707,40.358124],[115.885979,40.35899],[115.75312,40.322384],[115.635674,40.346516],[115.597855,40.38237],[115.508942,40.370708],[115.277901,40.421448],[115.224258,40.449795],[115.213318,40.498508],[115.189728,40.519821],[115.001122,40.561237],[114.87513,40.608551],[114.861389,40.641788],[114.811813,40.675945],[114.798782,40.72287],[114.762871,40.733627],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.691628,40.92804],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.286774,40.971298],[113.078323,40.965652],[113.022842,40.982323],[112.984459,40.977612],[112.941673,40.939369],[112.820358,40.878311],[112.640663,40.857742],[112.538414,40.888874],[112.459419,40.958153],[112.318985,40.988461],[112.231041,40.962685],[112.093681,40.883217],[111.876999,40.8993],[111.843094,40.892586],[111.817268,40.860325],[111.670593,40.818432]]},type:"Feature",properties:{destinationid:"150100",id:23,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.641891,38.212265],[114.50605,38.207657],[114.449661,38.222797],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.498833,37.422455],[111.297493,37.478222],[111.238518,37.526321],[111.134041,37.523777]]},type:"Feature",properties:{destinationid:"141100",id:24,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643875,38.213333],[114.506676,38.207626],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.384987,38.066311],[113.396172,38.048012],[113.359688,37.891396],[113.36969,37.865093],[113.171227,37.874371],[113.089211,37.913761],[113.015869,37.890427],[112.970909,37.900326],[112.938118,37.866634],[112.890251,37.859039],[112.861763,37.794159],[112.80957,37.779396],[112.825058,37.699879],[112.81514,37.659264],[112.723129,37.540283],[112.457344,37.459221],[112.402046,37.456936],[112.358406,37.426346],[112.28595,37.409172],[112.256714,37.2332],[112.229332,37.194134],[112.111588,37.13327],[111.93718,37.003765],[111.929375,36.90556],[111.807129,36.761093],[111.814713,36.519066],[111.785393,36.420666],[111.739922,36.342232],[111.635818,36.320793],[111.51947,36.224514],[111.45269,36.090923],[111.499771,36.060074],[111.517647,36.083412]]},type:"Feature",properties:{destinationid:"141000",id:25,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643875,38.213333],[114.506676,38.207626],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.384987,38.066311],[113.396172,38.048012],[113.359688,37.891396],[113.36969,37.865093],[113.171227,37.874371],[113.089211,37.913761],[113.015869,37.890427],[112.970909,37.900326],[112.938118,37.866634],[112.890251,37.859039],[112.861763,37.794159],[112.80957,37.779396],[112.825058,37.699879],[112.81514,37.659264],[112.723129,37.540283],[112.457344,37.459221],[112.402046,37.456936],[112.358406,37.426346],[112.285851,37.409084],[112.250221,37.219639],[112.220963,37.186813],[112.111588,37.13327],[111.941422,37.00935],[111.929375,36.90556],[111.807846,36.762951],[111.814621,36.518082],[111.756989,36.363178],[111.731247,36.337513],[111.633072,36.319153],[111.521332,36.22654],[111.484459,36.170929],[111.454414,36.068111],[111.346291,35.869617],[111.280983,35.700798],[111.276695,35.592209],[111.31456,35.557796],[111.328011,35.480629],[111.282028,35.415108],[111.192055,35.362907],[111.077354,35.19379],[111.001396,35.128979],[111.04422,35.08485],[110.999802,35.038353],[111.004372,35.022896]]},type:"Feature",properties:{destinationid:"140800",id:26,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.005707,40.358124],[115.885979,40.35899],[115.75312,40.322384],[115.635674,40.346516],[115.597855,40.38237],[115.508942,40.370708],[115.277901,40.421448],[115.224258,40.449795],[115.213318,40.498508],[115.189728,40.519821],[115.001122,40.561237],[114.87513,40.608551],[114.861389,40.641788],[114.811813,40.675945],[114.798782,40.72287],[114.768204,40.732399],[114.619736,40.74728],[114.392197,40.698803],[114.198402,40.689983],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.675117,40.931759],[113.455513,40.935074],[113.37706,40.962486],[113.078827,40.965614],[113.015488,40.982204],[112.984459,40.977612],[112.941673,40.939369],[112.820358,40.878311],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.32222,40.98867],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.262383,40.554684],[110.083008,40.347988],[109.991257,40.306908],[109.986282,40.238045],[110.033638,40.182961],[110.04319,40.077339],[110.008949,39.969627],[109.962654,39.905449],[109.963509,39.84584],[109.990448,39.81752]]},type:"Feature",properties:{destinationid:"150600",id:27,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.436333,39.907188],[116.433624,39.948978],[116.471458,39.971195],[116.444656,39.989765],[116.482361,40.046032],[116.49131,40.190208],[116.539024,40.24493],[116.62265,40.273586],[116.744637,40.279053],[116.769157,40.312222],[116.906494,40.391865],[116.993309,40.398499],[117.033966,40.378632],[117.160583,40.421196],[117.175278,40.494617],[117.133553,40.514946],[117.148872,40.553555],[117.255074,40.625408],[117.250198,40.667263],[117.303246,40.698292],[117.341682,40.762299],[117.355957,40.821892],[117.410255,40.849342],[117.478699,40.848568],[117.527412,40.875126],[117.65197,40.895863],[117.700356,40.930782],[117.754799,40.944214],[117.789688,41.014835],[118.059288,41.078903],[118.069351,41.151875],[118.03878,41.246151],[118.050362,41.310169],[118.100723,41.364159],[118.097404,41.439697],[118.123398,41.488682],[118.130066,41.546963],[118.163742,41.566017],[118.18721,41.620232],[118.288498,41.606098],[118.326279,41.61517],[118.387161,41.672367],[118.382034,41.721729],[118.450859,41.792679],[118.538994,41.851028],[118.620956,41.858292],[118.696297,41.902027],[118.806221,42.034962],[118.922661,42.121582],[118.945145,42.163265],[118.937523,42.20879],[119.023102,42.209652],[119.058296,42.313889],[119.147156,42.31847],[119.23098,42.388428],[119.430038,42.432533],[119.584503,42.435444],[119.85511,42.498222],[119.926758,42.488449],[120.203423,42.513081],[120.585899,42.579422],[120.759789,42.69297],[120.907562,42.910641],[121.095627,43.089516],[121.272087,43.194675],[121.509163,43.294437],[121.769585,43.345795],[121.920921,43.353985],[122.123367,43.419231],[122.178047,43.503246],[122.239815,43.544014],[122.226631,43.570778],[122.262604,43.617405]]},type:"Feature",properties:{destinationid:"150500",id:28,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.385963,40.393459],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.772446,40.731174],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.122597,40.761761],[114.026917,40.804081],[113.792809,40.872055],[113.696136,40.926727],[113.603592,40.941746],[113.455513,40.935074],[113.37706,40.962486],[113.078827,40.965614],[113.015488,40.982204],[112.984459,40.977612],[112.941673,40.939369],[112.820358,40.878311],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.318985,40.988461],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.869576,40.636734],[108.756454,40.669563],[108.709625,40.697472],[108.686691,40.741177],[108.644524,40.773026],[108.553162,40.787262],[108.38179,40.88147],[108.299057,40.890617],[108.246506,40.914017],[108.028503,40.938179],[107.795433,40.904205],[107.666061,40.906166],[107.542221,40.873058],[107.423378,40.86499],[107.35186,40.828602],[107.225456,40.729614],[107.186829,40.670158],[107.100533,40.595661],[107.01535,40.38755],[107.077415,40.292179],[106.890221,40.118698],[106.815964,39.999863],[106.830162,39.756027],[106.865753,39.701599],[106.829155,39.701397],[106.825562,39.673775]]},type:"Feature",properties:{destinationid:"150300",id:29,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.385963,40.393459],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.391655,40.69873],[114.195984,40.690338],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.696136,40.926727],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.286774,40.971298],[113.120956,40.966537],[113.101219,41.031788],[113.114578,41.034328]]},type:"Feature",properties:{destinationid:"150900",id:30,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.005424,40.358265],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.874641,40.608871],[114.870277,40.632103],[114.801476,40.697216],[114.817841,40.786102],[114.74688,40.899609],[114.731979,40.944103],[114.757881,40.96843],[114.760704,40.996422],[114.741722,41.01228],[114.683456,41.159653],[114.708694,41.202],[114.828438,41.289436],[114.892456,41.377254],[114.986786,41.54092],[114.981567,41.570812],[115.009308,41.629829],[115.122314,41.693729],[115.170738,41.75433],[115.309486,41.837284],[115.322311,41.879883],[115.290405,41.94796],[115.290543,41.993267],[115.308571,42.025299],[115.36834,42.073677],[115.534096,42.133728],[115.581024,42.205067],[115.673805,42.268299],[115.701965,42.299614],[115.710526,42.342472],[115.824234,42.443497],[115.830757,42.484142],[115.872383,42.514942],[115.934296,42.613281],[115.939301,42.64027],[115.871666,42.73278],[115.845055,42.796646],[115.884117,42.858326],[115.924133,42.883831],[115.94693,42.956543],[116.034752,43.087032],[116.119553,43.144283],[116.14904,43.220375],[116.095535,43.391582],[116.146606,43.625824],[116.085983,43.851936],[116.106331,43.90012],[116.090454,43.944168]]},type:"Feature",properties:{destinationid:"152500",id:31,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.385963,40.393459],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.772446,40.731174],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.122597,40.761761],[114.026917,40.804081],[113.792809,40.872055],[113.696136,40.926727],[113.602966,40.941814],[113.455513,40.935074],[113.37706,40.962486],[113.078827,40.965614],[113.015488,40.982204],[112.984459,40.977612],[112.941673,40.939369],[112.820358,40.878311],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.318985,40.988461],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.26873,40.554852],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.869576,40.636734],[108.756454,40.669563],[108.709625,40.697472],[108.686691,40.741177],[108.644524,40.773026],[108.553162,40.787262],[108.38179,40.88147],[108.299057,40.890617],[108.246506,40.914017],[108.031693,40.938156],[107.795433,40.904205],[107.666061,40.906166],[107.542221,40.873058],[107.42247,40.864738],[107.409309,40.86005],[107.429764,40.809891],[107.41169,40.793667],[107.417938,40.757839]]},type:"Feature",properties:{destinationid:"150800",id:32,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.736481,40.018303],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.665245,41.508099],[122.625656,41.548462],[122.619499,41.603676],[122.683723,41.757511],[122.75901,41.857121],[122.884392,41.969513],[122.935059,42.06575],[123.038628,42.142239],[123.159004,42.195473],[123.368233,42.221474],[123.421021,42.214428],[123.4095,42.297878],[123.43074,42.362312],[123.417763,42.438923],[123.47319,42.576893],[123.429771,43.135292],[123.47551,43.228695],[123.481201,43.318523],[123.5495,43.409451],[123.612465,43.460827],[123.635941,43.509552],[123.648758,43.614288],[123.700905,43.672852],[123.8349,43.895943],[123.881844,43.943893],[123.918152,44.088135],[124.026482,44.203968],[124.109215,44.350628],[124.219521,44.452778],[124.261673,44.548756],[124.310677,44.600872],[124.343506,44.696415],[124.476883,44.866058],[124.58152,45.038525],[124.65921,45.084026],[124.789406,45.24741],[124.908928,45.242146],[124.922668,45.285645],[124.956177,45.319763],[125.000641,45.50639],[125.083397,45.644276],[125.062126,45.70689],[125.060165,45.831364],[124.978264,45.908375],[124.930611,46.036259],[124.916321,46.140942],[124.927277,46.200146],[124.997108,46.277462],[125.025322,46.445637],[125.117722,46.664555],[125.119446,46.735317],[125.134888,46.738354],[125.07782,46.771938],[125.026794,46.829491],[124.959877,46.856152],[124.922592,46.957741],[124.933456,46.982952],[124.899406,47.04697],[124.881531,47.157658],[124.748772,47.230461],[124.45993,47.30455],[124.359001,47.35268],[124.269707,47.367775],[124.107872,47.347099],[123.919899,47.418289],[123.774612,47.41431],[123.71199,47.433537],[123.663734,47.484585],[123.66523,47.575623],[123.605804,47.679764],[123.561813,47.71291],[123.540718,47.766766],[123.539101,47.842018],[123.560043,47.920933],[123.480614,47.999245],[123.393562,48.127956],[123.407082,48.164246],[123.385117,48.224052],[123.386971,48.304016],[123.278229,48.411037],[123.147217,48.507881],[122.989342,48.59639],[122.847481,48.625484],[122.72216,48.689526],[122.643211,48.700932],[122.440125,48.673992],[122.263092,48.713474],[122.220154,48.74416],[122.193672,48.789585],[122.068832,48.860195],[121.87249,48.892803],[121.72142,48.969318],[121.654488,49.050392],[121.597923,49.079121],[121.270943,49.095139],[121.159271,49.06052],[120.969543,49.066319],[120.898224,49.090725],[120.859787,49.158993],[120.784256,49.216694],[120.619598,49.276939],[120.413109,49.224369],[120.343315,49.177105],[120.146866,49.167046],[119.970955,49.208759],[119.758125,49.215328]]},type:"Feature",properties:{destinationid:"150700",id:33,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.841591,40.813126],[121.111748,40.991978],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.81897,41.563175],[123.066391,41.716087],[123.241486,41.795223],[123.337799,41.804985],[123.390015,41.785885],[123.428978,41.796783]]},type:"Feature",properties:{destinationid:"210100",id:34,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.269333,39.777584],[117.441681,39.718132],[117.642586,39.731419],[117.749008,39.762032],[117.90686,39.75951],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.391212,39.93343],[119.623131,40.001133],[119.738411,40.018814],[119.884613,40.074375],[120.28891,40.325535],[120.431709,40.396534],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.460228,41.148842],[121.735931,41.23563],[121.792595,41.245213],[121.935181,41.233734],[121.972336,41.179108],[121.981903,41.12701],[122.027664,41.066231],[122.209679,40.967205],[122.325371,40.872112],[122.375221,40.765381],[122.459724,40.676228],[122.400932,40.53363],[122.324806,40.462002],[122.210785,40.298004],[122.113953,40.210037],[122.014748,40.064899],[121.984459,39.99966],[121.984871,39.957043],[121.88781,39.793667],[121.831032,39.621357],[121.826843,39.566772],[121.803528,39.527603],[121.812119,39.424412],[121.827271,39.400921],[121.816368,39.300209],[121.750214,39.227165],[121.745132,39.179836],[121.703026,39.138008],[121.690697,39.100822],[121.639038,39.06155],[121.635155,39.029476],[121.602509,38.986736],[121.603081,38.9119],[121.618713,38.91431]]},type:"Feature",properties:{destinationid:"210200",id:35,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.269333,39.777584],[117.441681,39.718132],[117.642586,39.731419],[117.749008,39.762032],[117.90686,39.75951],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.387894,39.932747],[119.623131,40.001133],[119.738411,40.018814],[119.923561,40.093063],[120.025803,40.169346],[120.477188,40.430733],[120.623055,40.576359],[120.746086,40.729008],[120.845108,40.816044],[120.946144,40.873566],[121.066055,40.969131],[121.479919,41.156178],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.660622,41.507622],[122.796967,41.420521],[122.891754,41.382542],[122.918282,41.340248],[123.183434,41.176445],[123.232178,41.180458],[123.273155,41.209686],[123.378754,41.214882],[123.50235,41.159756],[123.631149,41.21497],[123.661003,41.213097],[123.717766,41.278027],[123.755173,41.304035],[123.770119,41.298355]]},type:"Feature",properties:{destinationid:"210500",id:36,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.736481,40.018303],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.946144,40.873566],[121.068207,40.970493],[121.460228,41.148842],[121.780586,41.244427],[121.939255,41.231918],[121.972336,41.179108],[121.982231,41.126419],[122.038971,41.054977],[122.209679,40.967205],[122.33239,40.864895],[122.368584,40.766132],[122.320442,40.711216],[122.290825,40.704964],[122.288879,40.666889],[122.235161,40.667053]]},type:"Feature",properties:{destinationid:"210800",id:37,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.736481,40.018303],[119.920677,40.0914],[120.025803,40.169346],[120.477188,40.430733],[120.623055,40.576359],[120.746086,40.729008],[120.847122,40.817547],[121.10376,40.98584],[121.107452,41.02055],[121.139252,41.069752],[121.135719,41.119179]]},type:"Feature",properties:{destinationid:"210700",id:38,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.736481,40.018303],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.946144,40.873566],[121.066055,40.969131],[121.45713,41.147511],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.81897,41.563175],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.444695,41.907013],[123.47979,41.912224],[123.556091,41.881237],[123.567459,41.858955],[123.827675,41.901569],[123.849297,41.900398],[123.864273,41.867687],[123.921013,41.876232]]},type:"Feature",properties:{destinationid:"210400",id:39,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.386505,39.932522],[119.623131,40.001133],[119.738411,40.018814],[119.882812,40.073608],[120.477188,40.430733],[120.623055,40.576359],[120.742371,40.725395],[120.849609,40.819298],[120.901794,40.842911],[121.071342,40.972298],[121.323769,41.077263],[121.285271,41.145458],[121.299843,41.236221],[121.298386,41.296055],[121.268936,41.384037],[121.277412,41.593296],[121.326241,41.69276],[121.531815,41.914692],[121.549881,41.961605],[121.649185,42.012119]]},type:"Feature",properties:{destinationid:"210900",id:40,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.269333,39.777584],[117.441681,39.718132],[117.642586,39.731419],[117.749008,39.762032],[117.90686,39.75951],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.387894,39.932747],[119.623131,40.001133],[119.738411,40.018814],[119.923561,40.093063],[120.025803,40.169346],[120.477188,40.430733],[120.623055,40.576359],[120.746086,40.729008],[120.845108,40.816044],[120.946144,40.873566],[121.066055,40.969131],[121.478355,41.155674],[121.776329,41.243774],[121.935692,41.233608],[121.972336,41.179108],[121.982536,41.125881],[122.038971,41.054977],[122.208755,40.9678],[122.323105,40.872063],[122.43576,40.864716],[122.614021,40.825871],[122.76123,40.982231],[122.811996,41.0755],[122.8965,41.161739],[122.995201,41.110489]]},type:"Feature",properties:{destinationid:"210300",id:41,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.436333,39.907188],[116.433624,39.948978],[116.471458,39.971195],[116.444656,39.989765],[116.482361,40.046032],[116.49131,40.190208],[116.539024,40.24493],[116.62265,40.273586],[116.744637,40.279053],[116.769157,40.312222],[116.906494,40.391865],[116.993309,40.398499],[117.033966,40.378632],[117.160583,40.421196],[117.175278,40.494617],[117.133553,40.514946],[117.148872,40.553555],[117.255074,40.625408],[117.250198,40.667263],[117.303246,40.698292],[117.341682,40.762299],[117.355957,40.821892],[117.410255,40.849342],[117.478699,40.848568],[117.527412,40.875126],[117.65197,40.895863],[117.700356,40.930782],[117.754799,40.944214],[117.789688,41.014835],[118.059288,41.078903],[118.069351,41.151875],[118.03878,41.246151],[118.050362,41.310169],[118.100723,41.364159],[118.097404,41.439697],[118.123398,41.488682],[118.130066,41.546963],[118.163742,41.566017],[118.18721,41.620232],[118.288498,41.606098],[118.326279,41.61517],[118.387161,41.672367],[118.382034,41.721729],[118.450859,41.792679],[118.538994,41.851028],[118.620956,41.858292],[118.696297,41.902027],[118.806221,42.034962],[118.922661,42.121582],[118.945145,42.163265],[118.937523,42.20879],[119.023102,42.209652],[119.058296,42.313889],[119.147156,42.31847],[119.23098,42.388428],[119.430038,42.432533],[119.584503,42.435444],[119.85511,42.498222],[119.926758,42.488449],[120.203423,42.513081],[120.584061,42.57872],[120.759789,42.69297],[120.907562,42.910641],[121.090508,43.085785],[121.270561,43.193886],[121.543877,43.305004],[121.769585,43.345795],[121.920921,43.353985],[122.138222,43.429817],[122.177368,43.502506],[122.239861,43.544132],[122.202133,43.600674],[122.222733,43.612648],[122.218628,43.669071],[122.063553,43.916973],[121.986069,43.984501],[121.993813,44.038086],[122.011772,44.049305],[122.010605,44.108692],[122.094315,44.283985],[122.047348,44.449196],[122.067993,44.535492],[122.053421,44.582516],[122.066132,44.602009],[122.00441,44.718552],[121.789413,44.872871],[121.767624,44.941799],[121.532372,45.045063],[121.543671,45.113003],[121.567627,45.149822],[121.608711,45.456474],[121.626244,45.491009],[121.599052,45.619686],[121.618866,45.711147],[121.592834,45.801796],[121.630035,45.93829],[121.68203,45.967377],[121.675392,45.997093],[121.697884,46.022964],[122.054527,46.109043],[122.070908,46.076431]]},type:"Feature",properties:{destinationid:"152200",id:42,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.736481,40.018303],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.946144,40.873566],[121.068207,40.970493],[121.473465,41.153931],[121.79055,41.245182],[121.939255,41.231918],[121.972336,41.179108],[121.982231,41.126419],[122.038971,41.054977],[122.208755,40.9678],[122.32341,40.87188],[122.587219,40.836796],[122.772133,40.776169],[122.922935,40.705772],[122.963745,40.632107],[123.135864,40.55397],[123.180717,40.448635],[123.266403,40.378925],[123.255188,40.320015],[123.286026,40.171196],[123.360855,40.111328],[123.386192,40.106991],[123.450668,40.031048],[123.51078,40.004387],[123.579361,39.929596],[123.65992,39.949249],[123.884232,39.932858],[124.091431,39.961189],[124.183739,40.005154],[124.271034,40.069862],[124.291481,40.052914],[124.329292,40.073879],[124.382759,40.124435]]},type:"Feature",properties:{destinationid:"210600",id:43,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.269333,39.777584],[117.441681,39.718132],[117.642586,39.731419],[117.749008,39.762032],[117.90686,39.75951],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.389305,39.933022],[119.623131,40.001133],[119.738411,40.018814],[119.923561,40.093063],[120.025803,40.169346],[120.477188,40.430733],[120.623055,40.576359],[120.746086,40.729008],[120.845108,40.816044],[120.946144,40.873566],[121.066055,40.969131],[121.476448,41.155025],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.659203,41.50753],[122.796967,41.420521],[122.891754,41.382542],[122.918282,41.340248],[123.043243,41.266094],[123.101402,41.307259],[123.181549,41.269432]]},type:"Feature",properties:{destinationid:"211000",id:44,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.385963,40.393459],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.772446,40.731174],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.122597,40.761761],[114.026917,40.804081],[113.792809,40.872055],[113.696136,40.926727],[113.603592,40.941746],[113.455513,40.935074],[113.37706,40.962486],[113.078827,40.965614],[113.015488,40.982204],[112.984459,40.977612],[112.941673,40.939369],[112.820358,40.878311],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.318985,40.988461],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.870491,40.636578],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.247826,40.913784],[108.029236,40.938194],[107.795433,40.904205],[107.667183,40.906281],[107.542221,40.873058],[107.424309,40.865227],[107.355011,40.830517],[107.226669,40.730804],[107.186829,40.670158],[107.099846,40.594479],[107.01458,40.384045],[107.07785,40.293018],[106.890221,40.118698],[106.813713,39.992218],[106.830406,39.754585],[106.881882,39.686783],[106.856491,39.619129],[106.88858,39.581791],[106.900314,39.533794],[106.891991,39.467628],[106.871727,39.439106],[106.724144,39.398258],[106.696762,39.401379],[106.632004,39.455986],[106.595757,39.451057],[106.534943,39.393089],[106.46759,39.384216],[106.402321,39.337997],[106.321274,39.319309],[106.274323,39.274757],[106.097839,39.228222],[106.050339,39.165554],[106.060402,39.129715],[106.03627,39.062805],[105.97271,39.03561],[105.935257,39.043564],[105.886139,39.030148],[105.837532,38.960693],[105.776367,38.927372],[105.707603,38.861881],[105.706322,38.844803]]},type:"Feature",properties:{destinationid:"152900",id:45,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.269333,39.777584],[117.441681,39.718132],[117.642586,39.731419],[117.749008,39.762032],[117.90686,39.75951],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.391212,39.93343],[119.623131,40.001133],[119.738411,40.018814],[119.923561,40.093063],[120.025803,40.169346],[120.477188,40.430733],[120.623055,40.576359],[120.746086,40.729008],[120.845108,40.816044],[120.946144,40.873566],[121.06443,40.968018],[121.45713,41.147511],[121.794914,41.245182],[121.937202,41.23307],[121.972336,41.179108],[121.988922,41.114719],[122.069405,41.124462]]},type:"Feature",properties:{destinationid:"211100",id:46,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.269333,39.777584],[117.441681,39.718132],[117.642586,39.731419],[117.749008,39.762032],[117.90686,39.75951],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.387894,39.932747],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.703003,40.66745],[120.757034,40.660019],[120.856285,40.755474]]},type:"Feature",properties:{destinationid:"211400",id:47,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.551186,41.882778],[123.600845,41.952099],[123.646004,42.105114],[123.72155,42.195473],[123.807808,42.241447],[123.844139,42.290272]]},type:"Feature",properties:{destinationid:"211200",id:48,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.436333,39.907188],[116.433624,39.948978],[116.471458,39.971195],[116.444656,39.989765],[116.482361,40.046032],[116.49131,40.190208],[116.537041,40.243382],[116.62265,40.273586],[116.744637,40.279053],[116.769157,40.312222],[116.906494,40.391865],[116.993309,40.398499],[117.033966,40.378632],[117.161499,40.421734],[117.175232,40.495102],[117.133553,40.514946],[117.148491,40.552773],[117.255074,40.625408],[117.250198,40.667263],[117.303246,40.698292],[117.341682,40.762299],[117.354118,40.82032],[117.410255,40.849342],[117.478699,40.848568],[117.527412,40.875126],[117.65197,40.895863],[117.700356,40.930782],[117.754799,40.944214],[117.788208,41.014252],[118.056236,41.079037],[118.101273,41.057514],[118.214172,41.050247],[118.247627,41.00407],[118.325806,40.972183],[118.405281,40.991692],[118.687172,40.923515],[118.846443,40.962978],[118.89415,40.996014],[118.963875,40.995022],[118.994057,40.980022],[119.047241,40.998375],[119.21479,41.006596],[119.268959,41.039391],[119.316551,41.107761],[119.406776,41.177532],[119.451073,41.266773],[119.583679,41.355652],[119.734314,41.395885],[119.901695,41.386379],[120.075554,41.454895],[120.203796,41.547359],[120.403122,41.622261],[120.451828,41.576954]]},type:"Feature",properties:{destinationid:"211300",id:49,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.386505,39.932522],[119.623131,40.001133],[119.738411,40.018814],[119.884613,40.074375],[120.28891,40.325535],[120.437584,40.400646],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.551903,41.883194],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.003426,42.485939],[124.013672,42.595222],[124.057198,42.694916],[124.08934,42.7384],[124.144722,42.77243],[124.221786,42.915363],[124.507797,43.188595],[124.587891,43.289715],[124.915894,43.539501],[124.974632,43.602215],[125.153763,43.713814],[125.322083,43.782841],[125.323181,43.886776]]},type:"Feature",properties:{destinationid:"220100",id:50,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.81897,41.563175],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.469849,41.913124],[123.556091,41.881237],[123.567802,41.858952],[123.879303,41.911934],[124.028259,41.90913],[124.101593,41.93499],[124.180817,41.926365],[124.424263,41.975597],[124.477135,41.916576],[124.476799,41.874161],[124.505066,41.843113],[124.588379,41.808987],[124.677429,41.737057],[124.76358,41.70116],[124.901772,41.687164],[125.000938,41.717293],[125.112968,41.705288],[125.160362,41.724316],[125.196144,41.706688],[125.292625,41.700874],[125.496643,41.767929],[125.535606,41.729614],[125.576965,41.727123],[125.613899,41.692818],[125.732491,41.650452],[125.747261,41.669685],[125.792374,41.680683],[125.847031,41.685833],[125.884453,41.668308],[125.936508,41.721142]]},type:"Feature",properties:{destinationid:"220500",id:51,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.386505,39.932522],[119.623131,40.001133],[119.738411,40.018814],[119.882812,40.073608],[120.28891,40.325535],[120.437584,40.400646],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.551903,41.883194],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.002876,42.484684],[124.014183,42.597137],[124.079376,42.728008],[124.144196,42.771732],[124.225136,42.919075],[124.449181,43.134045],[124.370644,43.170399]]},type:"Feature",properties:{destinationid:"220300",id:52,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.269333,39.777584],[117.441681,39.718132],[117.642586,39.731419],[117.749008,39.762032],[117.90686,39.75951],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.389305,39.933022],[119.623131,40.001133],[119.738411,40.018814],[119.884613,40.074375],[120.28891,40.325535],[120.431709,40.396534],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.444695,41.907013],[123.47979,41.912224],[123.556091,41.881237],[123.568123,41.858974],[123.879303,41.911934],[124.028259,41.90913],[124.101593,41.93499],[124.180817,41.926365],[124.424263,41.975597],[124.477135,41.916576],[124.476799,41.874161],[124.505066,41.843113],[124.588379,41.808987],[124.677429,41.737057],[124.760933,41.701706],[124.901772,41.687164],[125.000938,41.717293],[125.112968,41.705288],[125.160362,41.724316],[125.196144,41.706688],[125.292625,41.700874],[125.496643,41.767929],[125.535606,41.729614],[125.576965,41.727123],[125.613899,41.692818],[125.732491,41.650452],[125.750435,41.671143],[125.802231,41.678532],[125.799225,41.728283],[125.8367,41.749901],[125.865326,41.796825],[125.962593,41.756588],[125.996513,41.784916],[126.042282,41.766987],[126.07209,41.791668],[126.207741,41.779266],[126.309464,41.88311],[126.380531,41.891216],[126.427628,41.942764]]},type:"Feature",properties:{destinationid:"220600",id:53,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.736481,40.018303],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.665672,41.508423],[122.625656,41.548462],[122.619499,41.603676],[122.683723,41.757511],[122.75901,41.857121],[122.884392,41.969513],[122.935059,42.06575],[123.038628,42.142239],[123.159004,42.195473],[123.368233,42.221474],[123.421021,42.214428],[123.4095,42.297878],[123.43074,42.362312],[123.417763,42.438923],[123.47319,42.576893],[123.429771,43.135292],[123.47551,43.228695],[123.480553,43.317089],[123.5495,43.409451],[123.612465,43.460827],[123.635941,43.509552],[123.648758,43.614288],[123.700905,43.672852],[123.8349,43.895943],[123.881844,43.943893],[123.918495,44.088657],[124.026482,44.203968],[124.109215,44.350628],[124.219521,44.452778],[124.261673,44.548756],[124.310677,44.600872],[124.343506,44.696415],[124.476883,44.866058],[124.58152,45.038525],[124.656059,45.081268],[124.693527,45.125351],[124.66008,45.149261],[124.628304,45.217445],[124.5709,45.267128],[124.384941,45.35276],[124.209602,45.522259],[124.136871,45.533043],[123.979218,45.6077],[123.890221,45.619862],[123.569633,45.561794],[123.479042,45.566891],[123.261513,45.543133],[123.131508,45.573299],[122.924522,45.576111],[122.913139,45.604805],[122.869019,45.595501],[122.841118,45.619015]]},type:"Feature",properties:{destinationid:"220800",id:54,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.742439,40.020157],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.551903,41.883194],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.002876,42.484684],[124.013588,42.594879],[124.034012,42.625092],[124.241112,42.678596],[124.342468,42.732517],[124.5364,42.722725],[124.622337,42.735115],[124.785179,42.715946],[124.98851,42.793972],[125.042839,42.86235],[125.056877,42.918232],[125.145294,42.902534]]},type:"Feature",properties:{destinationid:"220400",id:55,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.386505,39.932522],[119.807007,40.043507],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.946144,40.873566],[121.066055,40.969131],[121.460228,41.148842],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.81897,41.563175],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.444695,41.907013],[123.47979,41.912224],[123.556091,41.881237],[123.567802,41.858952],[123.879303,41.911934],[124.027313,41.909035],[124.099998,41.934814],[124.149956,41.922409],[124.249092,41.936428],[124.614815,42.023617],[124.678192,42.023502],[124.760933,42.056156],[124.874428,42.065025],[124.971825,42.105808],[125.022667,42.146996],[125.140465,42.189346],[125.203461,42.270088],[125.365349,42.33662],[125.407997,42.403278],[125.440437,42.413265],[125.471375,42.456253],[125.475479,42.492462],[125.651611,42.572018],[125.73333,42.650127],[125.775269,42.747681],[125.866409,42.840065],[125.950134,42.890625],[125.984779,42.947544],[126.019592,43.066406],[126.003304,43.099564],[126.012962,43.164692],[125.982681,43.202278],[125.987656,43.230492],[126.048569,43.284004],[126.051483,43.306438],[126.117035,43.386623],[126.129913,43.43969],[126.205879,43.531921],[126.268181,43.563026],[126.315796,43.619164],[126.4123,43.681034],[126.470955,43.765972],[126.553139,43.84343]]},type:"Feature",properties:{destinationid:"220200",id:56,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.551575,41.882999],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.003426,42.485939],[124.013672,42.595222],[124.057198,42.694916],[124.08934,42.7384],[124.144722,42.77243],[124.221786,42.915363],[124.651535,43.34428],[124.914551,43.538425],[124.980469,43.60651],[125.207787,43.733776],[125.20253,43.781719],[125.139206,43.856655],[125.148926,43.896973],[125.241562,43.982143],[125.312881,44.001163],[125.370567,44.045361],[125.437775,44.17712],[125.495766,44.236588],[125.52919,44.331108],[125.607651,44.421059],[125.619896,44.468014],[125.723351,44.648212],[125.923294,44.848572],[126.01136,45.012691],[126.119698,45.115776],[126.14827,45.170788],[126.224457,45.192459],[126.303001,45.245106],[126.481003,45.444355],[126.545898,45.557316],[126.625191,45.64632],[126.60955,45.723827],[126.642372,45.757027]]},type:"Feature",properties:{destinationid:"230100",id:57,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.736481,40.018303],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.665245,41.508099],[122.625656,41.548462],[122.619499,41.603676],[122.683723,41.757511],[122.75901,41.857121],[122.884392,41.969513],[122.935059,42.06575],[123.038628,42.142239],[123.159004,42.195473],[123.368233,42.221474],[123.421021,42.214428],[123.4095,42.297878],[123.43074,42.362312],[123.417763,42.438923],[123.47319,42.576893],[123.429771,43.135292],[123.47551,43.228695],[123.481201,43.318523],[123.5495,43.409451],[123.612465,43.460827],[123.635941,43.509552],[123.648758,43.614288],[123.700905,43.672852],[123.8349,43.895943],[123.881844,43.943893],[123.918152,44.088135],[124.026482,44.203968],[124.109215,44.350628],[124.219521,44.452778],[124.261673,44.548756],[124.310677,44.600872],[124.343506,44.696415],[124.476883,44.866058],[124.58152,45.038525],[124.656059,45.081268],[124.690994,45.123661],[124.743767,45.093349],[124.823875,45.118359]]},type:"Feature",properties:{destinationid:"220700",id:58,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.81897,41.563175],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.469849,41.913124],[123.556091,41.881237],[123.567802,41.858952],[123.879303,41.911934],[124.028259,41.90913],[124.101593,41.93499],[124.180817,41.926365],[124.424263,41.975597],[124.477135,41.916576],[124.476799,41.874161],[124.505066,41.843113],[124.588379,41.808987],[124.677429,41.737057],[124.760933,41.701706],[124.901772,41.687164],[125.000938,41.717293],[125.112968,41.705288],[125.160362,41.724316],[125.196144,41.706688],[125.292625,41.700874],[125.496643,41.767929],[125.535606,41.729614],[125.576965,41.727123],[125.613899,41.692818],[125.734001,41.65065],[125.750435,41.671143],[125.803368,41.679974],[125.798775,41.727325],[125.8367,41.749901],[125.870796,41.801586],[125.899223,41.890087],[126.061119,41.985722],[126.14167,42.017784],[126.182625,42.015881],[126.256683,42.068222],[126.318054,42.063805],[126.412399,42.094067],[126.596313,42.10323],[126.6315,42.120537],[126.626823,42.142197],[126.687057,42.207272],[126.775558,42.274815],[126.862099,42.258911],[127.032021,42.265259],[127.111206,42.317486],[127.28083,42.366768],[127.333618,42.438103],[127.494675,42.433994],[127.667076,42.496292],[127.730865,42.594318],[127.722221,42.648281],[127.768105,42.753304],[127.870766,42.777813],[127.904587,42.812557],[127.942589,42.813732],[127.981804,42.865128],[128.070602,42.919209],[128.061493,43.066841],[128.096176,43.12001],[128.069397,43.165279],[128.06723,43.202404],[128.111023,43.247383],[128.112564,43.319748],[128.187042,43.421154],[128.205612,43.471512],[128.269791,43.393066],[128.381363,43.354347],[128.522186,43.325874],[128.666824,43.338276],[128.750977,43.312656],[128.77684,43.25943],[128.939102,43.197525],[128.969666,43.13353],[129.034103,43.120209],[129.085693,43.090248],[129.090836,43.061134],[129.146561,43.036312],[129.169189,43.045528],[129.280762,43.012981],[129.317184,43.017475],[129.385117,42.985867],[129.490997,42.994297],[129.513275,42.904823]]},type:"Feature",properties:{destinationid:"222400",id:59,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.665245,41.508099],[122.625656,41.548462],[122.619499,41.603676],[122.683723,41.757511],[122.75901,41.857121],[122.884392,41.969513],[122.935059,42.06575],[123.038628,42.142239],[123.159004,42.195473],[123.368233,42.221474],[123.4207,42.214043],[123.4095,42.297878],[123.43074,42.362312],[123.417763,42.438923],[123.47319,42.576893],[123.429771,43.135292],[123.47551,43.228695],[123.481201,43.318523],[123.5495,43.409451],[123.612465,43.460827],[123.635941,43.509552],[123.648758,43.614288],[123.700905,43.672852],[123.8349,43.895943],[123.881844,43.943893],[123.918152,44.088135],[124.026482,44.203968],[124.109215,44.350628],[124.219521,44.452778],[124.261673,44.548756],[124.310677,44.600872],[124.343506,44.696415],[124.476883,44.866058],[124.58152,45.038525],[124.65921,45.084026],[124.789406,45.24741],[124.908928,45.242146],[124.922668,45.285645],[124.956177,45.319763],[125.000641,45.50639],[125.084641,45.650028],[125.062126,45.70689],[125.060165,45.831364],[124.978264,45.908375],[124.930611,46.036259],[124.916321,46.140942],[124.927277,46.200146],[124.997108,46.277462],[125.025322,46.445637],[125.117722,46.664555],[125.119446,46.735317],[125.134888,46.738354],[125.07782,46.771938],[125.026794,46.829491],[124.959877,46.856152],[124.922592,46.957741],[124.933456,46.982952],[124.899406,47.04697],[124.881531,47.157658],[124.748772,47.230461],[124.45993,47.30455],[124.356148,47.353294],[124.267693,47.367729],[123.957932,47.341457]]},type:"Feature",properties:{destinationid:"230200",id:60,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.81897,41.563175],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.469849,41.913124],[123.556091,41.881237],[123.567802,41.858952],[123.879303,41.911934],[124.028259,41.90913],[124.101593,41.93499],[124.180817,41.926365],[124.424263,41.975597],[124.477135,41.916576],[124.476799,41.874161],[124.505066,41.843113],[124.588379,41.808987],[124.677429,41.737057],[124.760933,41.701706],[124.901772,41.687164],[125.000938,41.717293],[125.112968,41.705288],[125.160362,41.724316],[125.196144,41.706688],[125.292625,41.700874],[125.496643,41.767929],[125.535606,41.729614],[125.576965,41.727123],[125.613899,41.692818],[125.734444,41.650791],[125.750435,41.671143],[125.803368,41.679974],[125.798775,41.727325],[125.8367,41.749901],[125.870796,41.801586],[125.899223,41.890087],[126.061119,41.985722],[126.14167,42.017784],[126.182625,42.015881],[126.256683,42.068222],[126.318054,42.063805],[126.412399,42.094067],[126.596313,42.10323],[126.6315,42.120537],[126.626823,42.142197],[126.687057,42.207272],[126.775558,42.274815],[126.862099,42.258911],[127.032021,42.265259],[127.111206,42.317486],[127.28083,42.366768],[127.333618,42.438103],[127.494675,42.433994],[127.667076,42.496292],[127.730865,42.594318],[127.722221,42.648281],[127.768105,42.753304],[127.870766,42.777813],[127.904587,42.812557],[127.942589,42.813732],[127.981804,42.865128],[128.070602,42.919209],[128.061493,43.066841],[128.096176,43.12001],[128.069397,43.165279],[128.06723,43.202404],[128.110596,43.246555],[128.112808,43.320324],[128.187042,43.421154],[128.211914,43.481773],[128.283142,43.527832],[128.343277,43.539204],[128.57225,43.641121],[128.604691,43.679382],[128.656265,43.682098],[128.714478,43.70789],[128.858139,43.784821],[128.980972,43.886147],[129.034164,43.904324],[129.059753,43.9632],[129.159851,44.088612],[129.192993,44.105556],[129.217545,44.162312],[129.408096,44.26366],[129.4505,44.330475],[129.466858,44.432457],[129.570694,44.504112],[129.623138,44.511787],[129.729874,44.561165],[129.694336,44.623058],[129.744797,44.672771],[129.736237,44.725506],[129.833557,44.779903],[129.847168,44.806526],[129.899261,44.83984],[129.951721,44.84687],[130.016983,44.897491],[130.079773,44.921604],[130.081421,44.965324],[130.116165,45.024521],[130.160767,45.048347],[130.188263,45.103523],[130.255157,45.162384],[130.337234,45.208401],[130.401169,45.205635],[130.429474,45.187901],[130.62001,45.216187],[130.664841,45.258785],[130.754837,45.277439],[130.791306,45.328045],[130.850327,45.336472],[130.927292,45.299259],[130.976028,45.300011]]},type:"Feature",properties:{destinationid:"230300",id:61,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.551186,41.882778],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.003426,42.485939],[124.013672,42.595222],[124.057198,42.694916],[124.08934,42.7384],[124.144722,42.77243],[124.220261,42.913551],[124.651535,43.34428],[124.914551,43.538425],[124.980469,43.60651],[125.207359,43.733273],[125.203339,43.780266],[125.139206,43.856655],[125.149406,43.897625],[125.241562,43.982143],[125.312881,44.001163],[125.369591,44.044186],[125.437775,44.17712],[125.495766,44.236588],[125.52919,44.331108],[125.607651,44.421059],[125.619896,44.468014],[125.725113,44.65049],[125.923294,44.848572],[126.01136,45.012691],[126.119698,45.115776],[126.147514,45.169979],[126.225227,45.192837],[126.308411,45.249973],[126.481003,45.444355],[126.545898,45.557316],[126.621544,45.638699],[126.788551,45.652325],[126.841324,45.745419],[126.817139,45.777634],[126.844872,45.786594],[127.125908,45.769123],[127.272186,45.77766],[127.436615,45.758236],[127.477646,45.735966],[127.55761,45.761848],[127.902855,45.772903],[128.146805,45.801899],[128.185287,45.820805],[128.397827,45.782684],[128.657104,45.816303],[128.754227,45.799564],[128.842545,45.812481],[128.975677,45.865868],[129.090134,45.877888],[129.277969,45.96405],[129.345932,46.055241],[129.353317,46.101124],[129.450485,46.1758],[129.449265,46.241299],[129.521957,46.291012],[129.61412,46.303215],[129.660614,46.338799],[129.658813,46.374107],[129.726562,46.49284],[129.913544,46.56609],[130.052582,46.693481],[130.157806,46.766941],[130.306412,46.759468],[130.30423,46.825417],[130.260376,46.857994],[130.258484,47.144917],[130.230469,47.223553],[130.277283,47.332214]]},type:"Feature",properties:{destinationid:"230400",id:62,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.551903,41.883194],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.003426,42.485939],[124.013672,42.595222],[124.057198,42.694916],[124.08934,42.7384],[124.144722,42.77243],[124.220261,42.913551],[124.651535,43.34428],[124.914551,43.538425],[124.980469,43.60651],[125.207359,43.733273],[125.203339,43.780266],[125.139206,43.856655],[125.149406,43.897625],[125.241562,43.982143],[125.312881,44.001163],[125.368851,44.043312],[125.437775,44.17712],[125.495766,44.236588],[125.52919,44.331108],[125.607651,44.421059],[125.619896,44.468014],[125.725113,44.65049],[125.923294,44.848572],[126.01136,45.012691],[126.119698,45.115776],[126.147514,45.169979],[126.225227,45.192837],[126.307968,45.249535],[126.481682,45.445217],[126.558311,45.574059],[126.611008,45.620777],[126.624168,45.642139],[126.52063,45.640572],[126.496117,45.655132],[126.478081,45.797249],[126.496574,45.844276],[126.53479,45.858627],[126.538391,45.952641],[126.632843,46.048813],[126.660439,46.101444],[126.756279,46.176987],[126.92749,46.371277],[126.974426,46.490273],[126.975723,46.542942],[127.010712,46.557148],[127.043831,46.601593],[127.062729,46.642735],[127.057663,46.682598],[127.14035,46.708672],[127.277977,46.810719],[127.457146,46.847885],[127.55397,46.842346],[127.630699,46.866676],[127.740417,46.930168],[127.883324,46.962044],[128.014175,47.015099],[128.128052,47.032242],[128.240112,47.085583],[128.303833,47.143494],[128.36203,47.162552],[128.359024,47.255714],[128.382385,47.283806],[128.389618,47.343834],[128.431503,47.373566],[128.452682,47.471329],[128.522461,47.557449],[128.503113,47.590988],[128.509323,47.611439],[128.612686,47.674698],[128.69664,47.701584],[128.87439,47.707436],[128.89946,47.724426]]},type:"Feature",properties:{destinationid:"230700",id:63,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.736481,40.018303],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.665474,41.508255],[122.625656,41.548462],[122.619499,41.603676],[122.683723,41.757511],[122.75901,41.857121],[122.884392,41.969513],[122.935059,42.06575],[123.038628,42.142239],[123.159004,42.195473],[123.368233,42.221474],[123.421021,42.214428],[123.4095,42.297878],[123.43074,42.362312],[123.417763,42.438923],[123.47319,42.576893],[123.429771,43.135292],[123.47551,43.228695],[123.481476,43.319088],[123.5495,43.409451],[123.612465,43.460827],[123.635941,43.509552],[123.648758,43.614288],[123.700905,43.672852],[123.8349,43.895943],[123.881844,43.943893],[123.918152,44.088135],[124.026482,44.203968],[124.109215,44.350628],[124.219521,44.452778],[124.261673,44.548756],[124.310677,44.600872],[124.343506,44.696415],[124.476883,44.866058],[124.58152,45.038525],[124.65921,45.084026],[124.785797,45.245029],[124.819771,45.255104],[124.906593,45.240517],[124.92305,45.286255],[124.955666,45.318604],[125.000641,45.50639],[125.084717,45.653145],[125.062126,45.70689],[125.060165,45.831364],[124.978264,45.908375],[124.930611,46.036259],[124.916656,46.145134],[124.927773,46.200966],[124.997108,46.277462],[125.024681,46.443443],[125.08062,46.590477],[125.087585,46.602192],[125.112717,46.590885]]},type:"Feature",properties:{destinationid:"230600",id:64,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.551186,41.882778],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.003426,42.485939],[124.013672,42.595222],[124.057198,42.694916],[124.08934,42.7384],[124.144722,42.77243],[124.220261,42.913551],[124.651535,43.34428],[124.914551,43.538425],[124.980469,43.60651],[125.207359,43.733273],[125.203339,43.780266],[125.139206,43.856655],[125.149406,43.897625],[125.241562,43.982143],[125.312881,44.001163],[125.369591,44.044186],[125.437775,44.17712],[125.495766,44.236588],[125.52919,44.331108],[125.607651,44.421059],[125.619896,44.468014],[125.725113,44.65049],[125.923294,44.848572],[126.01136,45.012691],[126.119698,45.115776],[126.147514,45.169979],[126.225227,45.192837],[126.308411,45.249973],[126.481003,45.444355],[126.545898,45.557316],[126.621544,45.638699],[126.788551,45.652325],[126.841324,45.745419],[126.817215,45.777813],[126.845665,45.786678],[127.125908,45.769123],[127.272186,45.77766],[127.436615,45.758236],[127.47879,45.735992],[127.55761,45.761848],[127.902855,45.772903],[128.146805,45.801899],[128.185287,45.820805],[128.397827,45.782684],[128.657104,45.816303],[128.754227,45.799564],[128.842545,45.812481],[128.975677,45.865868],[129.090134,45.877888],[129.299957,45.978165],[129.311478,46.023251],[129.346817,46.056965],[129.353027,46.100761],[129.450485,46.1758],[129.448486,46.240471],[129.521957,46.291012],[129.61412,46.303215],[129.659256,46.337341],[129.658813,46.374107],[129.727371,46.493435],[129.913544,46.56609],[130.156754,46.76643],[130.305862,46.75919],[130.30603,46.796925],[130.361221,46.809494]]},type:"Feature",properties:{destinationid:"230800",id:65,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.386505,39.932522],[119.623131,40.001133],[119.738411,40.018814],[119.885292,40.074684],[120.28891,40.325535],[120.437584,40.400646],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.552216,41.883419],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.003426,42.485939],[124.013672,42.595222],[124.057198,42.694916],[124.08934,42.7384],[124.144722,42.77243],[124.220261,42.913551],[124.651535,43.34428],[124.914551,43.538425],[124.980469,43.60651],[125.207359,43.733273],[125.203339,43.780266],[125.139587,43.85564],[125.146774,43.893597],[125.241562,43.982143],[125.314453,44.001945],[125.37178,44.046928],[125.437775,44.17712],[125.495766,44.236588],[125.52919,44.331108],[125.607651,44.421059],[125.619896,44.468014],[125.725113,44.65049],[125.923294,44.848572],[126.01136,45.012691],[126.119698,45.115776],[126.147514,45.169979],[126.225227,45.192837],[126.308411,45.249973],[126.481003,45.444355],[126.545898,45.557316],[126.621399,45.638569],[126.756935,45.641075],[126.796669,45.659176],[126.841537,45.746498],[126.818367,45.779076],[127.272186,45.77766],[127.436615,45.758236],[127.477646,45.735966],[127.55761,45.761848],[127.902855,45.772903],[128.146805,45.801899],[128.185287,45.820805],[128.397827,45.782684],[128.6521,45.816025],[128.709564,45.817379],[128.751678,45.799507],[128.837357,45.811241],[128.97496,45.865685],[129.091064,45.878185],[129.297089,45.975777],[129.311478,46.023251],[129.346817,46.056965],[129.353027,46.100761],[129.450485,46.1758],[129.449509,46.241528],[129.522476,46.291245],[129.630722,46.313297],[129.661652,46.340328],[129.658813,46.374107],[129.725311,46.491833],[129.913544,46.56609],[130.052582,46.693481],[130.161148,46.768284],[130.441223,46.756077],[130.672882,46.773296],[130.797089,46.760113],[130.972427,46.780579],[131.133652,46.758396],[131.142059,46.666298],[131.158157,46.643364]]},type:"Feature",properties:{destinationid:"230500",id:66,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.551903,41.883194],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.003426,42.485939],[124.013672,42.595222],[124.057198,42.694916],[124.08934,42.7384],[124.144722,42.77243],[124.220261,42.913551],[124.651535,43.34428],[124.914551,43.538425],[124.980469,43.60651],[125.207359,43.733273],[125.203339,43.780266],[125.139206,43.856655],[125.149406,43.897625],[125.241562,43.982143],[125.312881,44.001163],[125.368851,44.043312],[125.437775,44.17712],[125.495766,44.236588],[125.52919,44.331108],[125.607651,44.421059],[125.619896,44.468014],[125.725113,44.65049],[125.923294,44.848572],[126.01136,45.012691],[126.119698,45.115776],[126.147514,45.169979],[126.225227,45.192837],[126.307968,45.249535],[126.481682,45.445217],[126.558311,45.574059],[126.611008,45.620777],[126.624168,45.642139],[126.52063,45.640572],[126.496986,45.652695],[126.477852,45.791431],[126.489624,45.832607],[126.534729,45.858479],[126.528275,45.899559],[126.544533,45.96283],[126.632843,46.048813],[126.660439,46.101444],[126.756279,46.176987],[126.929901,46.374828],[126.992714,46.57486],[126.970352,46.631687],[126.992729,46.637356]]},type:"Feature",properties:{destinationid:"231200",id:67,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.551186,41.882778],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.003426,42.485939],[124.013672,42.595222],[124.057198,42.694916],[124.08934,42.7384],[124.144722,42.77243],[124.220261,42.913551],[124.651535,43.34428],[124.914551,43.538425],[124.980469,43.60651],[125.207359,43.733273],[125.203339,43.780266],[125.139587,43.85564],[125.146774,43.893597],[125.241562,43.982143],[125.314453,44.001945],[125.37178,44.046928],[125.437775,44.17712],[125.495766,44.236588],[125.52919,44.331108],[125.607651,44.421059],[125.619896,44.468014],[125.725113,44.65049],[125.923294,44.848572],[126.01136,45.012691],[126.119698,45.115776],[126.147514,45.169979],[126.225227,45.192837],[126.308411,45.249973],[126.481003,45.444355],[126.545898,45.557316],[126.621399,45.638569],[126.756935,45.641075],[126.796669,45.659176],[126.841537,45.746498],[126.819237,45.779503],[127.272186,45.77766],[127.436615,45.758236],[127.477646,45.735966],[127.55761,45.761848],[127.902855,45.772903],[128.146805,45.801899],[128.185287,45.820805],[128.397827,45.782684],[128.6521,45.816025],[128.709564,45.817379],[128.751678,45.799507],[128.837357,45.811241],[128.97496,45.865685],[129.091064,45.878185],[129.296356,45.975258],[129.311478,46.023251],[129.346817,46.056965],[129.353027,46.100761],[129.450485,46.1758],[129.448715,46.24073],[129.522476,46.291245],[129.591339,46.303364],[129.644608,46.282383],[129.729614,46.214245],[129.809021,46.20813],[130.109451,46.096588],[130.205399,46.020035],[130.224899,45.980698],[130.488693,45.797886],[130.783737,45.756451],[130.878616,45.776604],[130.987595,45.756855],[131.015594,45.77142]]},type:"Feature",properties:{destinationid:"230900",id:68,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.81897,41.563175],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.469849,41.913124],[123.556091,41.881237],[123.567802,41.858952],[123.879303,41.911934],[124.028259,41.90913],[124.101593,41.93499],[124.180817,41.926365],[124.424263,41.975597],[124.477135,41.916576],[124.476799,41.874161],[124.505066,41.843113],[124.588379,41.808987],[124.677429,41.737057],[124.760933,41.701706],[124.901772,41.687164],[125.000938,41.717293],[125.112968,41.705288],[125.160362,41.724316],[125.196144,41.706688],[125.292625,41.700874],[125.496643,41.767929],[125.535606,41.729614],[125.576965,41.727123],[125.613899,41.692818],[125.734444,41.650791],[125.750435,41.671143],[125.803368,41.679974],[125.798775,41.727325],[125.8367,41.749901],[125.870796,41.801586],[125.899223,41.890087],[126.061119,41.985722],[126.14167,42.017784],[126.182625,42.015881],[126.256683,42.068222],[126.318054,42.063805],[126.412399,42.094067],[126.596313,42.10323],[126.6315,42.120537],[126.626823,42.142197],[126.687057,42.207272],[126.775558,42.274815],[126.862099,42.258911],[127.032021,42.265259],[127.111206,42.317486],[127.28083,42.366768],[127.333618,42.438103],[127.494675,42.433994],[127.667763,42.496803],[127.730865,42.594318],[127.722221,42.648281],[127.768105,42.753304],[127.870766,42.777813],[127.904587,42.812557],[127.942589,42.813732],[127.981804,42.865128],[128.070602,42.919209],[128.061493,43.066841],[128.096176,43.12001],[128.069397,43.165279],[128.06723,43.202404],[128.111023,43.247383],[128.112564,43.319748],[128.187042,43.421154],[128.209274,43.479324],[128.283142,43.527832],[128.343277,43.539204],[128.57225,43.641121],[128.604691,43.679382],[128.656265,43.682098],[128.714478,43.70789],[128.858139,43.784821],[128.980972,43.886147],[129.034164,43.904324],[129.059753,43.9632],[129.159851,44.088612],[129.192993,44.105556],[129.217545,44.162312],[129.407425,44.262859],[129.4505,44.330475],[129.465576,44.431004],[129.563614,44.494293],[129.605576,44.536598],[129.588043,44.572281],[129.618881,44.58305]]},type:"Feature",properties:{destinationid:"231000",id:69,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.406258,37.324474],[116.662834,37.018013],[116.774345,36.828243],[116.85498,36.742443],[116.888008,36.62421],[116.850861,36.555187],[116.845566,36.510761],[116.889061,36.451977],[116.907753,36.333305],[116.978821,36.260056],[117.000549,36.197651],[117.095413,36.068401],[117.103203,35.991211],[117.07106,35.911625],[117.042397,35.482021],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357681,34.453743],[117.306259,34.35112],[117.299629,34.295963],[117.346832,34.180141],[117.420265,34.125675],[117.644997,34.06255],[117.636696,33.988823],[117.656105,33.927132],[117.655457,33.833645],[117.738411,33.50771],[117.735527,33.468578],[117.874817,33.210907],[117.878181,33.173641],[117.852325,33.094627],[117.887047,33.030941],[117.939247,32.984753],[117.947273,32.910843],[117.927879,32.844509],[118.035713,32.791183],[118.163857,32.669128],[118.310768,32.456558],[118.401108,32.370857],[118.585251,32.292591],[118.734978,32.269154],[118.788033,32.238155],[118.874466,32.097004],[118.755562,32.072144],[118.767159,32.040855]]},type:"Feature",properties:{destinationid:"320100",id:70,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.847122,40.817547],[120.901794,40.842911],[121.074921,40.974064],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.820312,41.563702],[123.111679,41.740665],[123.273918,41.79604],[123.295769,41.846924],[123.438141,41.904861],[123.475967,41.91333],[123.552666,41.883808],[123.600685,41.951756],[123.643387,42.100452],[123.676239,42.147003],[123.729431,42.201828],[123.877228,42.278915],[123.898125,42.342484],[124.003426,42.485939],[124.013672,42.595222],[124.057198,42.694916],[124.08934,42.7384],[124.144722,42.77243],[124.220261,42.913551],[124.651535,43.34428],[124.914551,43.538425],[124.980469,43.60651],[125.207359,43.733273],[125.203339,43.780266],[125.139206,43.856655],[125.149406,43.897625],[125.241562,43.982143],[125.312881,44.001163],[125.369591,44.044186],[125.437775,44.17712],[125.495766,44.236588],[125.52919,44.331108],[125.607651,44.421059],[125.619896,44.468014],[125.725113,44.65049],[125.923294,44.848572],[126.01136,45.012691],[126.119698,45.115776],[126.147514,45.169979],[126.225227,45.192837],[126.307968,45.249535],[126.481003,45.444355],[126.545898,45.557316],[126.624588,45.641048],[126.52063,45.640572],[126.496246,45.654598],[126.478081,45.797249],[126.496574,45.844276],[126.53479,45.858627],[126.53775,45.951092],[126.632843,46.048813],[126.660439,46.101444],[126.755638,46.176342],[126.850784,46.296383],[126.900131,46.335953],[126.933189,46.380955],[126.975266,46.494141],[126.979164,46.547737],[126.934235,46.561447],[126.898254,46.605156],[126.897675,46.662533],[126.846321,46.782444],[126.837189,46.884956],[126.853394,47.059181],[126.910774,47.149555],[126.937813,47.239307],[126.911766,47.295364],[126.91864,47.395569],[126.889137,47.455055],[126.929085,47.553135],[126.913269,47.608303],[126.794495,47.789803],[126.768234,47.910316],[126.780418,47.958397],[126.762863,47.982201],[126.764656,48.098454],[126.742287,48.130199],[126.727119,48.227638],[126.599739,48.253677],[126.435776,48.326263],[126.475227,48.364243],[126.486328,48.422508],[126.567947,48.510731],[126.570061,48.573475],[126.60305,48.656204],[126.722824,48.719074],[126.831192,48.875103],[126.914818,48.944088],[126.968803,48.96423],[127.008347,49.016487],[127.058777,49.05051],[127.218323,49.084423],[127.22683,49.127075],[127.261726,49.143047],[127.272202,49.232311],[127.254837,49.296352],[127.283661,49.338463],[127.285225,49.39904],[127.266891,49.451538],[127.279007,49.491703],[127.334137,49.53252],[127.355621,49.644363],[127.374962,49.659653],[127.371117,49.727928],[127.394714,49.749653],[127.387238,49.790119],[127.406708,49.80616],[127.416763,49.864304],[127.402428,49.97567],[127.431145,50.045723],[127.491455,50.130459],[127.517868,50.210129],[127.498367,50.249783]]},type:"Feature",properties:{destinationid:"231100",id:71,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.37986,37.391129],[116.406258,37.324474],[116.662834,37.018013],[116.774345,36.828243],[116.85498,36.742443],[116.888008,36.62421],[116.850861,36.555187],[116.845566,36.510761],[116.889061,36.451977],[116.907753,36.333305],[116.978821,36.260056],[117.000549,36.197651],[117.096001,36.06628],[117.103203,35.991211],[117.07106,35.911625],[117.042397,35.482021],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425728,34.550159],[117.41761,34.515381],[117.357681,34.453743],[117.304848,34.347961],[117.29776,34.304413],[117.311432,34.274586],[117.184898,34.261734]]},type:"Feature",properties:{destinationid:"320300",id:72,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178284,36.626984],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.289261,34.505692],[118.330719,34.451397],[118.447678,34.367996],[118.645706,34.274651],[118.780724,34.165333],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.38134,33.241497],[119.436592,33.107227],[119.495911,32.881077],[119.501442,32.788399],[119.553055,32.675819],[119.564774,32.57972],[119.627861,32.418159],[119.701302,32.404499],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.219078,32.124229],[120.24807,31.99427],[120.29734,31.904436],[120.32122,31.808195],[120.335602,31.641991],[120.301765,31.574686]]},type:"Feature",properties:{destinationid:"320200",id:73,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.486488,39.908104],[116.488251,39.869732],[116.604675,39.866203],[116.805901,39.803463],[117.267708,39.777802],[117.447784,39.71825],[117.642586,39.731419],[117.749008,39.762032],[117.934181,39.762768],[118.152924,39.802708],[118.234482,39.785572],[118.472549,39.86232],[118.777603,39.883152],[118.862495,39.919979],[119.38472,39.932281],[119.623131,40.001133],[119.738411,40.018814],[119.920677,40.0914],[120.025803,40.169346],[120.4347,40.398479],[120.621666,40.574875],[120.746086,40.729008],[120.845108,40.816044],[120.901794,40.842911],[121.071342,40.972298],[121.478355,41.155674],[121.776329,41.243774],[121.931908,41.234379],[122.171509,41.352737],[122.665245,41.508099],[122.625656,41.548462],[122.619499,41.603676],[122.683723,41.757511],[122.75901,41.857121],[122.884392,41.969513],[122.935059,42.06575],[123.038628,42.142239],[123.159004,42.195473],[123.368233,42.221474],[123.420975,42.214355],[123.4095,42.297878],[123.43074,42.362312],[123.417763,42.438923],[123.47319,42.576893],[123.429771,43.135292],[123.47551,43.228695],[123.481201,43.318523],[123.5495,43.409451],[123.612465,43.460827],[123.635941,43.509552],[123.648758,43.614288],[123.700905,43.672852],[123.8349,43.895943],[123.881844,43.943893],[123.918152,44.088135],[124.026482,44.203968],[124.109215,44.350628],[124.219521,44.452778],[124.261673,44.548756],[124.310677,44.600872],[124.343506,44.696415],[124.476883,44.866058],[124.58152,45.038525],[124.65921,45.084026],[124.789406,45.24741],[124.908928,45.242146],[124.922668,45.285645],[124.956177,45.319763],[125.000641,45.50639],[125.084534,45.649067],[125.062126,45.70689],[125.060165,45.831364],[124.978264,45.908375],[124.930611,46.036259],[124.916321,46.140942],[124.927277,46.200146],[124.997108,46.277462],[125.025322,46.445637],[125.117722,46.664555],[125.119446,46.735317],[125.134804,46.738541],[125.07782,46.771938],[125.026794,46.829491],[124.960701,46.854858],[124.922424,46.958427],[124.933243,46.983765],[124.899406,47.04697],[124.882462,47.155991],[124.823013,47.196754],[124.745262,47.231655],[124.459557,47.304672],[124.359001,47.35268],[124.269707,47.367775],[124.10817,47.347073],[124.061661,47.377285],[124.218864,47.539673],[124.332542,47.608788],[124.443214,47.749252],[124.495735,47.769196],[124.512497,47.886227],[124.578461,47.985855],[124.589691,48.035553],[124.637291,48.085934],[124.688599,48.197315],[124.754906,48.289471],[124.88723,48.412533],[124.907784,48.47839],[124.893539,48.531784],[124.979385,48.608315],[124.99099,48.68185],[125.030975,48.735352],[125.198235,48.889629],[125.196526,48.96579],[125.22139,49.091599],[125.296265,49.167465],[125.304329,49.195621],[125.267059,49.223743],[125.153297,49.256901],[125.077484,49.366611],[125.072701,49.411911],[125.052116,49.441051],[125.059822,49.469795],[125.041878,49.491581],[124.970284,49.544586],[124.897942,49.630913],[124.643852,49.781021],[124.610306,49.864727],[124.463646,50.06004],[124.40918,50.083752],[124.353699,50.093922],[124.304443,50.083733],[124.274353,50.098831],[124.202126,50.225304],[124.205154,50.237568],[124.237686,50.240475],[124.263046,50.277817],[124.230446,50.330536],[124.242142,50.347702],[124.23394,50.412643],[124.178665,50.420105],[124.18528,50.444767],[124.242401,50.494209],[124.256775,50.55801],[124.284454,50.594185],[124.280273,50.643421],[124.358452,50.753391],[124.314346,50.843506],[124.336143,50.86533],[124.324562,50.943245],[124.281021,50.987644],[124.216728,50.997688],[124.191101,51.046928],[124.202614,51.077187],[124.196404,51.180489],[124.217918,51.220573],[124.203918,51.259155],[124.243378,51.295921],[124.281105,51.300018],[124.301414,51.330959],[124.252602,51.449852],[124.341171,51.49593],[124.329185,51.514736],[124.33709,51.584728],[124.390709,51.628845],[124.384468,51.680656],[124.415375,51.704037],[124.502655,51.723923],[124.522827,51.745075],[124.513847,51.763542],[124.544945,51.801895],[124.549553,51.841164],[124.623779,51.899757],[124.612061,51.925362],[124.633354,51.9589],[124.623444,52.005745],[124.689034,52.037361],[124.667892,52.06559],[124.712906,52.088417],[124.684669,52.114803],[124.679466,52.151325],[124.703033,52.179646],[124.697113,52.234325],[124.72229,52.260399],[124.702789,52.304115],[124.71154,52.335228]]},type:"Feature",properties:{destinationid:"232700",id:74,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.903023,39.592388],[116.929207,39.550632],[116.926598,39.460938],[116.963531,39.372738],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.390366,38.385372],[117.387268,38.250843],[117.465019,38.126221],[117.569611,38.063507],[117.623627,37.9482],[117.754181,37.818325],[117.81707,37.729187],[118.155174,37.738686],[118.256836,37.715458],[118.474976,37.712063],[118.535492,37.690201],[118.599785,37.620762],[118.590561,37.235664],[118.552826,37.170677],[118.537659,37.052956],[118.542747,36.781158],[118.599037,36.669403],[118.59671,36.622978],[118.627708,36.552872],[118.642273,36.38055],[118.720139,36.280083],[118.71209,36.216702],[118.732697,35.963192],[118.670219,35.783215],[118.701752,35.699524],[118.629654,35.39592],[118.63768,35.351562],[118.611198,35.115269],[118.737724,34.982861],[118.74099,34.922546],[118.77903,34.886494],[119.087456,34.771862],[119.090202,34.554626],[119.11451,34.505131],[119.19426,34.441555],[119.523872,34.311337],[119.776123,34.098026],[119.877235,34.032909],[120.015442,33.868279],[120.173447,33.645325],[120.256012,33.436939],[120.361061,33.23867],[120.434151,32.820286],[120.544266,32.618408],[120.605431,32.444885],[120.653946,32.376595],[120.758469,32.309746],[120.880295,32.130669],[120.966972,32.06477],[120.998695,31.95207],[120.990257,31.848763],[121.002762,31.794098],[120.992569,31.750875],[120.937057,31.663397],[121.094162,31.56743],[121.228195,31.348867],[121.27034,31.362278],[121.320068,31.298079],[121.448349,31.291872],[121.471909,31.232391]]},type:"Feature",properties:{destinationid:"310000",id:75,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178215,36.62714],[117.46582,36.601517],[117.506554,36.578445],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.756256,36.251888],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.837563,35.848385],[117.799927,35.777317],[117.831787,35.744827],[117.973465,35.667751],[118.043037,35.597904],[118.147179,35.541126],[118.233223,35.456867],[118.260597,35.397476],[118.257408,35.257587],[118.253181,35.140373],[118.211845,34.997032],[118.212868,34.783516],[118.270775,34.542454],[118.335464,34.447525],[118.454384,34.363674],[118.645706,34.274651],[118.780724,34.165333],[118.990112,33.858299],[119.134888,33.684872],[119.284195,33.369095],[119.380554,33.242916],[119.436592,33.107227],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.765991,32.365601],[119.837593,32.365646],[119.938766,32.326565],[119.913963,32.258732],[119.853317,32.234554],[119.756767,32.156242],[119.788368,32.110592],[119.826492,32.089775],[119.872276,32.012222],[119.876526,31.88483],[119.936592,31.86327],[119.911644,31.796799],[119.946861,31.773506]]},type:"Feature",properties:{destinationid:"320400",id:76,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.903023,39.592388],[116.929207,39.550632],[116.926598,39.460938],[116.963531,39.372738],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.390366,38.385372],[117.387268,38.250843],[117.465019,38.126221],[117.569611,38.063507],[117.623627,37.9482],[117.754181,37.818325],[117.81707,37.729187],[118.155174,37.738686],[118.256836,37.715458],[118.474976,37.712063],[118.536469,37.689476],[118.600967,37.618523],[118.590561,37.235664],[118.552826,37.170677],[118.537659,37.052956],[118.542747,36.781158],[118.599037,36.669403],[118.59671,36.622978],[118.627708,36.552872],[118.642273,36.38055],[118.720139,36.280083],[118.71209,36.216702],[118.732697,35.963192],[118.670219,35.783215],[118.701752,35.699524],[118.644478,35.489536],[118.609413,35.120911],[118.737724,34.982861],[118.74099,34.922546],[118.77903,34.886494],[119.172241,34.742115],[119.199394,34.681789],[119.178894,34.599739]]},type:"Feature",properties:{destinationid:"320700",id:77,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104721,37.927025],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029449,37.097515],[117.084099,36.847092],[117.204178,36.804806],[117.212135,36.674015],[117.178871,36.626377],[117.46582,36.601517],[117.508026,36.576744],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.756256,36.251888],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.837563,35.848385],[117.799927,35.777317],[117.831787,35.744827],[117.973465,35.667751],[118.043037,35.597904],[118.147179,35.541126],[118.232353,35.458378],[118.260323,35.399681],[118.257408,35.257587],[118.253181,35.140373],[118.211845,34.997032],[118.212868,34.783516],[118.269707,34.544903],[118.335464,34.447525],[118.454384,34.363674],[118.599411,34.301987],[118.694328,34.242645],[118.819412,34.117851],[118.932846,33.93705],[119.062401,33.772396],[119.040268,33.737331],[119.021263,33.597481]]},type:"Feature",properties:{destinationid:"320800",id:78,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178284,36.626984],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.290329,34.503765],[118.331627,34.450615],[118.449745,34.366566],[118.645111,34.275013],[118.780724,34.165333],[118.990112,33.858299],[119.122391,33.704067],[119.284966,33.367641],[119.38134,33.241497],[119.436592,33.107227],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.217918,32.125652],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.51545,31.43882],[120.566429,31.357565],[120.545662,31.348751],[120.578568,31.296167],[120.619583,31.299395]]},type:"Feature",properties:{destinationid:"320500",id:79,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.903023,39.592388],[116.929207,39.550632],[116.926598,39.460938],[116.963531,39.372738],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.390366,38.385372],[117.387268,38.250843],[117.465019,38.126221],[117.569611,38.063507],[117.623627,37.9482],[117.754181,37.818325],[117.81707,37.729187],[118.155174,37.738686],[118.256836,37.715458],[118.474976,37.712063],[118.535492,37.690201],[118.599785,37.620762],[118.590561,37.235664],[118.552826,37.170677],[118.537659,37.052956],[118.542747,36.781158],[118.599037,36.669403],[118.59671,36.622978],[118.627708,36.552872],[118.642273,36.38055],[118.720139,36.280083],[118.71209,36.216702],[118.732697,35.963192],[118.670219,35.783215],[118.701752,35.699524],[118.629654,35.39592],[118.63768,35.351562],[118.610313,35.117458],[118.737724,34.982861],[118.74099,34.922546],[118.778053,34.887199],[119.087456,34.771862],[119.090202,34.554626],[119.116585,34.503315],[119.19426,34.441555],[119.519638,34.314198],[119.776123,34.098026],[119.882828,34.027306],[120.170135,33.650578],[120.221466,33.535748],[120.223442,33.51873],[120.091125,33.445278],[120.13945,33.412189],[120.150383,33.392879],[120.14003,33.377563]]},type:"Feature",properties:{destinationid:"320900",id:80,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.903023,39.592388],[116.929207,39.550632],[116.926598,39.460938],[116.963531,39.372738],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.390366,38.385372],[117.387268,38.250843],[117.465019,38.126221],[117.569611,38.063507],[117.623627,37.9482],[117.754181,37.818325],[117.81707,37.729187],[118.155174,37.738686],[118.256836,37.715458],[118.474976,37.712063],[118.535492,37.690201],[118.599785,37.620762],[118.590561,37.235664],[118.552826,37.170677],[118.537659,37.052956],[118.542747,36.781158],[118.599037,36.669403],[118.59671,36.622978],[118.627708,36.552872],[118.642273,36.38055],[118.720139,36.280083],[118.71209,36.216702],[118.732697,35.963192],[118.670219,35.783215],[118.701752,35.699524],[118.629654,35.39592],[118.63768,35.351562],[118.610672,35.116482],[118.737724,34.982861],[118.74099,34.922546],[118.778053,34.887199],[119.087456,34.771862],[119.090202,34.554626],[119.11451,34.505131],[119.19426,34.441555],[119.524925,34.310551],[119.776123,34.098026],[119.879074,34.031216],[120.085876,33.772213],[120.174469,33.643383],[120.256012,33.436939],[120.361519,33.237526],[120.434151,32.820286],[120.544266,32.618408],[120.604614,32.446453],[120.653946,32.376595],[120.76001,32.308067],[120.816612,32.209263],[120.914062,32.093697],[120.903824,32.044117],[120.878998,32.043392],[120.881126,32.021542],[120.864532,32.016434]]},type:"Feature",properties:{destinationid:"320600",id:81,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104721,37.927025],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029449,37.097515],[117.084099,36.847092],[117.204178,36.804806],[117.212135,36.674015],[117.178871,36.626377],[117.46582,36.601517],[117.508026,36.576744],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.756256,36.251888],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.837563,35.848385],[117.799927,35.777317],[117.831787,35.744827],[117.973465,35.667751],[118.043037,35.597904],[118.147179,35.541126],[118.233223,35.456867],[118.260597,35.397476],[118.257408,35.257587],[118.253181,35.140373],[118.211845,34.997032],[118.212868,34.783516],[118.269188,34.546185],[118.335464,34.447525],[118.454384,34.363674],[118.645706,34.274651],[118.783607,34.16209],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.38134,33.241497],[119.442406,33.088516],[119.495911,32.881077],[119.500664,32.791355],[119.554062,32.672855],[119.563797,32.583565],[119.594208,32.496593],[119.377274,32.447685],[119.4217,32.393208]]},type:"Feature",properties:{destinationid:"321000",id:82,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104721,37.927025],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029449,37.097515],[117.084099,36.847092],[117.204178,36.804806],[117.212135,36.674015],[117.178871,36.626377],[117.46582,36.601517],[117.508026,36.576744],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.756256,36.251888],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.837563,35.848385],[117.799927,35.777317],[117.831787,35.744827],[117.973465,35.667751],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.211739,34.995823],[118.213448,34.777237],[118.290329,34.503765],[118.330719,34.451397],[118.441948,34.369946],[118.418678,34.25724],[118.424759,34.125771],[118.41011,33.983917],[118.275146,33.962894]]},type:"Feature",properties:{destinationid:"321300",id:83,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104721,37.927025],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029449,37.097515],[117.084099,36.847092],[117.204178,36.804806],[117.212135,36.674015],[117.178604,36.626568],[117.463882,36.601776],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.289261,34.505692],[118.330719,34.451397],[118.447678,34.367996],[118.645706,34.274651],[118.783607,34.16209],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.38134,33.241497],[119.442406,33.088516],[119.495911,32.881077],[119.500664,32.791355],[119.554062,32.672855],[119.563797,32.583565],[119.593994,32.500301],[119.512367,32.468735],[119.412064,32.46199],[119.366905,32.439442],[119.347313,32.411163],[119.376442,32.186413],[119.400673,32.205536],[119.452629,32.204937]]},type:"Feature",properties:{destinationid:"321100",id:84,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178284,36.626984],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.290329,34.503765],[118.331627,34.450615],[118.449745,34.366566],[118.645111,34.275013],[118.780724,34.165333],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.38134,33.241497],[119.436592,33.107227],[119.495911,32.881077],[119.500664,32.791355],[119.554062,32.672855],[119.592773,32.488647],[119.706581,32.52737],[119.865379,32.551254],[119.872452,32.486237],[119.91552,32.48489]]},type:"Feature",properties:{destinationid:"321200",id:85,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178284,36.626984],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.289261,34.505692],[118.330719,34.451397],[118.447678,34.367996],[118.645706,34.274651],[118.780724,34.165333],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.38134,33.241497],[119.436592,33.107227],[119.495911,32.881077],[119.501442,32.788399],[119.553055,32.675819],[119.564774,32.57972],[119.627861,32.418159],[119.701302,32.404499],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.219826,32.123123],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.513176,31.44175],[120.557487,31.360451],[120.649742,31.343801],[120.687561,31.122131],[120.672241,30.961033],[120.687035,30.900049],[120.666313,30.817591],[120.675575,30.753368],[120.750877,30.762651]]},type:"Feature",properties:{destinationid:"330400",id:86,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104721,37.927025],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029449,37.097515],[117.084099,36.847092],[117.204178,36.804806],[117.212135,36.674015],[117.178604,36.626568],[117.463882,36.601776],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.289261,34.505692],[118.330719,34.451397],[118.447678,34.367996],[118.645706,34.274651],[118.783607,34.16209],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.3825,33.239166],[119.442406,33.088516],[119.495911,32.881077],[119.500664,32.791355],[119.554062,32.672855],[119.563797,32.583565],[119.594208,32.496593],[119.512367,32.468735],[119.412064,32.46199],[119.364868,32.437706],[119.343811,32.401325],[119.364365,32.338432],[119.363266,32.217613],[119.411545,32.13578],[119.394272,31.882622],[119.427879,31.707651],[119.400749,31.506084],[119.381737,31.459723],[119.469398,31.38586],[119.726814,31.348406],[119.840401,31.308073],[119.871727,31.279722],[119.939529,31.14167],[119.959068,30.964252],[120.024864,30.904518],[120.068581,30.812832],[120.081558,30.737173],[120.05278,30.672527],[120.068306,30.627773],[120.021271,30.538975],[120.021881,30.501516],[120.103798,30.436794],[120.15358,30.287439]]},type:"Feature",properties:{destinationid:"330100",id:87,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104721,37.927025],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029449,37.097515],[117.084099,36.847092],[117.204178,36.804806],[117.212135,36.674015],[117.178604,36.626568],[117.463882,36.601776],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.289261,34.505692],[118.330719,34.451397],[118.447678,34.367996],[118.645706,34.274651],[118.783607,34.16209],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.381691,33.240807],[119.442406,33.088516],[119.495911,32.881077],[119.500664,32.791355],[119.554062,32.672855],[119.563797,32.583565],[119.594208,32.496593],[119.512367,32.468735],[119.412064,32.46199],[119.364868,32.437706],[119.343811,32.401325],[119.364365,32.338432],[119.363266,32.217613],[119.411545,32.13578],[119.394272,31.882622],[119.427879,31.707651],[119.400749,31.506084],[119.381737,31.459723],[119.470703,31.385405],[119.691483,31.357395],[119.854156,31.299345],[119.939529,31.14167],[119.960281,30.961716],[120.027428,30.897377],[120.102379,30.866919]]},type:"Feature",properties:{destinationid:"330500",id:88,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.903023,39.592388],[116.929207,39.550632],[116.926598,39.460938],[116.963531,39.372738],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.390366,38.385372],[117.387268,38.250843],[117.465019,38.126221],[117.569611,38.063507],[117.623627,37.9482],[117.754181,37.818325],[117.81707,37.729187],[118.155174,37.738686],[118.256836,37.715458],[118.474976,37.712063],[118.536469,37.689476],[118.600967,37.618523],[118.590561,37.235664],[118.552826,37.170677],[118.537659,37.052956],[118.542747,36.781158],[118.599037,36.669403],[118.59671,36.622978],[118.627708,36.552872],[118.642273,36.38055],[118.720139,36.280083],[118.71209,36.216702],[118.732697,35.963192],[118.670219,35.783215],[118.701752,35.699524],[118.629654,35.39592],[118.63768,35.351562],[118.610672,35.116482],[118.737724,34.982861],[118.74099,34.922546],[118.778053,34.887199],[119.087456,34.771862],[119.090202,34.554626],[119.113945,34.505657],[119.19426,34.441555],[119.519638,34.314198],[119.776123,34.098026],[119.874306,34.035347],[120.013504,33.870846],[120.173447,33.645325],[120.256012,33.436939],[120.362152,33.235825],[120.433701,32.821751],[120.544266,32.618408],[120.604614,32.446453],[120.653946,32.376595],[120.76001,32.308067],[120.880295,32.130669],[120.962723,32.072334],[120.990204,32.007481],[121.002197,31.789297],[120.936836,31.663837],[121.094162,31.56743],[121.227509,31.351393],[121.160637,31.325956],[121.142937,31.302319],[121.145546,31.17098],[121.124176,31.073984],[121.1576,31.013866],[121.113556,30.988789],[121.078018,30.924271],[120.914696,30.767612],[120.973145,30.708776],[121.008949,30.618647],[121.161812,30.420782],[121.19622,30.294167],[121.350998,30.26598],[121.421257,30.222979],[121.449066,30.147449],[121.423454,29.967091],[121.511749,29.923029],[121.511642,29.881229],[121.54995,29.868378]]},type:"Feature",properties:{destinationid:"330200",id:89,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178337,36.626877],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.291061,34.50251],[118.331627,34.450615],[118.450768,34.365883],[118.599411,34.301987],[118.694328,34.242645],[118.820717,34.116165],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.3825,33.239166],[119.442406,33.088516],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.217918,32.125652],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.513176,31.44175],[120.557487,31.360451],[120.649742,31.343801],[120.687592,31.121193],[120.672241,30.961033],[120.687035,30.900049],[120.66713,30.807131],[120.682869,30.749254],[120.756844,30.681263],[120.752899,30.536175],[120.795105,30.414188],[120.774231,30.202673],[120.788811,30.043737],[120.726158,29.969217],[120.520622,29.910902],[120.427452,29.774036],[120.360207,29.744049],[120.299156,29.744526],[120.309807,29.713537],[120.284882,29.677076],[120.333893,29.577925],[120.340584,29.520235],[120.377884,29.467127],[120.361122,29.404362],[120.386024,29.376898],[120.40699,29.307079],[120.365067,29.082205],[120.432388,28.949696],[120.509003,28.861719],[120.540314,28.78418],[120.605339,28.766312],[120.668358,28.706772],[120.680969,28.502258],[120.718987,28.463537],[120.723083,28.410643],[120.772163,28.31743],[120.785316,28.233515],[120.775932,28.181648],[120.728638,28.14336],[120.702415,28.088789],[120.71154,28.064568],[120.672104,28.000834]]},type:"Feature",properties:{destinationid:"330300",id:90,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178337,36.626877],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.291061,34.50251],[118.331627,34.450615],[118.450768,34.365883],[118.599411,34.301987],[118.694328,34.242645],[118.820717,34.116165],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.3825,33.239166],[119.442406,33.088516],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.217918,32.125652],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.513176,31.44175],[120.557487,31.360451],[120.649742,31.343801],[120.687592,31.121193],[120.672241,30.961033],[120.687035,30.900049],[120.66713,30.807131],[120.682869,30.749254],[120.756844,30.681263],[120.752899,30.536175],[120.795105,30.414188],[120.774231,30.202673],[120.784836,30.091867],[120.781029,30.067886],[120.732101,30.070429],[120.614204,30.110693],[120.581779,29.997131]]},type:"Feature",properties:{destinationid:"330600",id:91,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.37986,37.391129],[116.406258,37.324474],[116.662834,37.018013],[116.774345,36.828243],[116.85498,36.742443],[116.888008,36.62421],[116.850861,36.555187],[116.845566,36.510761],[116.889061,36.451977],[116.907753,36.333305],[116.978821,36.260056],[117.000549,36.197651],[117.096275,36.065155],[117.103172,35.990879],[117.078415,35.946224],[117.05687,35.788197],[117.042397,35.482021],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425568,34.543339],[117.414886,34.511383],[117.356033,34.451172],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.908363,33.913609],[116.901024,33.878616],[116.939758,33.767334],[116.931824,33.659454],[116.959595,33.549152],[116.944038,33.45533],[116.951813,33.412464],[117.03643,33.303082],[117.116425,33.155556],[117.209457,33.088829],[117.248291,33.013023],[117.251602,32.973248],[117.34877,32.962139],[117.362961,32.939617]]},type:"Feature",properties:{destinationid:"340300",id:92,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.909164,33.914562],[116.900932,33.882915],[116.939758,33.767334],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.280266,32.878357],[117.30233,32.816242],[117.290916,32.729851],[117.195656,32.64867],[117.147591,32.62698],[117.057259,32.501762],[117.099625,32.463821],[117.136063,32.358749],[117.104744,32.166348],[117.117722,31.904449],[117.139519,31.84963],[117.283081,31.860661]]},type:"Feature",properties:{destinationid:"340100",id:93,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.005562,34.004436],[116.902863,33.902103],[116.940056,33.764477],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.280266,32.878357],[117.302612,32.814365],[117.290916,32.729851],[117.138863,32.61145],[117.02507,32.63203],[117.018501,32.647106]]},type:"Feature",properties:{destinationid:"340400",id:94,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380569,37.386776],[116.406258,37.324474],[116.662834,37.018013],[116.774345,36.828243],[116.85498,36.742443],[116.888008,36.62421],[116.850861,36.555187],[116.845566,36.510761],[116.889061,36.451977],[116.907753,36.333305],[116.978821,36.260056],[117.000549,36.197651],[117.095413,36.068401],[117.103203,35.991211],[117.07106,35.911625],[117.042397,35.482021],[117.112473,35.234234],[117.204788,35.109676],[117.221092,34.957649],[117.254532,34.864166],[117.289024,34.815517],[117.313576,34.724812],[117.397591,34.644119],[117.420921,34.590401],[117.42054,34.520813],[117.357269,34.453125],[117.302284,34.339241],[117.298836,34.298683],[117.341911,34.188705],[117.447395,34.111877],[117.644714,34.06311],[117.636696,33.988823],[117.656105,33.927132],[117.655457,33.833645],[117.738411,33.50771],[117.735527,33.468578],[117.874817,33.210907],[117.878181,33.173641],[117.852325,33.094627],[117.887047,33.030941],[117.939247,32.984753],[117.947273,32.910843],[117.927696,32.844841],[118.035713,32.791183],[118.162407,32.670547],[118.312523,32.454449],[118.432198,32.353603],[118.429482,32.271152],[118.380478,32.20504],[118.342995,32.104385],[118.353264,32.015366],[118.330734,31.958252],[118.347778,31.869522],[118.292183,31.738844],[118.273834,31.645752],[118.327042,31.616266],[118.536125,31.61496],[118.543205,31.597782],[118.524597,31.472153],[118.493553,31.423702],[118.473488,31.346249],[118.392044,31.368633],[118.375748,31.32642]]},type:"Feature",properties:{destinationid:"340200",id:95,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178337,36.626877],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.291061,34.50251],[118.331627,34.450615],[118.450768,34.365883],[118.599411,34.301987],[118.694328,34.242645],[118.820717,34.116165],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.3825,33.239166],[119.442406,33.088516],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.217918,32.125652],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.513176,31.44175],[120.557487,31.360451],[120.649742,31.343801],[120.687592,31.121193],[120.672241,30.961033],[120.687035,30.900049],[120.66713,30.807131],[120.681847,30.750694],[120.756752,30.67902],[120.74511,30.65592],[120.672287,30.618],[120.60688,30.551006],[120.530067,30.524231],[120.397659,30.438702],[120.399597,30.389795],[120.356674,30.284006],[120.361923,30.213182],[120.267059,30.050711],[120.262939,29.995155],[120.208763,29.907604],[120.222359,29.819853],[120.192139,29.77195],[120.167557,29.64286],[120.128036,29.599964],[120.082985,29.50128],[120.050896,29.484867],[120.033043,29.453388],[120.024628,29.426626],[120.039803,29.401237],[120.024445,29.365889],[119.898491,29.251726],[119.65654,29.143593],[119.649467,29.089222]]},type:"Feature",properties:{destinationid:"330700",id:96,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.909164,33.914562],[116.901016,33.884235],[116.939758,33.767334],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.280266,32.878357],[117.302612,32.814365],[117.290916,32.729851],[117.195656,32.64867],[117.147591,32.62698],[117.057259,32.501762],[117.099625,32.463821],[117.136063,32.358749],[117.104744,32.166348],[117.117218,31.905985],[117.16407,31.823009],[117.280617,31.782196],[117.271614,31.729267],[117.183495,31.585756],[117.198074,31.512991],[117.187607,31.341831],[117.197556,31.265179],[117.255424,31.143393],[117.355957,31.001726],[117.427132,30.969675],[117.459877,30.927076],[117.553215,30.882565],[117.745804,30.851048],[117.81913,30.764322],[117.947708,30.569468],[117.896988,30.421661],[117.914177,30.342777],[118.062454,30.3048],[118.145737,30.304596],[118.259819,30.228155],[118.269325,30.174986],[118.250839,30.113684],[118.207916,30.070456],[118.222679,30.008215],[118.286652,29.931622],[118.224655,29.749676],[118.242081,29.660456],[118.218513,29.622814],[118.229881,29.588442],[118.218178,29.568903],[118.275261,29.516975],[118.278488,29.472818],[118.311813,29.424545],[118.296967,29.359463],[118.317139,29.329317],[118.402145,29.287088],[118.429321,29.150965],[118.474266,29.088921],[118.560463,29.068724],[118.630043,28.9848],[118.692566,28.944639],[118.833763,28.984371],[118.843964,28.937832],[118.87262,28.941708]]},type:"Feature",properties:{destinationid:"330800",id:97,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.903023,39.592388],[116.929207,39.550632],[116.926598,39.460938],[116.963531,39.372738],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.390366,38.385372],[117.387268,38.250843],[117.465019,38.126221],[117.569611,38.063507],[117.623627,37.9482],[117.754181,37.818325],[117.81707,37.729187],[118.155174,37.738686],[118.256836,37.715458],[118.474976,37.712063],[118.535492,37.690201],[118.599785,37.620762],[118.590561,37.235664],[118.552826,37.170677],[118.537659,37.052956],[118.542747,36.781158],[118.599037,36.669403],[118.59671,36.622978],[118.627708,36.552872],[118.642273,36.38055],[118.720139,36.280083],[118.71209,36.216702],[118.732697,35.963192],[118.670219,35.783215],[118.701752,35.699524],[118.629654,35.39592],[118.63768,35.351562],[118.611198,35.115269],[118.737724,34.982861],[118.74099,34.922546],[118.77903,34.886494],[119.087456,34.771862],[119.090202,34.554626],[119.113945,34.505657],[119.19426,34.441555],[119.519638,34.314198],[119.776123,34.098026],[119.874306,34.035347],[120.013504,33.870846],[120.173447,33.645325],[120.256012,33.436939],[120.362152,33.235825],[120.433701,32.821751],[120.544266,32.618408],[120.604614,32.446453],[120.653946,32.376595],[120.76001,32.308067],[120.880295,32.130669],[120.962723,32.072334],[120.990204,32.007481],[121.002197,31.789297],[120.936836,31.663837],[121.094162,31.56743],[121.227509,31.351393],[121.160637,31.325956],[121.142937,31.302319],[121.145546,31.17098],[121.124176,31.073984],[121.1576,31.013866],[121.113556,30.988789],[121.078018,30.924271],[120.914566,30.768412],[120.973145,30.708776],[121.008949,30.618647],[121.161812,30.420782],[121.194283,30.296644],[121.351982,30.265665],[121.421257,30.222979],[121.449066,30.147449],[121.421715,29.974489],[121.447838,29.944357],[121.575539,29.991516],[121.62384,29.989918],[121.644638,29.971857],[121.679581,30.008293],[121.779793,30.05562],[121.908035,30.050646],[121.95723,30.09938],[122.030403,30.022909],[122.07885,30.030087],[122.106903,30.015682]]},type:"Feature",properties:{destinationid:"330900",id:98,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178284,36.626984],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.291061,34.50251],[118.331627,34.450615],[118.450768,34.365883],[118.599411,34.301987],[118.694328,34.242645],[118.820717,34.116165],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.3825,33.239166],[119.442406,33.088516],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.217918,32.125652],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.513176,31.44175],[120.557487,31.360451],[120.649742,31.343801],[120.687592,31.121193],[120.672241,30.961033],[120.687035,30.900049],[120.666901,30.808628],[120.681847,30.750694],[120.756958,30.680794],[120.752899,30.536175],[120.795303,30.411346],[120.774231,30.202673],[120.785751,30.029484],[120.850464,29.957973],[120.829758,29.89267],[120.845802,29.861549],[120.848389,29.730227],[120.82235,29.674982],[120.841438,29.587109],[120.832542,29.536972],[120.90947,29.471912],[120.880676,29.388784],[120.876045,29.297308],[121.011787,29.15531],[121.066101,29.146406],[121.089394,29.119318],[121.229485,29.045521],[121.221161,28.959873],[121.236259,28.739408],[121.409828,28.741545],[121.397606,28.673069],[121.427238,28.660973]]},type:"Feature",properties:{destinationid:"331000",id:99,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425621,34.552319],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.336693,34.193958],[117.175606,34.14397],[117.110382,34.144115],[116.948692,34.098976],[116.862396,34.092674],[116.824059,34.044395],[116.811836,33.974758],[116.793304,33.971657]]},type:"Feature",properties:{destinationid:"340600",id:100,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178337,36.626877],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.291061,34.50251],[118.331627,34.450615],[118.450768,34.365883],[118.599411,34.301987],[118.694328,34.242645],[118.820717,34.116165],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.3825,33.239166],[119.442406,33.088516],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.217918,32.125652],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.513176,31.44175],[120.557487,31.360451],[120.649742,31.343801],[120.687592,31.121193],[120.672241,30.961033],[120.687035,30.900049],[120.66713,30.807131],[120.682869,30.749254],[120.756844,30.681263],[120.752899,30.536175],[120.795105,30.414188],[120.774231,30.202673],[120.788811,30.043737],[120.726158,29.969217],[120.520622,29.910902],[120.426376,29.773315],[120.360207,29.744049],[120.298882,29.744198],[120.310181,29.715355],[120.285812,29.668911],[120.333641,29.578629],[120.340584,29.520235],[120.377884,29.467127],[120.361122,29.404362],[120.386024,29.376898],[120.407066,29.306458],[120.374542,29.110609],[120.321144,29.052769],[120.204575,28.991388],[120.063332,28.816334],[120.092865,28.793398],[120.087936,28.767067],[120.023811,28.702158],[119.885315,28.631248],[119.85894,28.560863],[119.863281,28.45355],[119.874535,28.4377],[119.921776,28.452036]]},type:"Feature",properties:{destinationid:"331100",id:101,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.38105,37.384846],[116.406258,37.324474],[116.662834,37.018013],[116.774345,36.828243],[116.85498,36.742443],[116.888008,36.62421],[116.850861,36.555187],[116.845566,36.510761],[116.889061,36.451977],[116.907753,36.333305],[116.978821,36.260056],[117.000549,36.197651],[117.095413,36.068401],[117.103203,35.991211],[117.07106,35.911625],[117.042397,35.482021],[117.112473,35.234234],[117.204788,35.109676],[117.221092,34.957649],[117.254532,34.864166],[117.289024,34.815517],[117.313576,34.724812],[117.397591,34.644119],[117.420921,34.590401],[117.42054,34.520813],[117.357269,34.453125],[117.302284,34.339241],[117.298836,34.298683],[117.341911,34.188705],[117.447395,34.111877],[117.644714,34.06311],[117.636696,33.988823],[117.656105,33.927132],[117.655457,33.833645],[117.738411,33.50771],[117.735527,33.468578],[117.874817,33.210907],[117.878181,33.173641],[117.852325,33.094627],[117.887047,33.030941],[117.939247,32.984753],[117.947273,32.910843],[117.927696,32.844841],[118.035713,32.791183],[118.162407,32.670547],[118.312523,32.454449],[118.431976,32.354126],[118.429482,32.271152],[118.381111,32.206242],[118.348083,32.120174],[118.487083,32.044533],[118.573509,32.032257],[118.599823,31.989836],[118.683899,31.936193],[118.651123,31.875086],[118.54245,31.763838],[118.532745,31.701454],[118.507652,31.689322]]},type:"Feature",properties:{destinationid:"340500",id:102,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.909164,33.914562],[116.901016,33.884235],[116.939758,33.767334],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.280266,32.878357],[117.302612,32.814365],[117.290916,32.729851],[117.195656,32.64867],[117.147591,32.62698],[117.057259,32.501762],[117.099625,32.463821],[117.136063,32.358749],[117.104744,32.166348],[117.117218,31.905985],[117.16407,31.823009],[117.280617,31.782196],[117.271614,31.729267],[117.183495,31.585756],[117.198074,31.512991],[117.187607,31.341831],[117.197533,31.265318],[117.254761,31.144501],[117.349785,31.008081],[117.427132,30.969675],[117.460861,30.926512],[117.557281,30.881197],[117.752762,30.84362],[117.816704,30.930065]]},type:"Feature",properties:{destinationid:"340700",id:103,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.38105,37.384846],[116.406258,37.324474],[116.662834,37.018013],[116.774345,36.828243],[116.85498,36.742443],[116.888008,36.62421],[116.850861,36.555187],[116.845566,36.510761],[116.889061,36.451977],[116.907753,36.333305],[116.978821,36.260056],[117.000549,36.197651],[117.095413,36.068401],[117.103203,35.991211],[117.07106,35.911625],[117.042397,35.482021],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357681,34.453743],[117.306259,34.35112],[117.30027,34.29409],[117.346832,34.180141],[117.420265,34.125675],[117.644859,34.062847],[117.636696,33.988823],[117.656105,33.927132],[117.655457,33.833645],[117.738411,33.50771],[117.735527,33.468578],[117.874817,33.210907],[117.878181,33.173641],[117.852325,33.094627],[117.887047,33.030941],[117.939247,32.984753],[117.947273,32.910843],[117.927582,32.8451],[118.035713,32.791183],[118.163857,32.669128],[118.310768,32.456558],[118.386475,32.389088],[118.346306,32.341167],[118.329117,32.347073],[118.315964,32.303524]]},type:"Feature",properties:{destinationid:"341100",id:104,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.005562,34.004436],[116.961563,33.948071],[116.904732,33.907742],[116.902061,33.871826],[116.939758,33.767334],[116.936234,33.700817],[116.977829,33.709015],[116.98407,33.633739]]},type:"Feature",properties:{destinationid:"341300",id:105,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.076515,38.792721],[115.97168,38.641132],[115.869858,38.576908],[115.780495,38.477348],[115.700981,38.34713],[115.639488,38.136738],[115.695221,38.021114],[115.705475,37.789272],[115.860374,37.68935],[115.977867,37.637787],[116.035866,37.628925],[116.110077,37.583458],[116.036774,37.4729],[116.043022,37.391441],[116.011642,37.235512],[116.006828,37.123661],[115.913536,36.927197],[115.878952,36.67247],[115.833908,36.602581],[115.838593,36.548855],[115.870628,36.472004],[115.874527,36.392941],[115.81147,36.316483],[115.765671,36.287838],[115.720512,36.207951],[115.674522,36.164135],[115.617859,36.021999],[115.60585,35.916496],[115.565224,35.832687],[115.573761,35.768181],[115.552925,35.682701],[115.624397,35.491688],[115.64225,35.35862],[115.667595,35.308846],[115.671394,35.181553],[115.640587,34.956097],[115.659073,34.827137],[115.653687,34.645485],[115.733429,34.469688],[115.746277,34.401184],[115.791985,34.322773],[115.818161,34.138493],[115.812714,34.049507],[115.861069,33.898228],[115.847252,33.659195],[115.891457,33.304146],[115.891541,33.098293],[115.908607,32.967064],[115.819931,32.896946]]},type:"Feature",properties:{destinationid:"341200",id:106,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.076515,38.792721],[115.97168,38.641132],[115.869858,38.576908],[115.780495,38.477348],[115.700981,38.34713],[115.63974,38.139515],[115.695221,38.021114],[115.705475,37.789272],[115.860374,37.68935],[115.977867,37.637787],[116.035866,37.628925],[116.110077,37.583458],[116.036774,37.4729],[116.043022,37.391441],[116.011642,37.235512],[116.006828,37.123661],[115.913536,36.927197],[115.878952,36.67247],[115.833908,36.602581],[115.838593,36.548855],[115.870628,36.472004],[115.874527,36.392941],[115.81147,36.316483],[115.765671,36.287838],[115.720512,36.207951],[115.675697,36.166588],[115.617859,36.021999],[115.60585,35.916496],[115.564148,35.826275],[115.573761,35.768181],[115.553307,35.675812],[115.624397,35.491688],[115.64225,35.35862],[115.667664,35.308083],[115.671394,35.181553],[115.640587,34.956097],[115.659073,34.827137],[115.653687,34.645485],[115.733429,34.469688],[115.746277,34.401184],[115.792427,34.321167],[115.818161,34.138493],[115.812447,34.051357],[115.845192,33.937363],[115.760818,33.926903],[115.755623,33.871494],[115.782791,33.869328]]},type:"Feature",properties:{destinationid:"341600",id:107,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.909164,33.914562],[116.901016,33.884235],[116.939758,33.767334],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.280266,32.878357],[117.302612,32.814365],[117.290916,32.729851],[117.195656,32.64867],[117.147591,32.62698],[117.057259,32.501762],[117.099625,32.463821],[117.136063,32.358749],[117.104744,32.166348],[117.117218,31.905985],[117.16407,31.823009],[117.280617,31.782196],[117.271614,31.729267],[117.183495,31.585756],[117.198074,31.512991],[117.187607,31.341831],[117.197556,31.265179],[117.255424,31.143393],[117.355957,31.001726],[117.427132,30.969675],[117.459877,30.927076],[117.553215,30.882565],[117.745804,30.851048],[117.81913,30.764322],[117.947708,30.569468],[117.896988,30.421661],[117.914177,30.342777],[118.062454,30.3048],[118.145737,30.304596],[118.259819,30.228155],[118.269325,30.174986],[118.250839,30.113684],[118.207916,30.070456],[118.222679,30.008215],[118.286682,29.932154],[118.234322,29.772726],[118.317093,29.709635]]},type:"Feature",properties:{destinationid:"341000",id:108,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645134,38.180981],[115.641708,38.117493],[115.695221,38.021114],[115.705475,37.789272],[115.860374,37.68935],[115.977867,37.637787],[116.035866,37.628925],[116.110077,37.583458],[116.036774,37.4729],[116.043022,37.391441],[116.011642,37.235512],[116.006828,37.123661],[115.913536,36.927197],[115.878952,36.67247],[115.833908,36.602581],[115.838593,36.548855],[115.870628,36.472004],[115.874527,36.392941],[115.81147,36.316483],[115.765671,36.287838],[115.720512,36.207951],[115.674522,36.164135],[115.617859,36.021999],[115.60585,35.916496],[115.565224,35.832687],[115.573761,35.768181],[115.552864,35.681057],[115.624397,35.491688],[115.64225,35.35862],[115.667595,35.308846],[115.671394,35.181553],[115.640587,34.956097],[115.659073,34.827137],[115.653687,34.645485],[115.733429,34.469688],[115.746277,34.401184],[115.791985,34.322773],[115.818161,34.138493],[115.812714,34.049507],[115.861008,33.898811],[115.847252,33.659195],[115.891571,33.302773],[115.900505,33.002125],[115.988037,32.629707],[115.943352,32.450706],[115.949677,32.373055],[115.98774,32.28072],[116.111618,32.08139],[116.39222,31.780468],[116.410576,31.731339],[116.492645,31.714878],[116.517563,31.725729],[116.507637,31.752878]]},type:"Feature",properties:{destinationid:"341500",id:109,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425621,34.552319],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.909164,33.914562],[116.901184,33.886276],[116.940056,33.764477],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.28096,32.877068],[117.302666,32.813671],[117.290916,32.729851],[117.195656,32.64867],[117.147591,32.62698],[117.057281,32.502029],[117.099625,32.463821],[117.136063,32.358749],[117.104744,32.166348],[117.116837,31.907244],[117.16082,31.825668],[117.225677,31.791616],[117.27626,31.792912],[117.28093,31.761986],[117.183495,31.585756],[117.198074,31.512991],[117.187607,31.341831],[117.198677,31.263834],[117.06987,31.141863],[116.976448,30.992432],[116.883057,30.7878],[116.912613,30.776844],[117.010468,30.641735],[117.001923,30.60029],[117.043861,30.508724]]},type:"Feature",properties:{destinationid:"340800",id:110,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.908363,33.913609],[116.900932,33.880432],[116.939758,33.767334],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.280266,32.878357],[117.302612,32.814365],[117.290916,32.729851],[117.195656,32.64867],[117.147591,32.62698],[117.057259,32.501762],[117.099625,32.463821],[117.136063,32.358749],[117.104744,32.166348],[117.117218,31.905985],[117.16407,31.823009],[117.280617,31.782196],[117.271614,31.729267],[117.183495,31.585756],[117.198074,31.512991],[117.187607,31.341831],[117.197624,31.264931],[117.255424,31.143393],[117.357254,31.000706],[117.550903,30.883537],[117.742142,30.852491],[117.776955,30.817022],[117.699829,30.698933],[117.516777,30.610992],[117.489014,30.656019]]},type:"Feature",properties:{destinationid:"341700",id:111,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.38105,37.384846],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.221092,34.957649],[117.254532,34.864166],[117.289024,34.815517],[117.313576,34.724812],[117.397591,34.644119],[117.420586,34.592834],[117.421661,34.523407],[117.354553,34.448608],[117.304024,34.345757],[117.299629,34.295963],[117.346832,34.180141],[117.420265,34.125675],[117.644997,34.06255],[117.636696,33.988823],[117.656105,33.927132],[117.655457,33.833645],[117.738411,33.50771],[117.735527,33.468578],[117.874817,33.210907],[117.878181,33.173641],[117.852325,33.094627],[117.887047,33.030941],[117.939247,32.984753],[117.947273,32.910843],[117.927879,32.844509],[118.035713,32.791183],[118.162407,32.670547],[118.312523,32.454449],[118.432091,32.353882],[118.429482,32.271152],[118.380478,32.20504],[118.342995,32.104385],[118.353264,32.015366],[118.330734,31.958252],[118.347778,31.869522],[118.292183,31.738844],[118.273926,31.645304],[118.332268,31.615473],[118.539703,31.612686],[118.524727,31.472647],[118.468773,31.339882],[118.592995,31.213717],[118.609467,31.123724],[118.694641,30.931372],[118.757591,30.94562]]},type:"Feature",properties:{destinationid:"341800",id:112,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.70256,37.794323],[115.799278,37.724159],[115.802887,37.7062],[115.781403,37.653046],[115.631683,37.480488],[115.481812,37.152451],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136719,36.089344],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.629204,35.230801],[114.605591,35.188057],[114.583748,35.075737],[114.518303,34.93639],[114.491821,34.679333],[114.519287,34.471203],[114.551636,34.37315],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.604103,33.944477],[114.656815,33.784679],[114.773384,33.631229],[114.819305,33.48027],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.886879,31.443611],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.886505,30.873507],[114.880615,30.743202],[114.940857,30.63122],[115.033348,30.540159],[115.069588,30.457747],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.763412,30.026253],[115.915405,30.026793],[115.964523,29.906767],[115.981598,29.808434],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.874176,29.482477],[115.771446,29.403177],[115.750816,29.319881],[115.776566,29.052076],[115.802696,29.015192],[115.823494,28.920338],[115.871887,28.835733],[116.030655,28.802378],[116.064301,28.756741],[116.089317,28.686325],[116.071487,28.609695],[116.082062,28.430811],[116.178696,28.31638],[116.188072,28.263325],[116.237175,28.206129],[116.277786,28.054449],[116.358421,27.899254],[116.504829,27.760759],[116.601814,27.634226],[116.612335,27.535761],[116.651443,27.509071],[116.632637,27.442095],[116.638885,27.4056],[116.767387,27.372778],[116.783348,27.344658],[116.894928,27.267855],[117.068436,27.245872],[117.170082,27.15741],[117.254326,27.121904],[117.291023,27.07659],[117.27549,26.961466],[117.424522,26.891653],[117.431503,26.858],[117.526749,26.762695],[117.513718,26.701488],[117.641602,26.640118],[117.651505,26.609732],[117.723801,26.59551],[117.772949,26.560238],[117.761803,26.51001],[117.810402,26.429813],[117.774216,26.407843],[117.718231,26.334955],[117.663895,26.326813],[117.634972,26.265295]]},type:"Feature",properties:{destinationid:"350400",id:113,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178284,36.626984],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.291061,34.50251],[118.331627,34.450615],[118.450768,34.365883],[118.599411,34.301987],[118.694328,34.242645],[118.820717,34.116165],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.3825,33.239166],[119.442406,33.088516],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.217918,32.125652],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.513176,31.44175],[120.557487,31.360451],[120.649742,31.343801],[120.687592,31.121193],[120.672241,30.961033],[120.687035,30.900049],[120.666901,30.808628],[120.681847,30.750694],[120.756958,30.680794],[120.752899,30.536175],[120.795303,30.411346],[120.774231,30.202673],[120.785751,30.029484],[120.850464,29.957973],[120.829758,29.89267],[120.845802,29.861549],[120.848389,29.730227],[120.82235,29.674982],[120.841438,29.587109],[120.832542,29.536972],[120.90947,29.471912],[120.880676,29.388784],[120.876045,29.297308],[121.011787,29.15531],[121.066101,29.146406],[121.089394,29.119318],[121.230286,29.043737],[121.221161,28.959873],[121.251411,28.522818],[121.244659,28.446926],[121.224815,28.405304],[121.151306,28.364489],[121.083366,28.187191],[120.990044,28.091936],[120.792091,28.017349],[120.756645,27.96678],[120.670746,27.906958],[120.660393,27.82999],[120.558945,27.720232],[120.543709,27.658751],[120.494019,27.588619],[120.387283,27.515997],[120.363541,27.476011],[120.322189,27.446489],[120.293152,27.450325],[120.259163,27.429453],[120.221901,27.342886],[120.221268,27.282541],[120.266068,27.203129],[120.243706,27.170191],[120.250221,27.07276],[120.195526,26.963402],[120.108459,26.928885],[120.074028,26.888351],[120.048355,26.893934],[119.81562,26.833672],[119.727386,26.836248],[119.599899,26.78665],[119.577095,26.717287],[119.553215,26.69256],[119.548042,26.650009],[119.557289,26.61587],[119.603058,26.570442],[119.57618,26.554054],[119.552658,26.50148],[119.500526,26.469366],[119.484268,26.395861],[119.487206,26.357626],[119.54763,26.251041],[119.559456,26.16577],[119.466774,26.002546],[119.488846,25.973625],[119.406616,25.939045],[119.368439,25.878338],[119.312668,25.841984],[119.29789,25.76215],[119.307129,25.682171],[119.279449,25.621271],[119.287994,25.585928],[119.236961,25.490391],[119.107964,25.425491],[119.073799,25.379494],[119.008148,25.431137]]},type:"Feature",properties:{destinationid:"350300",id:114,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178284,36.626984],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.291061,34.50251],[118.331627,34.450615],[118.450768,34.365883],[118.599411,34.301987],[118.694328,34.242645],[118.820717,34.116165],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.3825,33.239166],[119.442406,33.088516],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.217918,32.125652],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.513176,31.44175],[120.557487,31.360451],[120.649742,31.343801],[120.687592,31.121193],[120.672241,30.961033],[120.687035,30.900049],[120.666901,30.808628],[120.681847,30.750694],[120.756958,30.680794],[120.752899,30.536175],[120.795303,30.411346],[120.774231,30.202673],[120.785751,30.029484],[120.850464,29.957973],[120.829758,29.89267],[120.845802,29.861549],[120.848389,29.730227],[120.82235,29.674982],[120.841438,29.587109],[120.832542,29.536972],[120.90947,29.471912],[120.880676,29.388784],[120.876045,29.297308],[121.011787,29.15531],[121.066101,29.146406],[121.089394,29.119318],[121.230186,29.044241],[121.221161,28.959873],[121.251411,28.522818],[121.244659,28.446926],[121.224815,28.405304],[121.151306,28.364489],[121.083366,28.187191],[120.990044,28.091936],[120.792091,28.017349],[120.756645,27.96678],[120.670746,27.906958],[120.660393,27.82999],[120.558945,27.720232],[120.543709,27.658751],[120.494019,27.588619],[120.387283,27.515997],[120.363541,27.476011],[120.322189,27.446489],[120.293152,27.450325],[120.259163,27.429453],[120.221901,27.342886],[120.221268,27.282541],[120.266068,27.203129],[120.243706,27.170191],[120.250221,27.07276],[120.195526,26.963402],[120.108459,26.928885],[120.074028,26.888351],[120.048355,26.893934],[119.81562,26.833672],[119.727386,26.836248],[119.600441,26.787354],[119.577095,26.717287],[119.553215,26.69256],[119.548042,26.650009],[119.557289,26.61587],[119.603058,26.570442],[119.57618,26.554054],[119.552658,26.50148],[119.500526,26.469366],[119.484268,26.395861],[119.486969,26.3582],[119.52951,26.285101],[119.441948,26.238129],[119.347839,26.217022],[119.324921,26.155777],[119.269295,26.120689],[119.30555,26.120569],[119.306816,26.075317]]},type:"Feature",properties:{destinationid:"350100",id:115,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628616,35.228165],[114.556946,34.999207],[114.519218,34.939739],[114.495995,34.803497],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.893974,30.920433],[114.879303,30.747448],[114.940857,30.63122],[115.03392,30.539289],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.868721,30.034826],[115.915634,30.026325],[115.964523,29.906767],[115.981598,29.808434],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.874176,29.482477],[115.771446,29.403177],[115.750809,29.31954],[115.777069,29.049576],[115.802696,29.015192],[115.823494,28.920338],[115.872025,28.842249],[115.850937,28.79454],[115.847549,28.71974],[115.892456,28.676502]]},type:"Feature",properties:{destinationid:"360100",id:116,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496712,34.810448],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878426,30.752249],[114.917313,30.664124],[115.031746,30.542431],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.763412,30.026253],[115.915405,30.026793],[115.964523,29.906767],[115.981903,29.809978],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.87355,29.481152],[115.819031,29.427299],[115.775513,29.407656],[115.756508,29.371138],[115.750824,29.318676],[115.769447,29.216211],[115.759872,29.157713],[115.777306,29.048706],[115.871254,28.836245],[116.031288,28.802118],[116.064301,28.756741],[116.089317,28.686325],[116.071487,28.609695],[116.082062,28.430811],[116.178696,28.31638],[116.188072,28.263325],[116.237175,28.206129],[116.277786,28.054449],[116.358421,27.899254],[116.504829,27.760759],[116.601814,27.634226],[116.612335,27.535761],[116.651443,27.509071],[116.63784,27.407],[116.767387,27.372778],[116.783348,27.344658],[116.894928,27.267855],[117.068436,27.245872],[117.170082,27.15741],[117.254326,27.121904],[117.291023,27.07659],[117.27549,26.961466],[117.424522,26.891653],[117.431503,26.858],[117.526749,26.762695],[117.513718,26.701488],[117.641602,26.640118],[117.651505,26.609732],[117.723801,26.59551],[117.773468,26.559393],[117.761803,26.51001],[117.80999,26.429171],[117.774216,26.407843],[117.717316,26.334312],[117.66095,26.324974],[117.571068,26.249275],[117.531731,26.245123],[117.466835,26.200235],[117.459663,26.103516],[117.331284,25.977413],[117.33223,25.951199],[117.381775,25.865864],[117.485611,25.795092],[117.477966,25.772535],[117.532478,25.54496],[117.465919,25.48358],[117.43618,25.360794],[117.45253,25.293564],[117.524818,25.227171],[117.525124,25.178551],[117.490295,25.10043],[117.513557,25.028124],[117.508247,24.973568],[117.52877,24.95796],[117.555695,24.879631],[117.575867,24.869532],[117.601669,24.743902],[117.689529,24.656622],[117.810425,24.664558],[117.835358,24.623816],[117.954353,24.517523],[117.968506,24.479254],[117.986603,24.472404],[117.994667,24.488379],[118.038773,24.500893],[118.110168,24.490459]]},type:"Feature",properties:{destinationid:"350200",id:117,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.909164,33.914562],[116.900932,33.882915],[116.939758,33.767334],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.28096,32.877068],[117.302666,32.813671],[117.290916,32.729851],[117.195656,32.64867],[117.147591,32.62698],[117.057259,32.501762],[117.099625,32.463821],[117.136063,32.358749],[117.104744,32.166348],[117.117218,31.905985],[117.16407,31.823009],[117.223412,31.792318],[117.280327,31.784748],[117.271614,31.729267],[117.183357,31.584869],[117.198074,31.512991],[117.187607,31.341831],[117.200943,31.270842],[117.06987,31.141863],[116.976448,30.992432],[116.883034,30.787481],[116.911949,30.777569],[116.98922,30.677435],[117.011162,30.640152],[117.010498,30.605459],[117.062958,30.601048],[117.079346,30.584696],[117.072914,30.474586],[116.968124,30.388334],[116.960823,30.270792],[117.023735,30.14163],[117.00589,30.054232],[117.033401,29.976671],[117.026688,29.948729],[117.078033,29.899645],[117.104126,29.832369],[117.146439,29.785969],[117.126839,29.657734],[117.081207,29.57509],[117.103645,29.447392],[117.081123,29.42153],[117.066978,29.351866],[117.214622,29.292561]]},type:"Feature",properties:{destinationid:"360200",id:118,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.291229,30.052235],[114.271324,29.94928],[114.151237,29.829676],[113.97506,29.782312],[113.796326,29.684723],[113.807251,29.582426],[113.860008,29.477827],[113.824997,29.384102],[113.749893,29.31481],[113.786652,29.096279],[113.745964,28.987961],[113.605782,28.825048],[113.598167,28.75918],[113.633484,28.71826],[113.640404,28.686068],[113.603531,28.534016],[113.478149,28.396233],[113.422836,28.363642],[113.370018,28.234303],[113.368546,28.181589],[113.460205,28.202751],[113.514099,28.191645],[113.696106,28.046503],[113.710281,28.008173],[113.700836,27.963068],[113.758453,27.918985],[113.790077,27.828369],[113.771858,27.75577],[113.819984,27.708771],[113.816887,27.660069],[113.844177,27.65719],[113.852089,27.622831]]},type:"Feature",properties:{destinationid:"360300",id:119,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.70256,37.794323],[115.799278,37.724159],[115.802887,37.7062],[115.781403,37.653046],[115.631683,37.480488],[115.481812,37.152451],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136719,36.089344],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.629204,35.230801],[114.605591,35.188057],[114.583748,35.075737],[114.518303,34.93639],[114.491661,34.682083],[114.519287,34.471203],[114.551636,34.37315],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.604103,33.944477],[114.656815,33.784679],[114.773384,33.631229],[114.819305,33.48027],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.893974,30.920433],[114.8797,30.745974],[114.940857,30.63122],[115.033348,30.540159],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.763412,30.026253],[115.915405,30.026793],[115.964523,29.906767],[115.981903,29.809978],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.87355,29.481152],[115.819031,29.427299],[115.775513,29.407656],[115.756508,29.371138],[115.750824,29.318676],[115.769447,29.216211],[115.759872,29.157713],[115.777306,29.048706],[115.871254,28.836245],[116.045494,28.789955],[116.088219,28.699682],[116.071487,28.609695],[116.083313,28.428064],[116.178696,28.31638],[116.188072,28.263325],[116.237175,28.206129],[116.277786,28.054449],[116.357162,27.901197],[116.504829,27.760759],[116.599281,27.638195],[116.612335,27.535761],[116.651443,27.509071],[116.567482,27.196333],[116.531952,27.1621],[116.511406,27.07357],[116.403664,26.958824],[116.351929,26.839302],[116.353539,26.690689],[116.339073,26.660568],[116.349022,26.586744],[116.314117,26.471727],[116.284569,26.429218],[116.167564,26.35714],[116.097786,26.10685],[115.989487,25.928862],[116.103806,25.920469],[116.211731,25.8379],[116.244682,25.7777],[116.337852,25.756411],[116.344948,25.725969],[116.420479,25.641193],[116.460281,25.55382],[116.482712,25.536776],[116.488472,25.478273],[116.530052,25.412474],[116.62455,25.362],[116.640785,25.30253],[116.662643,25.27072],[116.696953,25.259836],[116.720085,25.198456],[116.877731,25.167263],[116.903656,25.155773],[116.936462,25.104973],[116.971992,25.095825],[116.982727,25.108603],[117.02961,25.091763]]},type:"Feature",properties:{destinationid:"350800",id:120,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628616,35.228165],[114.556946,34.999207],[114.519218,34.939739],[114.495995,34.803497],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.893974,30.920433],[114.8797,30.745974],[114.940857,30.63122],[115.033348,30.540159],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104446,30.257509],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.761719,30.026098],[115.912567,30.029705],[115.954247,29.939867],[115.982033,29.811781],[115.921539,29.742249],[115.910194,29.696043],[115.919823,29.67131],[115.944145,29.671736],[115.981552,29.686867],[115.992752,29.71209]]},type:"Feature",properties:{destinationid:"360400",id:121,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.70256,37.794323],[115.799278,37.724159],[115.802887,37.7062],[115.781403,37.653046],[115.631683,37.480488],[115.481812,37.152451],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136719,36.089344],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.629204,35.230801],[114.605591,35.188057],[114.583748,35.075737],[114.518303,34.93639],[114.491821,34.679333],[114.519287,34.471203],[114.551636,34.37315],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.604103,33.944477],[114.656815,33.784679],[114.773384,33.631229],[114.819305,33.48027],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.893974,30.920433],[114.8797,30.745974],[114.940857,30.63122],[115.033348,30.540159],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.763412,30.026253],[115.915405,30.026793],[115.964523,29.906767],[115.981903,29.809978],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.87355,29.481152],[115.819031,29.427299],[115.775513,29.407656],[115.756508,29.371138],[115.750824,29.318676],[115.769447,29.216211],[115.759872,29.157713],[115.777306,29.048706],[115.871254,28.836245],[116.031288,28.802118],[116.064301,28.756741],[116.089317,28.686325],[116.071487,28.609695],[116.082062,28.430811],[116.178696,28.31638],[116.188072,28.263325],[116.237175,28.206129],[116.277786,28.054449],[116.358421,27.899254],[116.504829,27.760759],[116.601814,27.634226],[116.612335,27.535761],[116.651443,27.509071],[116.63784,27.407],[116.767387,27.372778],[116.783348,27.344658],[116.894928,27.267855],[117.068436,27.245872],[117.170082,27.15741],[117.254326,27.121904],[117.291023,27.07659],[117.27549,26.961466],[117.424522,26.891653],[117.431503,26.858],[117.526749,26.762695],[117.513718,26.701488],[117.641602,26.640118],[117.651505,26.609732],[117.723801,26.59551],[117.773468,26.559393],[117.761803,26.51001],[117.80999,26.429171],[117.774216,26.407843],[117.717316,26.334312],[117.66095,26.324974],[117.571068,26.249275],[117.531731,26.245123],[117.466835,26.200235],[117.459007,26.102335],[117.330231,25.974823],[117.373756,25.87434],[117.410782,25.854124],[117.43026,25.821089],[117.485611,25.795092],[117.477966,25.772535],[117.532478,25.54496],[117.465919,25.48358],[117.436241,25.360296],[117.45253,25.293564],[117.524918,25.226797],[117.525124,25.178551],[117.490295,25.10043],[117.513557,25.028124],[117.50856,24.972322],[117.52877,24.95796],[117.555695,24.879631],[117.575867,24.869532],[117.601669,24.743902],[117.688095,24.659088],[117.613304,24.625109],[117.618607,24.578421],[117.661804,24.510855]]},type:"Feature",properties:{destinationid:"350600",id:122,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178284,36.626984],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.291061,34.50251],[118.331627,34.450615],[118.450768,34.365883],[118.599411,34.301987],[118.694328,34.242645],[118.820717,34.116165],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.3825,33.239166],[119.442406,33.088516],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.217918,32.125652],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.513176,31.44175],[120.557487,31.360451],[120.649742,31.343801],[120.687592,31.121193],[120.672241,30.961033],[120.687035,30.900049],[120.666901,30.808628],[120.681847,30.750694],[120.756958,30.680794],[120.752899,30.536175],[120.795303,30.411346],[120.774231,30.202673],[120.785751,30.029484],[120.850464,29.957973],[120.829758,29.89267],[120.845802,29.861549],[120.848389,29.730227],[120.82235,29.674982],[120.841438,29.587109],[120.832542,29.536972],[120.90947,29.471912],[120.880676,29.388784],[120.876045,29.297308],[121.011787,29.15531],[121.066101,29.146406],[121.089394,29.119318],[121.230286,29.043737],[121.221161,28.959873],[121.251411,28.522818],[121.244659,28.446926],[121.224815,28.405304],[121.151306,28.364489],[121.083366,28.187191],[120.990044,28.091936],[120.792091,28.017349],[120.756645,27.96678],[120.670746,27.906958],[120.660393,27.82999],[120.558945,27.720232],[120.543709,27.658751],[120.494019,27.588619],[120.387283,27.515997],[120.363541,27.476011],[120.322189,27.446489],[120.293152,27.450325],[120.259163,27.429453],[120.221901,27.342886],[120.221268,27.282541],[120.266068,27.203129],[120.243706,27.170191],[120.250221,27.07276],[120.195526,26.963402],[120.108459,26.928885],[120.074028,26.888351],[120.048355,26.893934],[119.81562,26.833672],[119.727386,26.836248],[119.599899,26.78665],[119.577095,26.717287],[119.553215,26.69256],[119.548042,26.650009],[119.557289,26.61587],[119.603058,26.570442],[119.57618,26.554054],[119.552658,26.50148],[119.500526,26.469366],[119.484177,26.394926],[119.487206,26.357626],[119.54763,26.251041],[119.558372,26.148016],[119.466774,26.002546],[119.487709,25.971804],[119.406616,25.939045],[119.368439,25.878338],[119.312279,25.841194],[119.29789,25.76215],[119.306847,25.680624],[119.279938,25.624567],[119.287521,25.584257],[119.246643,25.505369],[119.106239,25.424175],[118.999367,25.296976],[118.888603,25.265022],[118.818993,25.119965],[118.704346,25.042925],[118.660736,24.938602],[118.626862,24.910568],[118.589363,24.909126]]},type:"Feature",properties:{destinationid:"350500",id:123,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104385,37.928524],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.204231,36.804646],[117.212135,36.674015],[117.178284,36.626984],[117.46582,36.601517],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755974,36.252506],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.799789,35.777542],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.149216,35.539536],[118.228249,35.464394],[118.258896,35.405792],[118.2537,35.143944],[118.212143,34.999397],[118.209877,34.864346],[118.21376,34.775642],[118.291061,34.50251],[118.331627,34.450615],[118.450768,34.365883],[118.599411,34.301987],[118.694328,34.242645],[118.820717,34.116165],[118.990112,33.858299],[119.128586,33.694759],[119.284966,33.367641],[119.3825,33.239166],[119.442406,33.088516],[119.495911,32.881077],[119.501442,32.788399],[119.554062,32.672855],[119.564774,32.57972],[119.624924,32.422363],[119.703873,32.403488],[119.768906,32.364758],[119.833572,32.366322],[119.918541,32.342945],[119.973099,32.306133],[120.005379,32.249546],[120.050865,32.213554],[120.217918,32.125652],[120.24807,31.99427],[120.29734,31.904436],[120.320541,31.811411],[120.333511,31.630819],[120.513176,31.44175],[120.557487,31.360451],[120.649742,31.343801],[120.687592,31.121193],[120.672241,30.961033],[120.687035,30.900049],[120.666901,30.808628],[120.681847,30.750694],[120.756958,30.680794],[120.752899,30.536175],[120.795303,30.411346],[120.774231,30.202673],[120.785751,30.029484],[120.850464,29.957973],[120.829758,29.89267],[120.845802,29.861549],[120.848389,29.730227],[120.82235,29.674982],[120.841438,29.587109],[120.832542,29.536972],[120.90947,29.471912],[120.880676,29.388784],[120.876045,29.297308],[121.011787,29.15531],[121.066101,29.146406],[121.089394,29.119318],[121.230186,29.044241],[121.221161,28.959873],[121.239891,28.787449],[121.246109,28.454586],[121.222481,28.402569],[121.150726,28.363581],[121.083092,28.186762],[120.986916,28.089535],[120.855034,28.051689],[120.792091,28.017349],[120.756645,27.96678],[120.673019,27.909327],[120.660393,27.82999],[120.558945,27.720232],[120.544312,27.659977],[120.494629,27.589298],[120.387283,27.515997],[120.363541,27.476011],[120.322189,27.446489],[120.293152,27.450325],[120.259163,27.429453],[120.221901,27.342886],[120.221268,27.282541],[120.266068,27.203129],[120.243706,27.170191],[120.250221,27.07276],[120.195526,26.963402],[120.108459,26.928885],[120.073563,26.888216],[120.048355,26.893934],[119.81562,26.833672],[119.728485,26.836458],[119.636513,26.805893],[119.599136,26.785414],[119.577095,26.717287],[119.553215,26.69256],[119.550735,26.63842],[119.526291,26.659544]]},type:"Feature",properties:{destinationid:"350900",id:124,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496346,34.808033],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878601,30.750912],[114.919952,30.660292],[115.030624,30.543858],[115.068619,30.459044],[115.136551,30.405733],[115.162712,30.352144],[115.103157,30.259388],[115.002777,30.249298],[114.948318,30.209719],[114.91597,30.162458],[114.911446,30.044645],[114.883934,29.92588],[114.893356,29.891024],[114.965057,29.826233],[114.946144,29.742277],[114.953377,29.613199],[114.846146,29.498537],[114.850098,29.45006],[114.830917,29.415474],[114.853897,29.36302],[114.796631,29.177431],[114.602524,28.980005],[114.585808,28.944139],[114.609634,28.854782],[114.643692,28.806808],[114.640579,28.679085],[114.719673,28.634089],[114.733246,28.588015],[114.841713,28.409866],[114.835381,28.290668],[114.853188,28.216471],[114.845284,28.109394],[114.82135,28.079479],[114.833138,28.01372],[114.80928,27.935591],[114.80941,27.855577],[114.922127,27.866165],[114.948891,27.827364],[114.930832,27.810642]]},type:"Feature",properties:{destinationid:"360500",id:125,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425621,34.552319],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.909164,33.914562],[116.900932,33.882915],[116.939758,33.767334],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.28096,32.877068],[117.302696,32.812592],[117.290916,32.729851],[117.195656,32.64867],[117.147591,32.62698],[117.057259,32.501762],[117.099625,32.463821],[117.136063,32.358749],[117.104744,32.166348],[117.117218,31.905985],[117.16407,31.823009],[117.223412,31.792318],[117.280327,31.784748],[117.271614,31.729267],[117.183357,31.584869],[117.198074,31.512991],[117.187607,31.341831],[117.200943,31.270842],[117.06987,31.141863],[116.976448,30.992432],[116.883034,30.787481],[116.911949,30.777569],[116.98922,30.677435],[117.011162,30.640152],[117.010498,30.605459],[117.062958,30.601048],[117.079048,30.585938],[117.075645,30.480577],[116.976685,30.404322],[116.960442,30.274836],[117.023735,30.14163],[117.00589,30.054232],[117.033401,29.976671],[117.026688,29.948729],[117.078033,29.899645],[117.104126,29.832369],[117.1465,29.78516],[117.126839,29.657734],[117.081123,29.574522],[117.103645,29.447392],[117.081123,29.42153],[117.062943,29.341202],[117.072418,29.247847],[117.052048,29.154036],[117.066498,29.084339],[117.041336,29.035898],[116.944527,28.981932],[116.908791,28.935806],[116.884613,28.859409],[116.882904,28.716194],[116.814522,28.589796],[116.833046,28.449718],[116.911316,28.317314],[116.933647,28.207239],[116.975967,28.222023],[117.001488,28.21479],[117.022186,28.243206],[117.034492,28.238285]]},type:"Feature",properties:{destinationid:"360600",id:126,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425728,34.550159],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.909164,33.914562],[116.901184,33.886276],[116.940056,33.764477],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.28096,32.877068],[117.302696,32.811951],[117.290916,32.729851],[117.195656,32.64867],[117.147591,32.62698],[117.057281,32.502029],[117.099625,32.463821],[117.136063,32.358749],[117.104744,32.166348],[117.116837,31.907244],[117.159981,31.82642],[117.225677,31.791616],[117.276657,31.792696],[117.280891,31.758848],[117.183495,31.585756],[117.198074,31.512991],[117.187607,31.341831],[117.198677,31.263834],[117.06987,31.141863],[116.976448,30.992432],[116.883057,30.7878],[116.911949,30.777569],[116.98922,30.677435],[117.011162,30.640152],[117.010498,30.605459],[117.062958,30.601048],[117.079048,30.585938],[117.075645,30.480577],[116.976685,30.404322],[116.960442,30.274836],[117.023735,30.14163],[117.00589,30.054232],[117.033401,29.976671],[117.026688,29.948729],[117.078033,29.899645],[117.104126,29.832369],[117.146507,29.783934],[117.126839,29.657734],[117.081123,29.574522],[117.103645,29.447392],[117.081123,29.42153],[117.062943,29.341202],[117.072418,29.247847],[117.052048,29.154036],[117.06665,29.084896],[117.041336,29.035898],[116.944527,28.981932],[116.909363,28.936844],[116.884789,28.860889],[116.88166,28.770552],[116.96328,28.766075],[117.064659,28.792374],[117.08783,28.775036],[117.124779,28.686979],[117.150986,28.676138],[117.201546,28.604284],[117.333817,28.509426],[117.550713,28.414015],[117.572037,28.352049],[117.793007,28.364227],[117.793449,28.162535],[117.806679,28.086138],[117.843834,28.043806],[117.808365,27.967205],[117.901176,27.873766],[117.923447,27.823355],[118.046959,27.764332],[117.991547,27.621689],[117.985085,27.540213],[118.018028,27.504936],[118.06459,27.50106],[118.065048,27.421875],[118.091072,27.388168],[118.082092,27.367556],[118.09742,27.33868],[118.099442,27.269285],[118.193054,27.162323],[118.295532,27.127899],[118.298264,27.100943],[118.342445,27.094358],[118.356216,27.074795],[118.333534,27.020876],[118.34259,26.96608],[118.323822,26.94029],[118.326775,26.887838],[118.306931,26.825317],[118.24408,26.76996],[118.245674,26.728312],[118.230499,26.707218],[118.200462,26.701267],[118.166481,26.66217],[118.178894,26.635712]]},type:"Feature",properties:{destinationid:"350700",id:127,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104996,37.925606],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029518,37.095085],[117.084373,36.846523],[117.202339,36.807701],[117.204758,36.781361],[117.191528,36.765167],[117.073456,36.746304],[117.021164,36.717602],[117.022766,36.6856],[117.000931,36.675987]]},type:"Feature",properties:{destinationid:"370100",id:128,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.543144,39.907997],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.8899,39.60638],[116.929047,39.551056],[116.926598,39.460938],[116.963608,39.369591],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.389404,38.387772],[117.384483,38.260685],[117.407288,38.211311],[117.467781,38.123562],[117.569611,38.063507],[117.623627,37.9482],[117.754181,37.818325],[117.851349,37.672119],[117.863594,37.578728],[117.911034,37.515606],[117.905922,37.32349],[117.964729,37.261971],[117.977013,36.992069],[117.971039,36.953785],[117.942642,36.948647],[117.999954,36.899166],[118.025703,36.821922],[118.048241,36.814953]]},type:"Feature",properties:{destinationid:"370300",id:129,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.903023,39.592388],[116.929207,39.550632],[116.926598,39.460938],[116.963531,39.372738],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.390366,38.385372],[117.387268,38.250843],[117.465019,38.126221],[117.569611,38.063507],[117.623627,37.9482],[117.754181,37.818325],[117.817215,37.729038],[118.157562,37.738605],[118.256836,37.715458],[118.474976,37.712063],[118.533234,37.691776],[118.59845,37.622971],[118.608429,37.577068],[118.591423,37.518688],[118.604149,37.403587],[118.590561,37.235664],[118.552185,37.171532],[118.741676,37.062355],[118.869637,37.022728],[119.080551,37.000637],[119.289146,36.958523],[119.529259,36.962357],[119.665344,36.937355],[119.851562,36.756439],[120.185287,36.561756],[120.256645,36.488628],[120.323456,36.451836],[120.349258,36.394135],[120.412933,36.358952],[120.453529,36.119583],[120.355209,36.083019]]},type:"Feature",properties:{destinationid:"370200",id:130,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.903023,39.592388],[116.929207,39.550632],[116.926598,39.460938],[116.963531,39.372738],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.390366,38.385372],[117.387268,38.250843],[117.465019,38.126221],[117.569611,38.063507],[117.623627,37.9482],[117.754181,37.818325],[117.81707,37.729187],[118.157562,37.738605],[118.254288,37.715691],[118.506027,37.705078],[118.602631,37.614777],[118.596497,37.46442],[118.644447,37.470062],[118.644852,37.441235],[118.663521,37.434532]]},type:"Feature",properties:{destinationid:"370500",id:131,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380569,37.386776],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.874611,36.698738],[116.887558,36.619797],[116.850685,36.554703],[116.84687,36.505611],[116.889061,36.451977],[116.909431,36.329681],[116.978821,36.260056],[117.000549,36.197651],[117.096535,36.063934],[117.103172,35.990879],[117.071411,35.914543],[117.041603,35.487083],[117.112473,35.234234],[117.204788,35.109676],[117.216255,35.002285],[117.310753,34.949997],[117.412819,34.937412],[117.451981,34.906689],[117.530479,34.889904],[117.530968,34.857426],[117.557922,34.856628]]},type:"Feature",properties:{destinationid:"370400",id:132,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.543144,39.907997],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.8899,39.60638],[116.928917,39.551277],[116.926598,39.460938],[116.963608,39.369591],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189636,38.974888],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.194611,38.735973],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.389404,38.387772],[117.385506,38.255268],[117.462997,38.128445],[117.568405,38.064919],[117.623627,37.9482],[117.754181,37.818325],[117.817917,37.72855],[118.157562,37.738605],[118.256836,37.715458],[118.474976,37.712063],[118.539314,37.687222],[118.59845,37.622971],[118.608429,37.577068],[118.591423,37.518688],[118.604149,37.403587],[118.590561,37.235664],[118.551689,37.172173],[118.749374,37.059258],[118.87207,37.022243],[119.06678,37.001228],[118.993767,36.870117],[118.991364,36.818832],[118.960876,36.782227],[118.960304,36.750561],[119.039215,36.747276],[119.10717,36.709579]]},type:"Feature",properties:{destinationid:"370700",id:133,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.543144,39.907997],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.8899,39.60638],[116.928917,39.551277],[116.926598,39.460938],[116.963608,39.369591],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189636,38.974888],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.194611,38.735973],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.389404,38.387772],[117.385239,38.25621],[117.462265,38.129326],[117.568405,38.064919],[117.623627,37.9482],[117.754181,37.818325],[117.817917,37.72855],[118.157562,37.738605],[118.256836,37.715458],[118.474976,37.712063],[118.539314,37.687222],[118.59845,37.622971],[118.608429,37.577068],[118.591423,37.518688],[118.604149,37.403587],[118.590561,37.235664],[118.551605,37.172359],[118.741676,37.062355],[118.87207,37.022243],[119.080551,37.000637],[119.285805,36.958923],[119.529259,36.962357],[119.663895,36.937103],[119.809998,37.022171],[119.920944,37.124126],[120.003174,37.162395],[120.21949,37.35244],[120.366783,37.555702],[120.478363,37.612083],[120.562469,37.615929],[120.645683,37.644089],[120.774933,37.624249],[120.98056,37.634632],[121.101395,37.608639],[121.118439,37.56377],[121.180099,37.521488],[121.344826,37.546654],[121.391113,37.53933]]},type:"Feature",properties:{destinationid:"370600",id:134,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380569,37.386776],[116.406258,37.324474],[116.662834,37.018013],[116.774345,36.828243],[116.85498,36.742443],[116.888008,36.62421],[116.850861,36.555187],[116.845566,36.510761],[116.889061,36.451977],[116.909927,36.328846],[116.976585,36.263191],[117.018089,36.181793],[117.111008,36.182568],[117.129044,36.194775]]},type:"Feature",properties:{destinationid:"370900",id:135,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.406258,37.324474],[116.662834,37.018013],[116.774345,36.828243],[116.852081,36.747261],[116.888016,36.627804],[116.865295,36.580742],[116.802559,36.570324],[116.685745,36.405815],[116.547638,36.339561],[116.497643,36.296406],[116.442322,36.143944],[116.44445,36.043526],[116.407761,35.958092],[116.415886,35.899651],[116.37941,35.844761],[116.414375,35.802731],[116.414757,35.721844],[116.463074,35.523621],[116.53186,35.532604],[116.549278,35.430893],[116.588211,35.430908],[116.587234,35.416142]]},type:"Feature",properties:{destinationid:"370800",id:136,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.70256,37.794323],[115.799278,37.724159],[115.802887,37.7062],[115.781403,37.653046],[115.631683,37.480488],[115.481812,37.152451],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136719,36.089344],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.629204,35.230801],[114.605591,35.188057],[114.583748,35.075737],[114.518303,34.93639],[114.491623,34.683838],[114.519287,34.471203],[114.551636,34.37315],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.604103,33.944477],[114.656815,33.784679],[114.773384,33.631229],[114.819305,33.48027],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.893974,30.920433],[114.879494,30.746702],[114.940857,30.63122],[115.033348,30.540159],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.763412,30.026253],[115.915405,30.026793],[115.964523,29.906767],[115.981903,29.809978],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.87355,29.481152],[115.819031,29.427299],[115.775513,29.407656],[115.756508,29.371138],[115.750824,29.318676],[115.769447,29.216211],[115.759872,29.157713],[115.776855,29.050524],[115.871254,28.836245],[116.031288,28.802118],[116.064301,28.756741],[116.089401,28.68475],[116.071556,28.612091],[116.08136,28.432617],[116.178696,28.31638],[116.188072,28.263325],[116.237175,28.206129],[116.277206,28.056011],[116.330299,27.94846],[116.35865,27.983898]]},type:"Feature",properties:{destinationid:"361000",id:137,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496346,34.808033],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878601,30.750912],[114.919952,30.660292],[115.030624,30.543858],[115.068619,30.459044],[115.136551,30.405733],[115.162712,30.352144],[115.103157,30.259388],[115.002777,30.249298],[114.948318,30.209719],[114.91597,30.162458],[114.911446,30.044645],[114.883934,29.92588],[114.893356,29.891024],[114.965057,29.826233],[114.946144,29.742277],[114.953377,29.613199],[114.846146,29.498537],[114.850098,29.45006],[114.830917,29.415474],[114.853897,29.36302],[114.796631,29.177431],[114.602524,28.980005],[114.585754,28.943325],[114.609634,28.854782],[114.643692,28.806808],[114.640579,28.679085],[114.719673,28.634089],[114.733246,28.588015],[114.841988,28.408346],[114.845459,28.11062],[114.821419,28.079922],[114.832962,28.011457],[114.797188,27.814409],[114.798958,27.783289],[114.842026,27.735929],[114.847954,27.665621],[114.785591,27.607609],[114.798203,27.55187],[114.773788,27.414562],[114.860489,27.233511],[114.89257,27.097729],[114.911003,27.113485],[114.957932,27.087091],[114.986572,27.112049]]},type:"Feature",properties:{destinationid:"360800",id:138,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.53331,37.753948],[116.477165,37.693668],[116.403023,37.54948],[116.39093,37.49596],[116.353798,37.509293],[116.336082,37.47541],[116.313141,37.478817],[116.307541,37.453968]]},type:"Feature",properties:{destinationid:"371400",id:139,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496346,34.808033],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878601,30.750912],[114.919952,30.660292],[115.030624,30.543858],[115.068619,30.459044],[115.136551,30.405733],[115.162735,30.35174],[115.103157,30.259388],[115.002777,30.249298],[114.948318,30.209719],[114.91597,30.162458],[114.911446,30.044645],[114.883934,29.92588],[114.893356,29.891024],[114.965057,29.826233],[114.946144,29.742277],[114.953377,29.613199],[114.846146,29.498537],[114.850098,29.45006],[114.830917,29.415474],[114.853897,29.36302],[114.796631,29.177431],[114.602524,28.980005],[114.585754,28.943325],[114.609634,28.854782],[114.643692,28.806808],[114.640579,28.679085],[114.719673,28.634089],[114.733246,28.588015],[114.841881,28.409012],[114.845459,28.11062],[114.821419,28.079922],[114.832962,28.011457],[114.797188,27.814409],[114.798958,27.783289],[114.842026,27.735929],[114.847954,27.665621],[114.785873,27.608507],[114.798149,27.551193],[114.77137,27.433142],[114.860489,27.233511],[114.894791,27.102522],[114.856705,27.048529],[114.85585,26.946627],[114.79718,26.758755],[114.727058,26.689562],[114.65007,26.545601],[114.672691,26.402822],[114.696907,26.354254],[114.671722,26.32383],[114.651253,26.203697],[114.675713,26.167696],[114.670319,26.118355],[114.69426,26.074036],[114.682663,25.997309],[114.769722,25.826971],[114.837051,25.852488],[114.940613,25.851133]]},type:"Feature",properties:{destinationid:"360700",id:140,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.903023,39.592388],[116.929207,39.550632],[116.926598,39.460938],[116.963531,39.372738],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.390366,38.385372],[117.387268,38.250843],[117.465019,38.126221],[117.569611,38.063507],[117.623627,37.9482],[117.754181,37.818325],[117.81707,37.729187],[118.155174,37.738686],[118.256836,37.715458],[118.474976,37.712063],[118.536469,37.689476],[118.600967,37.618523],[118.590561,37.235664],[118.552826,37.170677],[118.537659,37.052956],[118.542747,36.781158],[118.599037,36.669403],[118.59671,36.622978],[118.627708,36.552872],[118.642273,36.38055],[118.720139,36.280083],[118.71209,36.216702],[118.732697,35.963192],[118.67038,35.784302],[118.701752,35.699524],[118.634834,35.42387],[119.086952,35.501545],[119.27317,35.49065],[119.321495,35.474091],[119.344925,35.440025],[119.402054,35.412979],[119.446892,35.411469],[119.461212,35.428585]]},type:"Feature",properties:{destinationid:"371100",id:141,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.543144,39.907997],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.8899,39.60638],[116.928917,39.551277],[116.926598,39.460938],[116.963608,39.369591],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189636,38.974888],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.194611,38.735973],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.389404,38.387772],[117.385239,38.25621],[117.462265,38.129326],[117.568405,38.064919],[117.623627,37.9482],[117.754181,37.818325],[117.817917,37.72855],[118.157562,37.738605],[118.256836,37.715458],[118.474976,37.712063],[118.539314,37.687222],[118.59845,37.622971],[118.608429,37.577068],[118.591423,37.518688],[118.604149,37.403587],[118.590561,37.235664],[118.551605,37.172359],[118.74424,37.061226],[118.87207,37.022243],[119.080551,37.000637],[119.285805,36.958923],[119.529259,36.962357],[119.664207,36.937195],[119.809998,37.022171],[119.916504,37.120995],[120.000038,37.159969],[120.165413,37.297489],[120.250061,37.387142],[120.372444,37.560337],[120.478363,37.612083],[120.562469,37.615929],[120.63987,37.643566],[120.774933,37.624249],[120.98056,37.634632],[121.095886,37.610416],[121.118439,37.56377],[121.168648,37.535812],[121.205696,37.487061],[121.28833,37.44936],[121.424194,37.429825],[121.614326,37.423244],[121.861343,37.447876],[121.977104,37.475883],[122.010323,37.501148],[122.116234,37.509781]]},type:"Feature",properties:{destinationid:"371000",id:142,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.542816,39.908215],[116.54686,39.84433],[116.629921,39.795994],[116.814674,39.64048],[116.903023,39.592388],[116.929207,39.550632],[116.926598,39.460938],[116.963531,39.372738],[116.916496,39.199959],[116.926712,39.112377],[117.045113,39.078793],[117.10302,39.014545],[117.189545,38.975048],[117.18837,38.944534],[117.220596,38.896248],[117.182243,38.840073],[117.193802,38.738567],[117.251595,38.582806],[117.322891,38.487007],[117.340302,38.433315],[117.389404,38.387772],[117.384483,38.260685],[117.407288,38.211311],[117.467781,38.123562],[117.568405,38.064919],[117.624359,37.947224],[117.815269,37.736404],[117.856071,37.660511],[117.864586,37.576344],[117.910347,37.518917],[117.901947,37.411415],[118.016907,37.40741],[118.016907,37.384068]]},type:"Feature",properties:{destinationid:"371600",id:143,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569633,39.009533],[116.515259,38.915794],[116.512161,38.854954],[116.556068,38.782692],[116.590401,38.639507],[116.631577,38.591545],[116.645584,38.547367],[116.702614,38.50061],[116.728516,38.454422],[116.798195,38.415188],[116.769592,38.37476],[116.739769,38.252205],[116.706741,38.196274],[116.694115,38.111572],[116.653259,38.019146],[116.593399,37.939255],[116.534241,37.755871],[116.478249,37.695465],[116.402641,37.548592],[116.380196,37.38871],[116.405548,37.325447],[116.663635,37.016949],[116.719864,36.908138],[116.800446,36.793472],[116.850586,36.74934],[116.873825,36.700897],[116.887558,36.619797],[116.850685,36.554703],[116.846474,36.506771],[116.889061,36.451977],[116.908569,36.331242],[116.976906,36.262753],[117.000862,36.19714],[117.090446,36.079769],[117.103653,36.013363],[117.06469,35.857525],[117.042839,35.480274],[117.112473,35.234234],[117.204788,35.109676],[117.219757,34.963139],[117.253616,34.866184],[117.288414,34.816948],[117.318314,34.715687],[117.401802,34.637714],[117.425514,34.553875],[117.418541,34.516941],[117.357269,34.453125],[117.302773,34.341492],[117.298622,34.299545],[117.333023,34.236797],[117.337006,34.19429],[117.175606,34.14397],[117.037163,34.129673],[117.007286,34.007477],[116.961563,33.948071],[116.909164,33.914562],[116.901016,33.884235],[116.939758,33.767334],[116.931824,33.659454],[116.959595,33.549152],[116.94989,33.416943],[117.03643,33.303082],[117.116425,33.155556],[117.210678,33.086845],[117.250854,33.003555],[117.24678,32.917614],[117.280266,32.878357],[117.302612,32.814365],[117.290916,32.729851],[117.195656,32.64867],[117.147591,32.62698],[117.057259,32.501762],[117.099625,32.463821],[117.136063,32.358749],[117.104744,32.166348],[117.117218,31.905985],[117.16407,31.823009],[117.280617,31.782196],[117.271614,31.729267],[117.183495,31.585756],[117.198074,31.512991],[117.187607,31.341831],[117.197556,31.265179],[117.255424,31.143393],[117.355957,31.001726],[117.427132,30.969675],[117.459877,30.927076],[117.553215,30.882565],[117.745804,30.851048],[117.81913,30.764322],[117.947708,30.569468],[117.896988,30.421661],[117.914177,30.342777],[118.062454,30.3048],[118.146294,30.304405],[118.250206,30.238096],[118.270393,30.203009],[118.250183,30.111931],[118.207916,30.071667],[118.222679,30.008215],[118.286659,29.932882],[118.224655,29.749676],[118.242081,29.660456],[118.218346,29.622009],[118.22583,29.546181],[118.155014,29.483603],[118.098663,29.463438],[118.084396,29.436548],[118.032394,29.412565],[118.020302,29.379578],[117.776337,29.252718],[117.874954,29.1947],[117.895988,29.142664],[117.937691,29.110743],[117.861336,29.087132],[117.841431,29.025105],[117.808266,29.002186],[117.772552,28.943651],[117.903641,28.899979],[117.910576,28.880039],[117.989624,28.82983],[117.992348,28.715256],[118.03968,28.657831],[118.06179,28.558907],[118.01194,28.514217],[117.968781,28.503016],[117.982155,28.48414],[117.97126,28.444454]]},type:"Feature",properties:{destinationid:"361100",id:144,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104721,37.927025],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029449,37.097515],[117.084099,36.847092],[117.204178,36.804806],[117.212135,36.674015],[117.178871,36.626377],[117.46582,36.601517],[117.506554,36.578445],[117.526993,36.539532],[117.534355,36.446945],[117.585617,36.369835],[117.633469,36.334492],[117.677727,36.214848]]},type:"Feature",properties:{destinationid:"371200",id:145,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.076515,38.792721],[115.97168,38.641132],[115.869858,38.576908],[115.780495,38.477348],[115.700981,38.34713],[115.63974,38.139515],[115.695221,38.021114],[115.705475,37.789272],[115.860374,37.68935],[115.977867,37.637787],[116.035866,37.628925],[116.110054,37.583843],[116.036774,37.4729],[116.043022,37.391441],[116.011642,37.235512],[116.006828,37.123661],[115.913322,36.926552],[115.878952,36.67247],[115.833534,36.600018],[115.869591,36.460953],[115.900124,36.469814],[115.979469,36.455986]]},type:"Feature",properties:{destinationid:"371500",id:146,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496712,34.810448],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878601,30.750912],[114.919952,30.660292],[115.031746,30.542431],[115.068619,30.459044],[115.136551,30.405733],[115.162758,30.351238],[115.103157,30.259388],[115.002777,30.249298],[114.948318,30.209719],[114.915459,30.16098],[114.911446,30.044645],[114.883934,29.92588],[114.893356,29.891024],[114.965057,29.826233],[114.946144,29.742277],[114.953514,29.613853],[114.846146,29.498537],[114.850098,29.45006],[114.830917,29.415474],[114.853897,29.36302],[114.796631,29.177431],[114.591972,28.965834],[114.58815,28.91254],[114.643692,28.806808],[114.64003,28.675655],[114.529442,28.65659],[114.486145,28.611515],[114.418709,28.584553],[114.446953,28.531134],[114.55526,28.494184],[114.585579,28.357635],[114.540207,28.300947],[114.466118,28.26689],[114.460747,28.208624],[114.418015,28.142673],[114.425888,28.111412],[114.41333,28.083019],[114.431717,27.996328],[114.3368,27.866657],[114.349922,27.821667],[114.39045,27.804688]]},type:"Feature",properties:{destinationid:"360900",id:147,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.418457,39.900974],[116.458557,39.654282],[116.516777,39.506039],[116.513153,39.423935],[116.575607,39.331055],[116.605797,39.309826],[116.606758,39.221191],[116.568962,39.094776],[116.569473,39.008766],[116.538002,38.973137],[116.512238,38.902363],[116.512161,38.854954],[116.556068,38.782692],[116.56839,38.691303],[116.645584,38.547367],[116.702614,38.50061],[116.729538,38.453552],[116.902168,38.368458],[116.983322,38.349216],[117.006096,38.287567],[117.001183,38.243782],[116.97541,38.203804],[117.026314,38.128304],[117.038788,38.036537],[117.104721,37.927025],[117.101242,37.685085],[117.12326,37.576591],[117.115974,37.431805],[117.092224,37.375484],[117.085823,37.24918],[117.047668,37.190269],[117.029449,37.097515],[117.084099,36.847092],[117.204178,36.804806],[117.212135,36.674015],[117.178604,36.626568],[117.463882,36.601776],[117.500473,36.583565],[117.526993,36.539532],[117.53392,36.447926],[117.584976,36.370609],[117.688301,36.272861],[117.755882,36.252644],[117.733437,36.137817],[117.784462,36.086063],[117.823425,35.98085],[117.815918,35.941948],[117.835945,35.91151],[117.83741,35.847816],[117.79969,35.777729],[117.831787,35.744827],[117.973801,35.667503],[118.043037,35.597904],[118.147179,35.541126],[118.229355,35.462986],[118.26075,35.395752],[118.251862,35.140591],[118.313515,35.103874],[118.312981,35.06731],[118.326279,35.065205]]},type:"Feature",properties:{destinationid:"371300",id:148,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.641006,37.68877],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.552589,36.589088],[114.535843,36.538246],[114.44442,36.427483],[114.395706,36.271164],[114.431618,36.073059],[114.39003,35.89003],[114.331909,35.794613],[114.314041,35.719887],[114.137077,35.513165],[114.141418,35.457355],[114.087608,35.378006],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.834328,34.832588],[113.816551,34.744858],[113.667763,34.740219],[113.66539,34.757812]]},type:"Feature",properties:{destinationid:"410100",id:149,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645134,38.180981],[115.641708,38.117493],[115.695221,38.021114],[115.705475,37.789272],[115.860374,37.68935],[115.977867,37.637787],[116.035866,37.628925],[116.110077,37.583458],[116.036774,37.4729],[116.043022,37.391441],[116.011642,37.235512],[116.006828,37.123661],[115.913536,36.927197],[115.878952,36.67247],[115.833908,36.602581],[115.838593,36.548855],[115.870628,36.472004],[115.874527,36.392941],[115.81147,36.316483],[115.765671,36.287838],[115.720512,36.207951],[115.675919,36.166992],[115.617859,36.021999],[115.60585,35.916496],[115.564873,35.831055],[115.573761,35.768181],[115.553307,35.675812],[115.624397,35.491688],[115.64225,35.35862],[115.665077,35.317257],[115.616417,35.297966],[115.509926,35.290306],[115.468948,35.246452]]},type:"Feature",properties:{destinationid:"371700",id:150,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.497223,34.813911],[114.447128,34.801563],[114.444916,34.788734],[114.339966,34.798019]]},type:"Feature",properties:{destinationid:"410200",id:151,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.647118,38.188477],[115.641708,38.117493],[115.695221,38.021114],[115.70256,37.794323],[115.803612,37.708504],[115.781403,37.653046],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.245491,36.881104],[115.199623,36.73061],[115.133125,36.605938],[115.093407,36.42643],[115.102356,36.376179],[115.088341,36.32708],[115.152061,36.198334],[115.156601,36.160709],[115.129814,36.073807],[115.088974,36.030979],[114.94278,35.787548],[115.041283,35.767948]]},type:"Feature",properties:{destinationid:"410900",id:152,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.785263,38.057766],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.467697,36.465279],[114.430122,36.388844],[114.39473,36.263985],[114.431396,36.078217],[114.420486,35.996559],[114.388336,35.885063],[114.333344,35.797623],[114.323196,35.752983],[114.295601,35.748028]]},type:"Feature",properties:{destinationid:"410600",id:153,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.785263,38.057766],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55191,36.585293],[114.534668,36.536518],[114.44442,36.427483],[114.395706,36.271164],[114.431618,36.073059],[114.388657,35.885883],[114.331909,35.794613],[114.314041,35.719887],[114.137077,35.513165],[114.139008,35.452663],[114.083885,35.373764],[114.01371,35.335537],[113.862633,35.382282],[113.780899,35.37043],[113.71669,35.328953],[113.620148,35.302174],[113.490524,35.209412],[113.410522,35.193336],[113.316032,35.146816],[113.297455,35.211143],[113.254578,35.208015],[113.237823,35.239014]]},type:"Feature",properties:{destinationid:"410800",id:154,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.641006,37.68877],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.552589,36.589088],[114.535843,36.538246],[114.44442,36.427483],[114.395706,36.271164],[114.431618,36.073059],[114.39003,35.89003],[114.331909,35.794613],[114.314041,35.719887],[114.137077,35.513165],[114.141418,35.457355],[114.086021,35.375977],[113.97023,35.296059],[113.883987,35.302719]]},type:"Feature",properties:{destinationid:"410700",id:155,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.836739,34.203876],[113.892952,34.04594],[113.82589,34.022873]]},type:"Feature",properties:{destinationid:"411000",id:156,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.785263,38.057766],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.396294,36.273628],[114.42009,36.10881],[114.352959,36.103485]]},type:"Feature",properties:{destinationid:"410500",id:157,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.833244,34.828365],[113.772125,34.826611],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.656006,34.783493],[112.478096,34.771935],[112.432594,34.760113],[112.41967,34.675705],[112.434464,34.663406]]},type:"Feature",properties:{destinationid:"410300",id:158,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890045,33.963284],[113.781593,33.95705],[113.606987,33.868668],[113.55645,33.818695],[113.5065,33.735481],[113.307709,33.735027]]},type:"Feature",properties:{destinationid:"410400",id:159,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832878,34.827915],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.589371,34.700054],[111.27401,34.716904],[111.188637,34.766979],[111.194016,34.777378]]},type:"Feature",properties:{destinationid:"411200",id:160,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761345,38.35416],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.822952,34.935974],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800934,34.317528],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.048477,33.766617],[114.092484,33.658844],[114.061691,33.583233],[114.026398,33.575729]]},type:"Feature",properties:{destinationid:"411100",id:161,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.644699,38.17849],[115.641708,38.117493],[115.695221,38.021114],[115.705475,37.789272],[115.860374,37.68935],[115.977867,37.637787],[116.035866,37.628925],[116.110077,37.583458],[116.036774,37.4729],[116.043022,37.391441],[116.011642,37.235512],[116.006828,37.123661],[115.913536,36.927197],[115.878952,36.67247],[115.833908,36.602581],[115.838593,36.548855],[115.870628,36.472004],[115.874527,36.392941],[115.81147,36.316483],[115.765671,36.287838],[115.720512,36.207951],[115.675919,36.166992],[115.617859,36.021999],[115.60585,35.916496],[115.564499,35.828995],[115.573761,35.768181],[115.553307,35.675812],[115.624397,35.491688],[115.64225,35.35862],[115.667664,35.308083],[115.671394,35.181553],[115.640587,34.956097],[115.659073,34.827137],[115.653687,34.645485],[115.735954,34.458042],[115.651695,34.461983],[115.650169,34.436188]]},type:"Feature",properties:{destinationid:"411400",id:162,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.960373,33.262527],[112.73645,33.133507],[112.667763,33.032673],[112.608154,33.021294],[112.573463,32.991825],[112.540916,32.998993]]},type:"Feature",properties:{destinationid:"411300",id:163,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.243393,36.877266],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.722389,35.487446],[114.638428,35.32526],[114.629204,35.230801],[114.605591,35.188057],[114.583748,35.075737],[114.518608,34.937572],[114.491661,34.682083],[114.519287,34.471203],[114.551636,34.37315],[114.541641,34.286217],[114.553032,34.179985],[114.595886,34.05098],[114.603348,33.94775],[114.635429,33.831718],[114.716171,33.711685],[114.693794,33.706409],[114.694214,33.646652],[114.655724,33.636204],[114.648712,33.620373]]},type:"Feature",properties:{destinationid:"411600",id:164,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761108,38.353519],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.822685,34.93399],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801331,34.315292],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.891953,33.959686],[114.05085,33.762688],[114.123146,33.553974],[114.091064,33.432098],[114.084953,33.093006],[114.100693,33.045013],[114.105255,32.902569],[114.091537,32.740952],[114.123085,32.652645],[114.112915,32.471554],[114.142197,32.40974],[114.151581,32.26907],[114.190193,32.191765],[114.138725,32.199825],[114.127716,32.141857],[114.074539,32.123806]]},type:"Feature",properties:{destinationid:"411500",id:165,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761108,38.353519],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.822853,34.935314],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801331,34.315292],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.891953,33.959686],[114.05085,33.762688],[114.123146,33.553974],[114.091064,33.432098],[114.095428,33.226856],[114.083076,33.174541],[114.100594,33.013348],[114.051994,33.011787],[114.052483,32.98708],[114.025314,32.980251]]},type:"Feature",properties:{destinationid:"411700",id:166,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.420349,35.995926],[114.38707,35.882088],[114.331306,35.793156],[114.316132,35.72345],[114.218086,35.598866],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[114.008476,35.334949],[113.862633,35.382282],[113.778343,35.369736],[113.718536,35.329739],[113.620148,35.302174],[113.483566,35.206417],[113.410522,35.193336],[113.30439,35.143337],[113.023354,35.099144],[112.935539,35.048347],[112.593513,35.075264],[112.590981,35.09024]]},type:"Feature",properties:{destinationid:"419001",id:167,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089241,31.240177],[114.064453,30.978703],[114.192276,30.912743],[114.238037,30.837282],[114.30677,30.765686],[114.313904,30.713888],[114.285828,30.632231],[114.34304,30.59004],[114.322151,30.571175],[114.298317,30.584116]]},type:"Feature",properties:{destinationid:"420100",id:168,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890976,34.061535],[113.889778,33.96283],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.724968,33.123791],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.213921,32.538914],[112.120071,32.451649],[112.134239,32.373322],[112.108505,32.313568],[112.104401,32.195393],[111.843521,32.262959],[111.674042,32.276997],[111.608513,32.306965],[111.472679,32.328533],[111.3965,32.389301],[111.387337,32.412872],[111.316322,32.455925],[111.265755,32.456234],[111.184967,32.499195],[111.014282,32.529362],[110.952507,32.580269],[110.846176,32.627808],[110.816452,32.661407],[110.787735,32.646645]]},type:"Feature",properties:{destinationid:"420300",id:169,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890045,33.963284],[113.781593,33.95705],[113.599297,33.863266],[113.553093,33.813965],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.279678,33.460529],[113.228127,33.370686],[113.066551,33.285999],[112.962578,33.263626],[112.73645,33.133507],[112.675591,33.057159],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.24617,32.598045],[112.214661,32.539764],[112.116798,32.443581],[112.134026,32.37072],[112.108711,32.314651],[112.107368,32.203949],[112.077629,32.095646],[112.133987,32.08923],[112.144073,32.04245]]},type:"Feature",properties:{destinationid:"420600",id:170,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.270493,30.926512],[112.223007,30.700382],[112.209091,30.477573],[112.257759,30.387951],[112.23806,30.326941]]},type:"Feature",properties:{destinationid:"421000",id:171,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496521,34.809299],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773384,33.631229],[114.81913,33.481537],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949509,32.03751],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878151,30.756042],[114.91671,30.66506],[114.995186,30.566597],[114.950714,30.49296],[114.915466,30.463997],[114.921547,30.391346],[114.890594,30.396448]]},type:"Feature",properties:{destinationid:"420700",id:172,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.760765,38.352306],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.822685,34.93399],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.239531],[114.082764,31.073885],[114.054405,30.929762],[113.926643,30.92668]]},type:"Feature",properties:{destinationid:"420900",id:173,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761841,38.355289],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890045,33.963284],[113.780174,33.956554],[113.582321,33.848877],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.213921,32.538914],[112.11937,32.450497],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.29866,31.240768],[112.266685,31.08032],[112.274323,31.035191],[112.232704,31.045876],[112.204201,31.035959]]},type:"Feature",properties:{destinationid:"420800",id:174,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761841,38.355289],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890045,33.963284],[113.780174,33.956554],[113.582321,33.848877],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.2556,32.607422],[112.214661,32.539764],[112.117584,32.446537],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352608,31.363224],[112.344002,31.287214],[112.298508,31.240061],[112.266685,31.08032],[112.269852,30.953077],[112.103172,30.902],[111.862793,30.78091],[111.5756,30.737356],[111.490616,30.66588],[111.436142,30.588451],[111.370796,30.632782],[111.330444,30.719076],[111.291008,30.702929]]},type:"Feature",properties:{destinationid:"420500",id:175,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761345,38.35416],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890121,33.963547],[113.781593,33.95705],[113.601219,33.864799],[113.553093,33.813965],[113.462578,33.644131],[113.435181,33.624767],[113.470215,33.597126],[113.434273,33.323719],[113.446861,33.059479],[113.471207,32.952473],[113.452904,32.88308],[113.492065,32.778828],[113.473648,32.638847],[113.505524,32.564175],[113.473404,32.375423],[113.502731,32.312954],[113.403557,32.200211],[113.389732,32.122639],[113.399742,32.072239],[113.339119,31.999214],[113.340607,31.868889],[113.322418,31.835655],[113.371574,31.752899],[113.373611,31.717508]]},type:"Feature",properties:{destinationid:"421300",id:176,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496521,34.809299],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773384,33.631229],[114.81913,33.481537],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949509,32.03751],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878151,30.756042],[114.916145,30.665985],[114.97905,30.586302],[114.953949,30.55158],[114.880875,30.534384],[114.879982,30.4475]]},type:"Feature",properties:{destinationid:"421100",id:177,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761108,38.353519],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976242,35.304268],[113.899323,35.063862],[113.831619,34.962048],[113.81839,34.878365],[113.834328,34.83363],[113.814682,34.694416],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308426,31.965984],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.239531],[114.082603,31.072531],[114.040298,30.857687],[114.050179,30.560324],[113.926224,30.528481],[113.862442,30.452547],[113.727966,30.422943],[113.608665,30.372669],[113.584007,30.339422],[113.428673,30.34403],[113.453911,30.364948]]},type:"Feature",properties:{destinationid:"429004",id:178,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.246124,30.31918],[114.291199,30.057354],[114.277733,29.967873],[114.310181,29.929974],[114.329079,29.833555]]},type:"Feature",properties:{destinationid:"421200",id:179,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761841,38.355289],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890045,33.963284],[113.780174,33.956554],[113.582321,33.848877],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.2556,32.607422],[112.214661,32.539764],[112.117584,32.446537],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352608,31.363224],[112.344002,31.287214],[112.298508,31.240061],[112.266685,31.08032],[112.26931,30.952171],[112.103172,30.902],[111.862793,30.78091],[111.5756,30.737356],[111.490616,30.66588],[111.432571,30.583672],[111.251122,30.529682],[111.184647,30.560053],[111.150124,30.552542],[111.012794,30.576771],[110.942001,30.613106],[110.880402,30.59586],[110.798126,30.602341],[110.7379,30.62653],[110.575577,30.625565],[110.302734,30.604813],[110.101334,30.651217],[110.006691,30.590273],[109.894669,30.546406],[109.855232,30.496666],[109.802757,30.462925],[109.748909,30.463455],[109.707695,30.488356],[109.630379,30.452023],[109.565926,30.379887],[109.53698,30.294535],[109.509857,30.274509],[109.487091,30.283024]]},type:"Feature",properties:{destinationid:"422800",id:180,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761345,38.35416],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890121,33.963547],[113.781593,33.95705],[113.601219,33.864799],[113.553093,33.813965],[113.462578,33.644131],[113.435181,33.624767],[113.470215,33.597126],[113.434273,33.323719],[113.446861,33.059479],[113.471207,32.952473],[113.452904,32.88308],[113.492065,32.778828],[113.473648,32.638847],[113.505524,32.564175],[113.473404,32.375423],[113.502647,32.311642],[113.402985,32.198917],[113.389732,32.122639],[113.399742,32.072239],[113.338997,31.998625],[113.340019,31.865879],[113.251778,31.699627],[113.20771,31.65085],[113.21022,31.598598],[113.178749,31.49102],[113.203926,31.380569],[113.249252,31.323042],[113.235466,31.230391],[113.283768,31.147457],[113.297211,31.059566],[113.22007,30.889517],[113.17408,30.847729],[113.13858,30.767473],[113.098679,30.554567],[113.11245,30.472733],[113.091736,30.392292],[113.00399,30.396566],[112.894997,30.373676],[112.897011,30.421671]]},type:"Feature",properties:{destinationid:"429005",id:181,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761108,38.353519],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890121,33.963547],[113.781593,33.95705],[113.601219,33.864799],[113.553093,33.813965],[113.462578,33.644131],[113.435181,33.624767],[113.470215,33.597126],[113.434273,33.323719],[113.446861,33.059479],[113.471207,32.952473],[113.452904,32.88308],[113.492065,32.778828],[113.473648,32.638847],[113.505524,32.564175],[113.473404,32.375423],[113.502647,32.311642],[113.403244,32.199516],[113.389732,32.122639],[113.399742,32.072239],[113.338997,31.998625],[113.339714,31.864941],[113.251778,31.699627],[113.206543,31.647249],[113.21022,31.598598],[113.178925,31.48855],[113.203926,31.380569],[113.249252,31.323042],[113.23558,31.229818],[113.283455,31.148237],[113.299225,31.08358],[113.256493,30.960855],[113.217964,30.88615],[113.17363,30.84701],[113.13858,30.767473],[113.111015,30.630192],[113.132812,30.621006],[113.14209,30.646967],[113.166145,30.65317]]},type:"Feature",properties:{destinationid:"429006",id:182,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496346,34.808033],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819305,33.48027],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.87822,30.754484],[114.919952,30.660292],[115.030624,30.543858],[115.068619,30.459044],[115.136551,30.405733],[115.162186,30.354422],[115.103157,30.259388],[115.025917,30.248493],[115.052505,30.248775],[115.054977,30.229517],[115.077011,30.220564]]},type:"Feature",properties:{destinationid:"420200",id:183,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890976,34.061535],[113.889778,33.96283],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.724968,33.123791],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.213921,32.538914],[112.120071,32.451649],[112.134239,32.373322],[112.108437,32.31316],[112.104729,32.195553],[111.843521,32.262959],[111.674042,32.276997],[111.609642,32.306675],[111.490578,32.326721],[111.447037,32.286289],[111.432701,32.215721],[111.244789,32.093998],[111.225105,32.049072],[111.164337,31.985756],[111.010056,32.041721],[110.846344,32.035851],[110.792786,32.047218],[110.765381,32.079128],[110.71714,32.073883],[110.710045,32.030163],[110.683159,32.01437],[110.697067,31.979645],[110.740799,31.952312],[110.726028,31.899393],[110.672943,31.882526],[110.654518,31.859732],[110.589996,31.884554],[110.556252,31.876539],[110.544495,31.864445],[110.554832,31.838415],[110.510414,31.838642],[110.513733,31.821608],[110.483917,31.808472],[110.477066,31.778433],[110.484818,31.758284],[110.671761,31.745018]]},type:"Feature",properties:{destinationid:"429021",id:184,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761108,38.353519],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976242,35.304268],[113.899323,35.063862],[113.829147,34.955357],[113.817848,34.870144],[113.834328,34.83363],[113.814682,34.694416],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.28344,29.981689],[114.254143,29.923229],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425331,29.352196],[113.258293,29.222149],[113.243095,29.185547],[113.273483,29.052458],[113.251724,28.774944],[113.271408,28.715055],[113.263107,28.622318],[113.18602,28.441431],[113.094223,28.318756],[113.070251,28.232586],[112.98806,28.228867],[112.982307,28.194214]]},type:"Feature",properties:{destinationid:"430100",id:185,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.291229,30.052235],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425331,29.352196],[113.291145,29.257565],[113.248459,29.207062],[113.274818,29.005352],[113.252205,28.79413],[113.271408,28.715055],[113.264496,28.628912],[113.18602,28.441431],[113.088531,28.310425],[113.138336,28.302874],[113.15287,28.285686],[113.179428,28.090378],[113.171974,27.952795],[113.137459,27.880333],[113.17112,27.854111],[113.151352,27.836397]]},type:"Feature",properties:{destinationid:"430200",id:186,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761108,38.353519],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976242,35.304268],[113.899323,35.063862],[113.829147,34.955357],[113.817848,34.870144],[113.834328,34.83363],[113.814682,34.694416],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.28344,29.981689],[114.254143,29.923229],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425331,29.352196],[113.291145,29.257565],[113.250435,29.210455],[113.243416,29.180464],[113.274818,29.005352],[113.252205,28.79413],[113.271408,28.715055],[113.263741,28.624895],[113.193138,28.454586],[113.097557,28.325056],[113.074158,28.268333],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023735,27.852249],[112.944046,27.829741]]},type:"Feature",properties:{destinationid:"430300",id:187,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.259445,32.611191],[112.214661,32.539764],[112.117821,32.447208],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258499,30.3729],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.918663,29.891636],[111.866219,29.835651],[111.825722,29.698288],[111.822243,29.569845],[111.765221,29.445068],[111.782814,29.311525],[111.761856,29.150782],[111.799538,29.056143],[111.770493,28.994944],[111.767319,28.924854],[111.745628,28.901976],[111.781975,28.869236],[111.974251,28.786779],[112.064468,28.719683],[112.166542,28.708082],[112.272408,28.669409],[112.361221,28.614632],[112.369728,28.588671],[112.355064,28.570065]]},type:"Feature",properties:{destinationid:"430900",id:188,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761108,38.353519],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890121,33.963547],[113.781593,33.95705],[113.601219,33.864799],[113.553093,33.813965],[113.462578,33.644131],[113.435165,33.62468],[113.470215,33.597126],[113.434273,33.323719],[113.446861,33.059479],[113.471207,32.952473],[113.452904,32.88308],[113.492065,32.778828],[113.473648,32.638847],[113.505524,32.564175],[113.473404,32.375423],[113.502701,32.312336],[113.402985,32.198917],[113.389732,32.122639],[113.399742,32.072239],[113.338997,31.998625],[113.340019,31.865879],[113.251778,31.699627],[113.20771,31.65085],[113.21022,31.598598],[113.178894,31.492592],[113.203926,31.380569],[113.249405,31.322409],[113.235725,31.229258],[113.283455,31.148237],[113.299248,31.084375],[113.256493,30.960855],[113.217964,30.88615],[113.17363,30.84701],[113.13858,30.767473],[113.098503,30.552979],[113.112198,30.470434],[113.039787,30.204203],[113.035194,29.879774],[113.119019,29.671618],[113.243256,29.522821],[113.170784,29.442263],[113.183357,29.403646],[113.132851,29.370283]]},type:"Feature",properties:{destinationid:"430600",id:189,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258331,30.371349],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.918663,29.891636],[111.86747,29.838867],[111.825722,29.698288],[111.822243,29.569845],[111.765221,29.445068],[111.782814,29.312145],[111.778999,29.206827],[111.761719,29.155855],[111.771973,29.105934],[111.692009,29.040173]]},type:"Feature",properties:{destinationid:"430700",id:190,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.259445,32.611191],[112.214661,32.539764],[112.117874,32.447346],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258331,30.371349],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.147949,30.038446],[112.113914,30.004814],[112.030052,29.979002],[111.996086,29.935799],[111.874657,29.850008],[111.827217,29.70536],[111.822418,29.570591],[111.763046,29.418234],[111.782814,29.311525],[111.761917,29.150156],[111.799286,29.053497],[111.770493,28.994944],[111.766426,28.922586],[111.715607,28.855843],[111.67984,28.710005],[111.679581,28.656199],[111.716743,28.578684],[111.717468,28.528954],[111.763565,28.43469],[111.771179,28.37608],[111.754745,28.340418],[111.718445,28.320698],[111.715874,28.255226],[111.659164,28.179932],[111.684128,28.134527],[111.752319,28.088547],[111.81041,28.005146],[111.782318,27.886658],[111.796486,27.864428],[111.747398,27.808821],[111.741852,27.746258],[111.717232,27.718502],[111.722916,27.633183],[111.650993,27.57395],[111.613869,27.48575],[111.561234,27.466156],[111.591042,27.357405],[111.554382,27.272076],[111.469307,27.237614]]},type:"Feature",properties:{destinationid:"430500",id:191,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761108,38.353519],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976242,35.304268],[113.899323,35.063862],[113.829147,34.955357],[113.817848,34.870144],[113.834328,34.83363],[113.814682,34.694416],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277794,30.18664],[114.291321,30.055529],[114.283226,29.980482],[114.254143,29.923229],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425331,29.352196],[113.291145,29.257565],[113.248856,29.2078],[113.273483,29.052458],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.030464,27.363203],[112.887535,27.207891],[112.837273,26.988958],[112.763092,26.962023],[112.633873,26.960213],[112.607742,26.90036]]},type:"Feature",properties:{destinationid:"430400",id:192,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258499,30.3729],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.918663,29.891636],[111.866798,29.837282],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761635,29.147879],[111.706238,29.126894],[111.57206,29.116772],[111.541481,29.174622],[111.125763,29.439974],[111.002808,29.379959],[110.902367,29.363319],[110.887672,29.338612],[110.719017,29.255152],[110.548653,29.124605],[110.503021,29.113447],[110.47982,29.127222]]},type:"Feature",properties:{destinationid:"430800",id:193,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823753,34.939735],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.291229,30.052235],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.244926,29.198378],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.823929,26.863853],[112.939369,26.597509],[112.883804,26.384905],[112.878647,26.212309],[112.920464,26.114162],[113.024559,26.025915],[113.073906,25.92878],[113.085274,25.800247],[113.057228,25.767422],[113.031929,25.793602]]},type:"Feature",properties:{destinationid:"431000",id:194,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258499,30.3729],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.918663,29.891636],[111.866798,29.837282],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761635,29.147879],[111.706238,29.126894],[111.570686,29.114363],[111.581841,28.968706],[111.626389,28.94026],[111.616051,28.917187],[111.5756,28.869549],[111.520889,28.840382],[111.454109,28.759298],[111.384933,28.730265],[111.269531,28.649258],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.533096,28.430595],[110.450775,28.411011],[110.318726,28.279995],[110.24688,28.155195],[110.253113,28.119226],[110.231277,28.0951],[110.210388,27.966436],[110.192261,27.955418],[110.21859,27.912031],[110.222427,27.851862],[110.16539,27.803503],[110.15799,27.731533],[110.094208,27.639835],[110.014359,27.606493],[110.009262,27.560295],[109.978729,27.549791]]},type:"Feature",properties:{destinationid:"431200",id:195,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258499,30.3729],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.918663,29.891636],[111.866798,29.837282],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761635,29.147879],[111.706238,29.126894],[111.570686,29.114363],[111.581841,28.968706],[111.626389,28.94026],[111.616051,28.917187],[111.5756,28.869549],[111.520889,28.840382],[111.454109,28.759298],[111.384933,28.730265],[111.267952,28.648512],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.304115,28.273903],[110.121368,28.252474],[110.008415,28.268202],[109.952011,28.253191],[109.872406,28.27371],[109.81411,28.256029],[109.787544,28.260422],[109.739792,28.314484]]},type:"Feature",properties:{destinationid:"433100",id:196,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.259445,32.611191],[112.214661,32.539764],[112.117821,32.447208],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270332,31.609617],[112.299049,31.504526],[112.341728,31.431885],[112.35321,31.348129],[112.343544,31.286297],[112.299232,31.242905],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209671,30.472473],[112.254776,30.398233],[112.255707,30.358511],[112.22467,30.326097],[112.214996,30.267591],[112.184708,30.221666],[112.145538,30.034973],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.868683,29.841454],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761856,29.150782],[111.799385,29.054232],[111.770493,28.994944],[111.766945,28.92382],[111.718178,28.86174],[111.69175,28.782059],[111.678841,28.661804],[111.716888,28.578215],[111.718109,28.526953],[111.76371,28.434244],[111.771217,28.376524],[111.754745,28.340418],[111.718445,28.320698],[111.715874,28.255226],[111.659164,28.17914],[111.684723,28.133902],[111.753571,28.087263],[111.81041,28.005146],[111.782318,27.886658],[111.796303,27.863401],[111.740028,27.789854],[111.741852,27.746258],[111.716866,27.716549],[111.722023,27.631804],[111.650993,27.57395],[111.613869,27.48575],[111.512955,27.421375],[111.480598,27.372444],[111.411026,27.335169],[111.360222,27.256193],[111.370445,27.061449],[111.338646,26.942924],[111.353203,26.876511],[111.468033,26.748625],[111.491066,26.677023],[111.583466,26.530951],[111.580765,26.480478],[111.597801,26.480387],[111.608032,26.434622]]},type:"Feature",properties:{destinationid:"431100",id:197,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.291199,30.057354],[114.281105,29.973005],[114.25309,29.922052],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425331,29.352196],[113.258293,29.222149],[113.243103,29.184683],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.187218,28.443602],[113.091309,28.313196],[112.965607,28.327555],[112.923561,28.29974],[112.866409,28.297674],[112.851273,28.237291],[112.762657,28.24511],[112.755554,28.059786],[112.613235,28.04928],[112.470116,27.991745],[112.314522,27.964783],[112.236023,27.920885],[112.063248,27.885786],[111.998657,27.849463],[112.008499,27.728165]]},type:"Feature",properties:{destinationid:"431300",id:198,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.82386,26.86157],[112.939369,26.597509],[112.883698,26.384108],[112.870575,26.261349],[112.885193,26.184822],[112.922096,26.112089],[113.028641,26.020599],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.95649,25.328949],[112.984314,25.279259],[113.036743,25.244768],[113.07579,25.228758],[113.123474,25.234804],[113.150185,25.20112],[113.252533,25.174744],[113.31546,25.113934],[113.33741,25.04908],[113.386208,25.02239],[113.419891,24.897886],[113.440971,24.883766],[113.562805,24.872089],[113.556442,24.851635],[113.589531,24.822432],[113.591537,24.800751]]},type:"Feature",properties:{destinationid:"440200",id:199,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172623,23.893572],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.263351,23.196125],[113.250198,23.175694],[113.248634,23.146212],[113.28125,23.142054],[113.280632,23.125147]]},type:"Feature",properties:{destinationid:"440100",id:200,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.70256,37.794323],[115.799278,37.724159],[115.802887,37.7062],[115.781403,37.653046],[115.631683,37.480488],[115.481812,37.152451],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136719,36.089344],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.629204,35.230801],[114.605591,35.188057],[114.583748,35.075737],[114.518303,34.93639],[114.491623,34.68362],[114.519287,34.471203],[114.551636,34.37315],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.604103,33.944477],[114.656815,33.784679],[114.773384,33.631229],[114.819305,33.48027],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.893974,30.920433],[114.8797,30.745974],[114.940857,30.63122],[115.033348,30.540159],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.763412,30.026253],[115.915405,30.026793],[115.964523,29.906767],[115.981903,29.809978],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.87355,29.481152],[115.819031,29.427299],[115.775513,29.407656],[115.756508,29.371138],[115.750824,29.318676],[115.769447,29.216211],[115.759872,29.157713],[115.777306,29.048706],[115.871254,28.836245],[116.045494,28.789955],[116.088219,28.699682],[116.071487,28.609695],[116.083313,28.428064],[116.178696,28.31638],[116.188072,28.263325],[116.237175,28.206129],[116.277786,28.054449],[116.357162,27.901197],[116.504829,27.760759],[116.599281,27.638195],[116.612335,27.535761],[116.651443,27.509071],[116.567482,27.196333],[116.531952,27.1621],[116.511406,27.07357],[116.403664,26.958824],[116.351929,26.839302],[116.353539,26.690689],[116.339073,26.660568],[116.349022,26.586744],[116.314117,26.471727],[116.284569,26.429218],[116.167152,26.356428],[116.097458,26.106089],[115.968399,25.898306],[115.979919,25.795591],[115.907616,25.730833],[115.803284,25.562445],[115.79055,25.485342],[115.800789,25.410984],[115.766647,25.33112],[115.749237,25.144089],[115.765396,25.076376],[115.754608,25.009197],[115.765419,24.920702],[115.722755,24.811693],[115.735107,24.791285],[115.835716,24.735733],[115.851479,24.680906],[115.841362,24.611467],[115.875153,24.567709],[115.885254,24.572392],[115.910294,24.515314],[115.990463,24.456631],[115.998177,24.39625],[116.034241,24.3997],[116.08905,24.339956],[116.053177,24.272469],[116.079376,24.209791],[116.07473,24.121584],[116.007019,24.023043],[116.020142,23.962952],[116.115639,23.850985],[116.140175,23.763424],[116.201805,23.695807],[116.253113,23.686722],[116.343948,23.60603],[116.482025,23.610512],[116.549461,23.550747],[116.620949,23.454136],[116.691566,23.425838],[116.681435,23.384466],[116.708344,23.370964]]},type:"Feature",properties:{destinationid:"440500",id:201,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496346,34.808033],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878601,30.750912],[114.919952,30.660292],[115.030624,30.543858],[115.068619,30.459044],[115.136551,30.405733],[115.162735,30.35174],[115.103157,30.259388],[115.002777,30.249298],[114.948318,30.209719],[114.91597,30.162458],[114.911446,30.044645],[114.883934,29.92588],[114.893356,29.891024],[114.965057,29.826233],[114.946144,29.742277],[114.953377,29.613199],[114.846146,29.498537],[114.850098,29.45006],[114.830917,29.415474],[114.853897,29.36302],[114.796631,29.177431],[114.602524,28.980005],[114.585754,28.943325],[114.609634,28.854782],[114.643692,28.806808],[114.640579,28.679085],[114.719673,28.634089],[114.842041,28.407782],[114.845459,28.11062],[114.821419,28.079922],[114.832962,28.011457],[114.797188,27.814409],[114.798958,27.783289],[114.842026,27.735929],[114.847954,27.665621],[114.785873,27.608507],[114.798149,27.551193],[114.77137,27.433142],[114.860489,27.233511],[114.894768,27.102053],[114.856705,27.048529],[114.85585,26.946627],[114.79718,26.758755],[114.727058,26.689562],[114.65007,26.545601],[114.672691,26.402822],[114.696907,26.354254],[114.671722,26.32383],[114.651039,26.206146],[114.675713,26.167696],[114.670319,26.118355],[114.69426,26.074036],[114.682663,25.997309],[114.77063,25.829258],[114.7948,25.740965],[114.785843,25.553392],[114.820999,25.516731],[114.869629,25.505192],[114.872124,25.402916],[114.892937,25.352722],[114.874184,25.27072],[114.896629,25.133537],[114.88176,25.032539],[114.90406,24.976753],[114.889435,24.897617],[114.963776,24.772009],[114.977341,24.617235],[114.913956,24.502678],[114.91127,24.459208],[114.93367,24.399139],[114.894753,24.288565],[114.78714,24.154417],[114.820175,23.941675],[114.795769,23.855333],[114.678207,23.779127],[114.667572,23.66968],[114.61158,23.573111],[114.544579,23.533037],[114.519928,23.49214],[114.488121,23.298042],[114.328522,23.124228],[114.333572,23.024448],[114.349281,23.006258],[114.307014,22.934441],[114.344719,22.850655],[114.31382,22.724987],[114.253494,22.705408],[114.173203,22.646147],[114.093651,22.629814],[114.104027,22.568897],[114.085945,22.546991]]},type:"Feature",properties:{destinationid:"440300",id:202,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.290009,29.256588],[113.244392,29.196411],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.823959,26.85812],[112.939369,26.597509],[112.883698,26.384108],[112.870575,26.261349],[112.885399,26.184057],[112.922096,26.112089],[113.028641,26.020599],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.569893,24.638601],[113.579727,24.598387],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295181,23.576975],[113.319077,23.519758],[113.310852,23.460434],[113.239502,23.493862],[113.060524,23.441431],[112.995865,23.445574],[112.923431,23.386528],[112.765137,23.321112],[112.727043,23.277655],[112.681732,23.275068],[112.594353,23.227465],[112.560364,23.189362],[112.559982,23.160036],[112.509033,23.12291],[112.515808,23.110338],[112.472427,23.05143]]},type:"Feature",properties:{destinationid:"441200",id:203,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247963,29.206089],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.978531,27.294636],[112.900703,27.230204],[112.852806,27.084167],[112.824615,26.852934],[112.939461,26.595856],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.032181,26.014891],[113.074074,25.928282],[113.088615,25.835651],[113.059341,25.756207],[113.06488,25.72331],[113.034294,25.608278],[113.045197,25.55756],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.173035,23.89526],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.31958,23.515564],[113.310905,23.457569],[113.276726,23.394926],[113.253548,23.164675],[113.20829,23.16383],[113.13903,23.131453],[113.104149,23.070169],[113.109901,23.048155],[113.124718,23.048101],[113.122223,23.028698]]},type:"Feature",properties:{destinationid:"440600",id:204,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.843834,27.029039],[112.824898,26.851484],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.032181,26.014891],[113.074074,25.928282],[113.088615,25.835651],[113.059341,25.756207],[113.06488,25.72331],[113.034294,25.608278],[113.045197,25.55756],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579819,24.600504],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.31958,23.515564],[113.310905,23.457569],[113.276726,23.394926],[113.253548,23.164675],[113.20829,23.16383],[113.139618,23.132023],[113.102417,23.064987],[113.059906,23.031147],[113.037193,22.957314],[113.026367,22.794044],[112.998123,22.757627],[112.981384,22.689457],[112.998344,22.632837],[113.024292,22.617231],[113.05423,22.564213],[113.063126,22.557386],[113.094315,22.590693]]},type:"Feature",properties:{destinationid:"440700",id:205,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.822952,34.935974],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.82386,26.86157],[112.939369,26.597509],[112.883698,26.384108],[112.870575,26.261349],[112.885193,26.184822],[112.922096,26.112089],[113.028641,26.020599],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.57959,24.602726],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307678,24.070898],[113.275299,24.014883],[113.215485,23.964371],[113.173508,23.896658],[113.168007,23.858585],[113.178299,23.793186],[113.220993,23.721771],[113.244087,23.609617],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253571,23.164745],[113.207611,23.16362],[113.197784,23.146645],[113.207634,23.067322],[113.227028,23.0494],[113.22509,22.995064],[113.253479,22.965092],[113.278389,22.874075],[113.335526,22.805283],[113.308243,22.703421],[113.330757,22.596703],[113.288055,22.53384],[113.281548,22.497831],[113.34848,22.429991],[113.361328,22.349676],[113.419769,22.32122],[113.431686,22.256111],[113.461479,22.232851],[113.464279,22.208776],[113.529877,22.234135],[113.553513,22.224945]]},type:"Feature",properties:{destinationid:"440400",id:206,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496346,34.808033],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878601,30.750912],[114.919952,30.660292],[115.031746,30.542431],[115.068619,30.459044],[115.136551,30.405733],[115.162758,30.351238],[115.103157,30.259388],[115.002777,30.249298],[114.948318,30.209719],[114.91597,30.162458],[114.911446,30.044645],[114.883934,29.92588],[114.893356,29.891024],[114.965057,29.826233],[114.946144,29.742277],[114.953377,29.613199],[114.846146,29.498537],[114.850098,29.45006],[114.830917,29.415474],[114.853897,29.36302],[114.796631,29.177431],[114.602524,28.980005],[114.585892,28.944973],[114.609634,28.854782],[114.643692,28.806808],[114.640579,28.679085],[114.719673,28.634089],[114.842041,28.407782],[114.845459,28.11062],[114.821419,28.079922],[114.832962,28.011457],[114.797188,27.814409],[114.798958,27.783289],[114.842026,27.735929],[114.847954,27.665621],[114.785873,27.608507],[114.798149,27.551193],[114.77137,27.433142],[114.860489,27.233511],[114.894768,27.102053],[114.856705,27.048529],[114.85585,26.946627],[114.79718,26.758755],[114.727058,26.689562],[114.65007,26.545601],[114.672691,26.402822],[114.696907,26.354254],[114.671722,26.32383],[114.651039,26.206146],[114.675713,26.167696],[114.670319,26.118355],[114.69426,26.074036],[114.682663,25.997309],[114.77063,25.829258],[114.7948,25.740965],[114.785843,25.553392],[114.820999,25.516731],[114.869629,25.505192],[114.872124,25.402916],[114.892937,25.352722],[114.874184,25.27072],[114.896629,25.133537],[114.88176,25.032539],[114.90406,24.976753],[114.889435,24.897617],[114.963776,24.772009],[114.977341,24.617235],[114.913956,24.502678],[114.91127,24.459208],[114.93367,24.399139],[114.894753,24.288565],[114.78714,24.154417],[114.815674,23.907652],[114.792503,23.850765],[114.678711,23.779886],[114.667572,23.66968],[114.61158,23.573111],[114.544579,23.533037],[114.520691,23.493767],[114.488785,23.299553],[114.41375,23.210682],[114.429306,23.088902],[114.412605,23.079384]]},type:"Feature",properties:{destinationid:"441300",id:207,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.20829,23.16383],[113.140175,23.1325],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.504219,21.700346],[111.458786,21.679857],[111.310852,21.645706],[111.18734,21.661776],[110.970634,21.6168],[110.918976,21.659748]]},type:"Feature",properties:{destinationid:"440900",id:208,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.70256,37.794323],[115.799278,37.724159],[115.802887,37.7062],[115.781403,37.653046],[115.631683,37.480488],[115.481812,37.152451],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136719,36.089344],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.629204,35.230801],[114.605591,35.188057],[114.583748,35.075737],[114.518303,34.93639],[114.491661,34.687054],[114.519287,34.471203],[114.551849,34.371399],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.604103,33.944477],[114.656815,33.784679],[114.773384,33.631229],[114.819305,33.48027],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.893974,30.920433],[114.8797,30.745974],[114.940857,30.63122],[115.033348,30.540159],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.763412,30.026253],[115.915405,30.026793],[115.964523,29.906767],[115.981903,29.809978],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.87355,29.481152],[115.819031,29.427299],[115.775513,29.407656],[115.756508,29.371138],[115.750824,29.318676],[115.769447,29.216211],[115.759872,29.157713],[115.777306,29.048706],[115.871254,28.836245],[116.045494,28.789955],[116.088219,28.699682],[116.071487,28.609695],[116.083313,28.428064],[116.178696,28.31638],[116.188072,28.263325],[116.237175,28.206129],[116.277786,28.054449],[116.357162,27.901197],[116.504829,27.760759],[116.599281,27.638195],[116.612335,27.535761],[116.651443,27.509071],[116.567482,27.196333],[116.531952,27.1621],[116.511406,27.07357],[116.403664,26.958824],[116.351929,26.839302],[116.353539,26.690689],[116.339073,26.660568],[116.349022,26.586744],[116.314117,26.471727],[116.284569,26.429218],[116.167152,26.356428],[116.097458,26.106089],[115.968399,25.898306],[115.979919,25.795591],[115.906845,25.729795],[115.888206,25.683628],[115.841019,25.638588],[115.799812,25.546793],[115.800789,25.410984],[115.766647,25.33112],[115.753242,25.202883],[115.760658,25.089197],[115.833923,25.1049],[115.977364,25.077509],[116.000694,25.041679],[116.109375,25.058954],[116.221123,25.03302],[116.229637,24.895395],[116.186562,24.824768],[116.183952,24.652145],[116.158501,24.594336],[116.188072,24.451645],[116.135567,24.376766],[116.117912,24.29948]]},type:"Feature",properties:{destinationid:"441400",id:209,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253571,23.164745],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.387878,21.387783],[110.365288,21.320534],[110.378311,21.27404],[110.364944,21.274736]]},type:"Feature",properties:{destinationid:"440800",id:210,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496056,34.804634],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878601,30.750912],[114.919952,30.660292],[115.031746,30.542431],[115.068619,30.459044],[115.136551,30.405733],[115.162758,30.351238],[115.103157,30.259388],[115.002777,30.249298],[114.948318,30.209719],[114.91597,30.162458],[114.911446,30.044645],[114.883934,29.92588],[114.893356,29.891024],[114.965057,29.826233],[114.946144,29.742277],[114.953377,29.613199],[114.846146,29.498537],[114.850098,29.45006],[114.830917,29.415474],[114.853897,29.36302],[114.796631,29.177431],[114.602524,28.980005],[114.585754,28.943325],[114.609634,28.854782],[114.643692,28.806808],[114.640579,28.679085],[114.719673,28.634089],[114.842041,28.407782],[114.845459,28.11062],[114.821419,28.079922],[114.832962,28.011457],[114.797188,27.814409],[114.798958,27.783289],[114.842026,27.735929],[114.847954,27.665621],[114.785873,27.608507],[114.798149,27.551193],[114.77137,27.433142],[114.860489,27.233511],[114.894768,27.102053],[114.856705,27.048529],[114.85585,26.946627],[114.79718,26.758755],[114.727058,26.689562],[114.65007,26.545601],[114.672691,26.402822],[114.696907,26.354254],[114.671722,26.32383],[114.651039,26.206146],[114.675713,26.167696],[114.670319,26.118355],[114.69426,26.074036],[114.682663,25.997309],[114.77063,25.829258],[114.7948,25.740965],[114.785843,25.553392],[114.820999,25.516731],[114.869629,25.505192],[114.872124,25.402916],[114.892937,25.352722],[114.874184,25.27072],[114.896629,25.133537],[114.88176,25.032539],[114.90406,24.976753],[114.889435,24.897617],[114.963776,24.772009],[114.97731,24.616545],[114.913956,24.502678],[114.91127,24.459208],[114.93367,24.399139],[114.894753,24.288565],[114.78714,24.154417],[114.820175,23.941675],[114.795921,23.855694],[114.678207,23.779127],[114.667572,23.66968],[114.61158,23.573111],[114.544579,23.533037],[114.519928,23.49214],[114.488121,23.298042],[114.440941,23.234617],[114.385269,23.202665],[114.565742,23.175716],[114.586266,23.100538],[114.633896,23.044956],[114.656593,22.910547],[114.679253,22.861692],[114.742493,22.866585],[114.779984,22.887636],[114.862984,22.885738],[114.901047,22.844549],[115.013939,22.811626],[115.091202,22.798676],[115.22287,22.834414],[115.364433,22.774523]]},type:"Feature",properties:{destinationid:"441500",id:211,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.702232,37.795357],[115.802437,37.720703],[115.786499,37.662045],[115.631683,37.480488],[115.480423,37.150391],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242554,36.87545],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136337,36.088249],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.628113,35.226326],[114.605591,35.188057],[114.556946,34.999207],[114.519218,34.939739],[114.496346,34.808033],[114.503372,34.560898],[114.551353,34.375038],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.603905,33.945225],[114.656815,33.784679],[114.773918,33.630077],[114.819389,33.479408],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.894196,30.921785],[114.878601,30.750912],[114.919952,30.660292],[115.031746,30.542431],[115.068619,30.459044],[115.136551,30.405733],[115.162758,30.351238],[115.103157,30.259388],[115.002777,30.249298],[114.948318,30.209719],[114.91597,30.162458],[114.911446,30.044645],[114.883934,29.92588],[114.893356,29.891024],[114.965057,29.826233],[114.946144,29.742277],[114.953377,29.613199],[114.846146,29.498537],[114.850098,29.45006],[114.830917,29.415474],[114.853897,29.36302],[114.796631,29.177431],[114.602524,28.980005],[114.585808,28.944139],[114.609634,28.854782],[114.643692,28.806808],[114.640579,28.679085],[114.719673,28.634089],[114.842041,28.407782],[114.845459,28.11062],[114.821419,28.079922],[114.832962,28.011457],[114.797188,27.814409],[114.798958,27.783289],[114.842026,27.735929],[114.847954,27.665621],[114.785873,27.608507],[114.798149,27.551193],[114.77137,27.433142],[114.860489,27.233511],[114.894768,27.102053],[114.856705,27.048529],[114.85585,26.946627],[114.79718,26.758755],[114.727058,26.689562],[114.65007,26.545601],[114.672691,26.402822],[114.696907,26.354254],[114.671722,26.32383],[114.651039,26.206146],[114.675713,26.167696],[114.670319,26.118355],[114.69426,26.074036],[114.682663,25.997309],[114.77063,25.829258],[114.7948,25.740965],[114.785843,25.553392],[114.820999,25.516731],[114.869629,25.505192],[114.872124,25.402916],[114.892937,25.352722],[114.874184,25.27072],[114.896629,25.133537],[114.88176,25.032539],[114.90406,24.976753],[114.889435,24.897617],[114.963287,24.773565],[114.977348,24.618019],[114.913956,24.502678],[114.91127,24.459208],[114.93367,24.399139],[114.894753,24.288565],[114.78714,24.154417],[114.815674,23.907652],[114.792503,23.850765],[114.679314,23.78071],[114.673492,23.751675],[114.697243,23.746258]]},type:"Feature",properties:{destinationid:"441600",id:212,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823753,34.939735],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.823883,26.862574],[112.939369,26.597509],[112.883698,26.384108],[112.870575,26.261349],[112.885193,26.184822],[112.922096,26.112089],[113.028641,26.020599],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.569893,24.638601],[113.579674,24.597969],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.173241,23.895943],[113.178062,23.793888],[113.220642,23.722826],[113.246613,23.604513],[113.292068,23.580069],[113.30677,23.554688],[113.31958,23.516979],[113.311371,23.459318],[113.276726,23.394926],[113.253548,23.164675],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.058907,23.029112],[113.036873,22.955542],[113.026367,22.794044],[112.998123,22.757627],[112.985229,22.692974],[112.914825,22.647114],[112.846313,22.509048],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.351303,22.288507],[112.279251,22.20046],[112.257706,22.132751],[112.222221,22.101818],[112.221245,22.063576],[112.194489,22.014969],[112.027687,21.928841],[112.039635,21.894194],[111.975105,21.859222]]},type:"Feature",properties:{destinationid:"441700",id:213,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.291229,30.052235],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.290009,29.256588],[113.243919,29.194288],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.823959,26.85812],[112.939369,26.597509],[112.883698,26.384108],[112.870575,26.261349],[112.885399,26.184057],[112.922096,26.112089],[113.028641,26.020599],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.569893,24.638601],[113.579796,24.599062],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375237,24.320337],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.173241,23.895943],[113.17981,23.789213],[113.142479,23.749762],[113.060966,23.736324],[113.038498,23.707172],[113.051292,23.684978]]},type:"Feature",properties:{destinationid:"441800",id:214,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.822952,34.935974],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.82386,26.86157],[112.939369,26.597509],[112.883698,26.384108],[112.870575,26.261349],[112.885193,26.184822],[112.922096,26.112089],[113.028641,26.020599],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295181,23.576975],[113.319389,23.51852],[113.310905,23.457569],[113.276855,23.395515],[113.272034,23.30872],[113.442619,23.245424],[113.483353,23.213373],[113.48838,23.147457],[113.562233,23.126221],[113.682655,23.009489],[113.746101,23.046467]]},type:"Feature",properties:{destinationid:"441900",id:215,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.823883,26.862574],[112.939369,26.597509],[112.883698,26.384108],[112.870575,26.261349],[112.885193,26.184822],[112.922096,26.112089],[113.028641,26.020599],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307678,24.070898],[113.275299,24.014883],[113.215485,23.964371],[113.173508,23.896658],[113.168007,23.858585],[113.178299,23.793186],[113.220993,23.721771],[113.244087,23.609617],[113.295181,23.576975],[113.319389,23.51852],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.200684,23.158621],[113.197464,23.111212],[113.210487,23.058485],[113.227028,23.0494],[113.224823,22.995783],[113.253479,22.965092],[113.273529,22.883316],[113.334541,22.80991],[113.336243,22.783237],[113.310539,22.741697],[113.308212,22.66172],[113.32991,22.600582],[113.396385,22.59066],[113.382553,22.521193]]},type:"Feature",properties:{destinationid:"442000",id:216,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.70256,37.794323],[115.799278,37.724159],[115.802887,37.7062],[115.781403,37.653046],[115.631683,37.480488],[115.481812,37.152451],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136719,36.089344],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.629204,35.230801],[114.605591,35.188057],[114.583748,35.075737],[114.518303,34.93639],[114.491623,34.683838],[114.519287,34.471203],[114.551636,34.37315],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.604103,33.944477],[114.656815,33.784679],[114.773384,33.631229],[114.819305,33.48027],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.893974,30.920433],[114.8797,30.745974],[114.940857,30.63122],[115.033348,30.540159],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.763412,30.026253],[115.915405,30.026793],[115.964523,29.906767],[115.981903,29.809978],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.87355,29.481152],[115.819031,29.427299],[115.775513,29.407656],[115.756508,29.371138],[115.750824,29.318676],[115.769447,29.216211],[115.759872,29.157713],[115.777306,29.048706],[115.871254,28.836245],[116.045494,28.789955],[116.088219,28.699682],[116.071487,28.609695],[116.083313,28.428064],[116.178696,28.31638],[116.188072,28.263325],[116.237175,28.206129],[116.277786,28.054449],[116.357162,27.901197],[116.504829,27.760759],[116.599281,27.638195],[116.612335,27.535761],[116.651443,27.509071],[116.567482,27.196333],[116.531952,27.1621],[116.511406,27.07357],[116.403664,26.958824],[116.351929,26.839302],[116.353539,26.690689],[116.339073,26.660568],[116.349022,26.586744],[116.314117,26.471727],[116.284569,26.429218],[116.167152,26.356428],[116.097458,26.106089],[115.968399,25.898306],[115.979919,25.795591],[115.907616,25.730833],[115.803284,25.562445],[115.79055,25.485342],[115.800789,25.410984],[115.766647,25.33112],[115.749237,25.144089],[115.765396,25.076376],[115.754608,25.009197],[115.765419,24.920702],[115.722755,24.811693],[115.735107,24.791285],[115.835716,24.735733],[115.851479,24.680906],[115.841362,24.611467],[115.875153,24.567709],[115.885254,24.572392],[115.910294,24.515314],[115.990463,24.456631],[115.998177,24.39625],[116.034241,24.3997],[116.08905,24.339956],[116.053177,24.272469],[116.079254,24.210405],[116.081177,24.146793],[116.007095,24.023485],[116.016693,23.969076],[116.115456,23.851316],[116.140915,23.762383],[116.202637,23.695173],[116.252296,23.687231],[116.314713,23.631615],[116.303879,23.610506],[116.332664,23.59553],[116.355751,23.543743]]},type:"Feature",properties:{destinationid:"445200",id:217,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823753,34.939735],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.823883,26.862574],[112.939369,26.597509],[112.883698,26.384108],[112.870575,26.261349],[112.885193,26.184822],[112.922096,26.112089],[113.028641,26.020599],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.569893,24.638601],[113.579605,24.59749],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295181,23.576975],[113.319077,23.519758],[113.310799,23.460365],[113.239502,23.493862],[113.060524,23.441431],[113.000153,23.447163],[112.923431,23.386528],[112.765137,23.321112],[112.69091,23.208059],[112.688797,23.152382],[112.656273,23.062435],[112.537209,22.995937],[112.486366,22.981871],[112.422913,22.997318],[112.368492,22.986137],[112.235497,22.921164],[112.1231,22.959883],[112.044258,22.929964]]},type:"Feature",properties:{destinationid:"445300",id:218,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824585,26.849701],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.802818,26.35306],[111.645103,26.292992],[111.570847,26.283346],[111.471786,26.230864],[111.344734,26.123369],[111.234337,26.08532],[111.195259,26.044289],[111.138382,26.0354],[111.027496,25.96759],[111.008728,25.91642],[110.881279,25.75178],[110.71051,25.660337],[110.617271,25.647886],[110.561829,25.623543],[110.497787,25.568924],[110.450294,25.500118],[110.323517,25.443933],[110.291428,25.355551],[110.146873,25.265556],[110.10067,25.161055],[110.012093,25.053164],[109.99913,25.003202],[109.975662,24.983576],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.862801,24.67211],[109.867867,24.640434],[109.841652,24.602148],[109.841011,24.547951],[109.816368,24.49951],[109.539093,24.345078],[109.528053,24.31246],[109.492249,24.304035],[109.476738,24.249189],[109.409317,24.154949],[109.364838,24.005314],[109.20488,23.745846],[109.161087,23.466511],[109.126701,23.434093],[109.06501,23.280437],[109.013069,23.027344],[108.955757,22.961134],[108.920738,22.888224],[108.876419,22.85944],[108.764648,22.830013],[108.58123,22.808588],[108.330574,22.813068],[108.319695,22.824596]]},type:"Feature",properties:{destinationid:"450100",id:219,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.70256,37.794323],[115.799278,37.724159],[115.802887,37.7062],[115.781403,37.653046],[115.631683,37.480488],[115.481812,37.152451],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136719,36.089344],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.629204,35.230801],[114.605591,35.188057],[114.583748,35.075737],[114.518303,34.93639],[114.491623,34.68362],[114.519287,34.471203],[114.551636,34.37315],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.604103,33.944477],[114.656815,33.784679],[114.773384,33.631229],[114.819305,33.48027],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.893974,30.920433],[114.8797,30.745974],[114.940857,30.63122],[115.033348,30.540159],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.763412,30.026253],[115.915405,30.026793],[115.964523,29.906767],[115.981903,29.809978],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.87355,29.481152],[115.819031,29.427299],[115.775513,29.407656],[115.756508,29.371138],[115.750824,29.318676],[115.769447,29.216211],[115.759872,29.157713],[115.777306,29.048706],[115.871254,28.836245],[116.045494,28.789955],[116.088219,28.699682],[116.071487,28.609695],[116.083313,28.428064],[116.178696,28.31638],[116.188072,28.263325],[116.237175,28.206129],[116.277786,28.054449],[116.357162,27.901197],[116.504829,27.760759],[116.599281,27.638195],[116.612335,27.535761],[116.651443,27.509071],[116.567482,27.196333],[116.531952,27.1621],[116.511406,27.07357],[116.403664,26.958824],[116.351929,26.839302],[116.353539,26.690689],[116.339073,26.660568],[116.349022,26.586744],[116.314117,26.471727],[116.284569,26.429218],[116.167152,26.356428],[116.097458,26.106089],[115.968399,25.898306],[115.979919,25.795591],[115.907616,25.730833],[115.803284,25.562445],[115.79055,25.485342],[115.800789,25.410984],[115.766647,25.33112],[115.749237,25.144089],[115.765396,25.076376],[115.754608,25.009197],[115.765419,24.920702],[115.722755,24.811693],[115.735107,24.791285],[115.835716,24.735733],[115.851479,24.680906],[115.841362,24.611467],[115.875153,24.567709],[115.885254,24.572392],[115.910294,24.515314],[115.990463,24.456631],[115.998177,24.39625],[116.034241,24.3997],[116.08905,24.339956],[116.053177,24.272469],[116.079376,24.209791],[116.07473,24.121584],[116.007019,24.023043],[116.020142,23.962952],[116.115639,23.850985],[116.140915,23.762383],[116.202637,23.695173],[116.252296,23.687231],[116.347794,23.604782],[116.478737,23.611872],[116.493073,23.588654],[116.632416,23.661995]]},type:"Feature",properties:{destinationid:"445100",id:220,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.246124,30.31918],[114.291199,30.057354],[114.275475,29.957596],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824249,26.849171],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.80201,26.352695],[111.645103,26.292992],[111.569565,26.282791],[111.470062,26.229782],[111.344734,26.123369],[111.234337,26.08532],[111.194641,26.043938],[111.138901,26.035637],[111.029503,25.969057],[111.008728,25.91642],[110.882118,25.752356],[110.71051,25.660337],[110.617271,25.647886],[110.561829,25.623543],[110.497787,25.568924],[110.450294,25.500118],[110.322968,25.443428],[110.291992,25.370529],[110.299118,25.274408]]},type:"Feature",properties:{destinationid:"450300",id:221,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.246124,30.31918],[114.291267,30.056494],[114.274803,29.955997],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824249,26.849171],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.802818,26.35306],[111.645103,26.292992],[111.570847,26.283346],[111.471786,26.230864],[111.344734,26.123369],[111.234337,26.08532],[111.195259,26.044289],[111.138382,26.0354],[111.027496,25.96759],[111.008728,25.91642],[110.881279,25.75178],[110.71051,25.660337],[110.617271,25.647886],[110.558655,25.621576],[110.497787,25.568924],[110.450294,25.500118],[110.322968,25.443428],[110.291428,25.355551],[110.130013,25.245911],[110.103073,25.165123],[110.041199,25.103758],[109.99913,25.003202],[109.97583,24.984119],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.862801,24.67211],[109.867867,24.640434],[109.841652,24.602148],[109.841011,24.547951],[109.8144,24.497009],[109.540146,24.345846],[109.517548,24.305742],[109.414513,24.302738],[109.411728,24.314857]]},type:"Feature",properties:{destinationid:"450200",id:222,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.348709,39.898605],[116.325241,39.562981],[116.29615,39.527466],[116.271545,39.431286],[116.299789,39.223991],[116.292931,39.167702],[116.201324,38.880615],[116.077446,38.793598],[115.97168,38.641132],[115.871727,38.578499],[115.803207,38.50708],[115.702385,38.350185],[115.685852,38.263382],[115.645821,38.184074],[115.641708,38.117493],[115.695221,38.021114],[115.70256,37.794323],[115.799278,37.724159],[115.802887,37.7062],[115.781403,37.653046],[115.631683,37.480488],[115.481812,37.152451],[115.411087,37.056885],[115.359406,37.016304],[115.317261,36.935097],[115.242142,36.874538],[115.199623,36.73061],[115.132141,36.603279],[115.093048,36.42408],[115.102402,36.377388],[115.08989,36.317867],[115.1576,36.176193],[115.136719,36.089344],[114.95195,35.804337],[114.907906,35.639473],[114.728088,35.495804],[114.639206,35.327087],[114.629204,35.230801],[114.605591,35.188057],[114.583748,35.075737],[114.518303,34.93639],[114.491661,34.687054],[114.519287,34.471203],[114.551849,34.371399],[114.541641,34.286217],[114.553032,34.179985],[114.596115,34.049965],[114.604103,33.944477],[114.656815,33.784679],[114.773384,33.631229],[114.819305,33.48027],[114.821808,33.316151],[114.754166,32.939648],[114.825653,32.807831],[114.86129,32.634911],[114.851555,32.36417],[114.875084,32.165802],[114.949554,32.036713],[114.924789,31.852509],[114.89357,31.779768],[114.899117,31.701262],[114.923141,31.665648],[114.891624,31.582909],[114.885674,31.493494],[114.887451,31.440474],[114.910797,31.411516],[114.910995,31.29207],[114.943581,31.143524],[114.893974,30.920433],[114.8797,30.745974],[114.940857,30.63122],[115.033348,30.540159],[115.069008,30.458515],[115.147148,30.391706],[115.162415,30.348963],[115.104736,30.257271],[115.150368,30.231853],[115.21801,30.225842],[115.290688,30.197323],[115.367455,30.079357],[115.48642,30.02116],[115.601967,30.001152],[115.763412,30.026253],[115.915405,30.026793],[115.964523,29.906767],[115.981903,29.809978],[115.918152,29.735117],[115.909492,29.701019],[115.925369,29.621029],[115.891327,29.573668],[115.87355,29.481152],[115.819031,29.427299],[115.775513,29.407656],[115.756508,29.371138],[115.750824,29.318676],[115.769447,29.216211],[115.759872,29.157713],[115.777306,29.048706],[115.871254,28.836245],[116.045494,28.789955],[116.088219,28.699682],[116.071487,28.609695],[116.083313,28.428064],[116.178696,28.31638],[116.188072,28.263325],[116.237175,28.206129],[116.277786,28.054449],[116.357162,27.901197],[116.504829,27.760759],[116.599281,27.638195],[116.612335,27.535761],[116.651604,27.507956],[116.567482,27.196333],[116.531952,27.1621],[116.511406,27.07357],[116.403664,26.958824],[116.351929,26.839302],[116.353539,26.690689],[116.339073,26.660568],[116.349022,26.586744],[116.314285,26.472136],[116.284569,26.429218],[116.167038,26.356197],[116.097458,26.106089],[115.968399,25.898306],[115.979919,25.795591],[115.907616,25.730833],[115.803635,25.56337],[115.79055,25.485342],[115.800629,25.409941],[115.766533,25.3305],[115.749207,25.143183],[115.765396,25.076376],[115.754623,24.960009],[115.765465,24.921194],[115.722908,24.810499],[115.835716,24.735733],[115.851479,24.680906],[115.841362,24.611467],[115.875153,24.567709],[115.885254,24.572392],[115.910294,24.515314],[115.990463,24.456631],[115.998177,24.39625],[116.034241,24.3997],[116.08905,24.339956],[116.053177,24.272469],[116.079254,24.210405],[116.081177,24.146793],[116.007095,24.023485],[116.016693,23.969076],[116.115387,23.851429],[116.138954,23.765537],[116.187469,23.707773],[116.252296,23.687231],[116.315765,23.629749],[116.228462,23.527969],[116.197975,23.445087],[116.164886,23.414213],[116.112373,23.275377],[116.063232,23.256012],[116.036797,23.226294],[116.00666,23.143324],[115.964355,23.082527],[115.966759,22.9655],[115.983093,22.932117],[116.065994,22.876133],[116.108391,22.873024],[116.099327,22.818789]]},type:"Feature",properties:{destinationid:"442101",id:223,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761108,38.353519],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976242,35.304268],[113.899323,35.063862],[113.829147,34.955357],[113.817848,34.870144],[113.834328,34.83363],[113.814682,34.694416],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277794,30.18664],[114.291321,30.055529],[114.282768,29.978373],[114.254143,29.923229],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.03006,27.361797],[112.886734,27.206224],[112.852806,27.084167],[112.824326,26.849262],[112.730034,26.814354],[112.591789,26.809818],[112.526604,26.753559],[112.559441,26.575924],[112.5532,26.535686],[112.455101,26.369867],[112.489288,26.185049],[112.526337,26.080091],[112.493156,25.859135],[112.505608,25.675665],[112.479874,25.586197],[112.305733,25.52862],[112.222557,25.531908],[112.126793,25.50703],[112.126488,25.479853],[112.155289,25.466307],[112.182144,25.374895],[112.171829,25.239344],[112.305176,24.919357],[112.282303,24.735943],[112.144508,24.667227],[112.122139,24.57826],[112.074112,24.510368],[112.131378,24.366535],[112.120674,24.282076],[112.154694,24.205355],[112.110558,23.962],[112.034294,23.960897],[111.789566,24.00408],[111.738754,24.054741],[111.724892,23.992636],[111.631241,23.997919],[111.540665,23.958988],[111.531815,23.926502],[111.556145,23.796612],[111.436752,23.706125],[111.297478,23.474535]]},type:"Feature",properties:{destinationid:"450400",id:224,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.246124,30.31918],[114.291199,30.057354],[114.275475,29.957596],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824326,26.849262],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.802818,26.35306],[111.645103,26.292992],[111.570847,26.283346],[111.471786,26.230864],[111.344734,26.123369],[111.234337,26.08532],[111.195259,26.044289],[111.138382,26.0354],[111.027496,25.96759],[111.008728,25.91642],[110.881279,25.75178],[110.71051,25.660337],[110.617271,25.647886],[110.561829,25.623543],[110.497787,25.568924],[110.450294,25.500118],[110.324699,25.444931],[110.301521,25.411572],[110.291428,25.355551],[110.146873,25.265556],[110.10067,25.161055],[110.012093,25.053164],[109.99913,25.003202],[109.975662,24.983576],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.862801,24.67211],[109.867867,24.640434],[109.841652,24.602148],[109.841011,24.547951],[109.816368,24.49951],[109.540146,24.345846],[109.528053,24.31246],[109.49147,24.302782],[109.476738,24.249189],[109.406357,24.151854],[109.453857,24.078146],[109.574409,23.963737],[109.606445,23.896048],[109.614426,23.822681],[109.671432,23.758196],[109.723343,23.631588],[109.715797,23.506975],[109.729271,23.464853],[109.832962,23.411776],[109.855682,23.317719],[109.839828,23.296658],[109.834084,23.199303],[109.789703,23.137287],[109.77803,23.061098],[109.757713,23.017195],[109.710197,22.973129],[109.694679,22.867144],[109.662376,22.792492],[109.67775,22.712755],[109.637772,22.644457],[109.654266,22.585209],[109.589294,22.51144],[109.553314,22.322001],[109.375381,21.926229],[109.250183,21.813957],[109.22818,21.727335],[109.242256,21.668959],[109.219849,21.591429],[109.229301,21.510702],[109.119255,21.472925]]},type:"Feature",properties:{destinationid:"450500",id:225,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.246124,30.31918],[114.291267,30.056494],[114.274803,29.955997],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824249,26.849171],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.80201,26.352695],[111.645103,26.292992],[111.570206,26.283096],[111.470062,26.229782],[111.344734,26.123369],[111.232964,26.084614],[111.193718,26.043497],[111.136436,26.034363],[111.02581,25.965946],[111.008728,25.91642],[110.883087,25.753078],[110.71051,25.660337],[110.617271,25.647886],[110.559662,25.622278],[110.497787,25.568924],[110.450294,25.500118],[110.322968,25.443428],[110.291428,25.355551],[110.130943,25.247305],[110.103073,25.165123],[110.041199,25.103758],[109.99913,25.003202],[109.97583,24.984119],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.890327,24.77227],[109.889221,24.727108],[109.862701,24.671545],[109.867867,24.640434],[109.841652,24.602148],[109.841171,24.548689],[109.821648,24.507299],[109.539093,24.345078],[109.528053,24.31246],[109.492249,24.304035],[109.476738,24.249189],[109.407883,24.152227],[109.364838,24.005314],[109.20488,23.745846],[109.164528,23.47827],[109.126701,23.434093],[109.06501,23.280437],[108.997932,23.002661],[108.955757,22.961134],[108.920464,22.887873],[108.877892,22.860126],[108.762634,22.829586],[108.583481,22.809587],[108.535591,22.689026],[108.409187,22.668447],[108.409546,22.453897],[108.388336,22.374773],[108.433784,22.28845],[108.426613,22.245356],[108.450768,22.063324],[108.507309,21.969839],[108.396683,21.796137],[108.382156,21.706139],[108.345543,21.614613]]},type:"Feature",properties:{destinationid:"450600",id:226,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.246124,30.31918],[114.291199,30.057354],[114.275475,29.957596],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824249,26.849171],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.80201,26.352695],[111.645103,26.292992],[111.570206,26.283096],[111.470062,26.229782],[111.344734,26.123369],[111.232964,26.084614],[111.193718,26.043497],[111.136436,26.034363],[111.02581,25.965946],[111.008728,25.91642],[110.883087,25.753078],[110.71051,25.660337],[110.617271,25.647886],[110.559662,25.622278],[110.497787,25.568924],[110.450294,25.500118],[110.322968,25.443428],[110.291428,25.355551],[110.130943,25.247305],[110.103073,25.165123],[110.041199,25.103758],[109.99913,25.003202],[109.97583,24.984119],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.890327,24.77227],[109.889221,24.727108],[109.862701,24.671545],[109.867867,24.640434],[109.841652,24.602148],[109.841171,24.548689],[109.821648,24.507299],[109.539093,24.345078],[109.528053,24.31246],[109.492249,24.304035],[109.476738,24.249189],[109.406319,24.152908],[109.453857,24.078146],[109.573776,23.964804],[109.606445,23.896048],[109.614426,23.822681],[109.672028,23.757023],[109.72393,23.629189],[109.715797,23.506975],[109.72995,23.463493],[109.83152,23.413092],[109.84713,23.374058],[109.855698,23.317896],[109.839828,23.296658],[109.834854,23.202114],[109.784721,23.123056],[109.684624,23.125401],[109.596344,23.105061],[109.60218,23.093121]]},type:"Feature",properties:{destinationid:"450800",id:227,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.246124,30.31918],[114.291267,30.056494],[114.274803,29.955997],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824249,26.849171],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.80201,26.352695],[111.645103,26.292992],[111.570206,26.283096],[111.470062,26.229782],[111.344734,26.123369],[111.232964,26.084614],[111.193718,26.043497],[111.136436,26.034363],[111.02581,25.965946],[111.008728,25.91642],[110.883087,25.753078],[110.71051,25.660337],[110.617271,25.647886],[110.559662,25.622278],[110.497787,25.568924],[110.450294,25.500118],[110.322968,25.443428],[110.291428,25.355551],[110.130943,25.247305],[110.103073,25.165123],[110.041199,25.103758],[109.99913,25.003202],[109.97583,24.984119],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.890327,24.77227],[109.889221,24.727108],[109.862701,24.671545],[109.867867,24.640434],[109.841652,24.602148],[109.841171,24.548689],[109.822151,24.508081],[109.540146,24.345846],[109.51992,24.307039],[109.493042,24.305119],[109.476738,24.249189],[109.406143,24.148472],[109.364838,24.005314],[109.205803,23.748112],[109.165283,23.480989],[109.126701,23.434093],[109.06501,23.280437],[109.013069,23.027344],[108.955757,22.961134],[108.919716,22.887089],[108.838425,22.850433],[108.855545,22.794874],[108.849724,22.723938],[108.887947,22.641207],[108.874504,22.584497],[108.914871,22.518202],[108.927032,22.447861],[108.906815,22.39695],[108.920364,22.314253],[108.890945,22.250023],[108.88485,22.170803],[108.702713,21.947136],[108.644623,21.938511],[108.624596,21.96711]]},type:"Feature",properties:{destinationid:"450700",id:228,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.291199,30.057354],[114.281105,29.973005],[114.25309,29.922052],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824326,26.849262],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.802818,26.35306],[111.645103,26.292992],[111.570847,26.283346],[111.471786,26.230864],[111.344734,26.123369],[111.234337,26.08532],[111.195259,26.044289],[111.138382,26.0354],[111.027496,25.96759],[111.008728,25.91642],[110.881279,25.75178],[110.71051,25.660337],[110.617271,25.647886],[110.561829,25.623543],[110.497787,25.568924],[110.450294,25.500118],[110.324699,25.444931],[110.301521,25.411572],[110.291428,25.355551],[110.146873,25.265556],[110.10067,25.161055],[110.012093,25.053164],[109.99913,25.003202],[109.975662,24.983576],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.862801,24.67211],[109.867867,24.640434],[109.841652,24.602148],[109.841011,24.547951],[109.816368,24.49951],[109.539093,24.345078],[109.528053,24.31246],[109.492249,24.304035],[109.476738,24.249189],[109.406471,24.153246],[109.453857,24.078146],[109.573776,23.964804],[109.606445,23.896048],[109.614426,23.822681],[109.672028,23.757023],[109.72393,23.629189],[109.715797,23.506975],[109.72995,23.463493],[109.83152,23.413092],[109.847015,23.374666],[109.855698,23.317896],[109.839828,23.296658],[109.834084,23.199303],[109.789703,23.137287],[109.760155,23.020847],[109.7117,22.977049],[109.689377,22.88615],[109.946228,22.795292],[110.131371,22.757673],[110.128036,22.662369],[110.154335,22.631332]]},type:"Feature",properties:{destinationid:"450900",id:229,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761108,38.353519],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976242,35.304268],[113.899323,35.063862],[113.829147,34.955357],[113.817848,34.870144],[113.834328,34.83363],[113.814682,34.694416],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277794,30.18664],[114.291321,30.055529],[114.282768,29.978373],[114.254143,29.923229],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247963,29.206089],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.03006,27.361797],[112.886734,27.206224],[112.852806,27.084167],[112.824326,26.849262],[112.730034,26.814354],[112.591789,26.809818],[112.526558,26.753368],[112.559441,26.575924],[112.5532,26.535686],[112.455101,26.369867],[112.489288,26.185049],[112.526337,26.080091],[112.493217,25.860018],[112.506622,25.736134],[112.490829,25.610764],[112.47686,25.582924],[112.304962,25.528456],[112.222557,25.531908],[112.120796,25.50411],[112.078087,25.510521],[111.873665,25.475464],[111.845306,25.483976],[111.596725,25.455309],[111.52594,25.329153],[111.524704,25.248693],[111.545624,25.24719],[111.568352,25.150438],[111.540749,25.060469],[111.546471,25.032431],[111.518539,24.993481],[111.530411,24.944172],[111.512077,24.829786],[111.523621,24.771708],[111.468079,24.698416],[111.44651,24.700737],[111.40007,24.647236],[111.41362,24.588717],[111.496506,24.51194],[111.487595,24.461298],[111.51123,24.444881],[111.516296,24.4151],[111.552216,24.414124]]},type:"Feature",properties:{destinationid:"451100",id:230,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.246124,30.31918],[114.291267,30.056494],[114.274803,29.955997],[114.147514,29.827101],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824326,26.849262],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.802818,26.35306],[111.645103,26.292992],[111.570847,26.283346],[111.471786,26.230864],[111.344734,26.123369],[111.234337,26.08532],[111.195259,26.044289],[111.138382,26.0354],[111.027496,25.96759],[111.008728,25.91642],[110.881279,25.75178],[110.71051,25.660337],[110.617271,25.647886],[110.561829,25.623543],[110.497787,25.568924],[110.450294,25.500118],[110.324104,25.444445],[110.291428,25.355551],[110.146873,25.265556],[110.10067,25.161055],[110.012093,25.053164],[109.99913,25.003202],[109.975662,24.983576],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.862801,24.67211],[109.867867,24.640434],[109.841652,24.602148],[109.841011,24.547951],[109.816368,24.49951],[109.540146,24.345846],[109.51992,24.307039],[109.492249,24.304035],[109.476738,24.249189],[109.406143,24.148472],[109.364838,24.005314],[109.208282,23.756121],[109.229721,23.734201]]},type:"Feature",properties:{destinationid:"451300",id:231,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824478,26.849489],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.802818,26.35306],[111.645103,26.292992],[111.570847,26.283346],[111.471786,26.230864],[111.344734,26.123369],[111.234337,26.08532],[111.195259,26.044289],[111.138382,26.0354],[111.027496,25.96759],[111.008728,25.91642],[110.881279,25.75178],[110.71051,25.660337],[110.617271,25.647886],[110.561829,25.623543],[110.497787,25.568924],[110.450294,25.500118],[110.324699,25.444931],[110.301521,25.411572],[110.291428,25.355551],[110.146873,25.265556],[110.10067,25.161055],[110.012093,25.053164],[109.99913,25.003202],[109.975662,24.983576],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.890327,24.77227],[109.889221,24.727108],[109.862701,24.671545],[109.867867,24.640434],[109.841652,24.602148],[109.841171,24.548689],[109.822151,24.508081],[109.66626,24.414661],[109.523003,24.442053],[109.331039,24.407843],[109.227219,24.414181],[109.133812,24.476347],[109.122269,24.504513],[109.044441,24.527227],[108.926735,24.514307],[108.861008,24.484596],[108.771164,24.470846],[108.612411,24.475348],[108.510674,24.506012],[108.31897,24.674662],[108.145493,24.707226],[108.117386,24.69302],[108.061768,24.695942]]},type:"Feature",properties:{destinationid:"451200",id:232,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824409,26.849375],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.802818,26.35306],[111.645103,26.292992],[111.570847,26.283346],[111.471786,26.230864],[111.344734,26.123369],[111.234337,26.08532],[111.195259,26.044289],[111.138382,26.0354],[111.027496,25.96759],[111.008728,25.91642],[110.881279,25.75178],[110.71051,25.660337],[110.617271,25.647886],[110.561829,25.623543],[110.497787,25.568924],[110.450294,25.500118],[110.323517,25.443933],[110.291428,25.355551],[110.146873,25.265556],[110.10067,25.161055],[110.012093,25.053164],[109.99913,25.003202],[109.975662,24.983576],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.862801,24.67211],[109.867867,24.640434],[109.841652,24.602148],[109.841011,24.547951],[109.816368,24.49951],[109.540146,24.345846],[109.51992,24.307039],[109.492249,24.304035],[109.476738,24.249189],[109.406143,24.148472],[109.364838,24.005314],[109.205803,23.748112],[109.17865,23.604557],[109.125961,23.635885],[109.042801,23.640173],[109.005074,23.604671],[108.865807,23.595961],[108.80291,23.560373],[108.531586,23.53862],[108.385765,23.592039],[108.327606,23.590984],[108.231697,23.636681],[108.126228,23.61945],[108.052193,23.542973],[107.987495,23.499157],[107.908318,23.470938],[107.844788,23.410196],[107.79171,23.402491],[107.712776,23.420334],[107.6548,23.360008],[107.592651,23.370192],[107.477242,23.348278],[107.402657,23.416206],[107.389122,23.453009],[107.262009,23.5532],[107.054024,23.592796],[106.945503,23.658575],[106.905701,23.708124],[106.825905,23.718594],[106.757912,23.749514],[106.684647,23.819986],[106.690247,23.83116],[106.644623,23.892635],[106.616089,23.898016]]},type:"Feature",properties:{destinationid:"451000",id:233,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308411,31.967369],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050171,31.361954],[114.089264,31.238945],[114.082603,31.072531],[114.040276,30.85622],[114.040405,30.691002],[114.05513,30.635433],[114.043945,30.508211],[114.092667,30.409531],[114.176399,30.34701],[114.245842,30.319845],[114.277641,30.188021],[114.283752,29.983866],[114.254143,29.923229],[114.147949,29.827374],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453339,29.461761],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273483,29.052458],[113.251678,28.773008],[113.271317,28.716234],[113.264175,28.627113],[113.193138,28.454586],[113.097557,28.325056],[113.073532,28.265961],[113.049904,28.167805],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.886734,27.206224],[112.852806,27.084167],[112.824478,26.849489],[112.730034,26.814354],[112.588356,26.808443],[112.318817,26.591494],[112.088844,26.516151],[111.80201,26.352695],[111.645103,26.292992],[111.570206,26.283096],[111.470062,26.229782],[111.344734,26.123369],[111.232964,26.084614],[111.193718,26.043497],[111.136436,26.034363],[111.02581,25.965946],[111.008728,25.91642],[110.883087,25.753078],[110.71051,25.660337],[110.617271,25.647886],[110.559662,25.622278],[110.497787,25.568924],[110.450294,25.500118],[110.322968,25.443428],[110.291428,25.355551],[110.148781,25.267612],[110.10067,25.161055],[110.012093,25.053164],[109.99913,25.003202],[109.975662,24.983576],[109.975517,24.931593],[109.945709,24.910151],[109.94297,24.877895],[109.910583,24.841257],[109.915245,24.812622],[109.890327,24.77227],[109.889221,24.727108],[109.862701,24.671545],[109.867867,24.640434],[109.841652,24.602148],[109.841171,24.548689],[109.821648,24.507299],[109.539093,24.345078],[109.528053,24.31246],[109.492249,24.304035],[109.476738,24.249189],[109.408646,24.153708],[109.364838,24.005314],[109.20488,23.745846],[109.161087,23.466511],[109.126701,23.434093],[109.06501,23.280437],[109.013069,23.027344],[108.955757,22.961134],[108.919266,22.886681],[108.876419,22.85944],[108.764648,22.830013],[108.583244,22.809467],[108.541824,22.696348],[108.507469,22.675951],[108.385895,22.668921],[108.307655,22.720049],[108.302269,22.737965],[108.266457,22.741211],[108.217873,22.694311],[108.183121,22.627018],[108.082649,22.583916],[107.976593,22.558437],[107.870918,22.565674],[107.673065,22.516697],[107.406197,22.352036],[107.373253,22.352091],[107.372025,22.393572],[107.353928,22.404032]]},type:"Feature",properties:{destinationid:"451400",id:234,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.20829,23.16383],[113.140175,23.1325],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.671585,21.563433],[110.272415,21.33392],[110.206337,21.224844],[110.132889,21.177076],[110.068314,21.03672],[110.022873,20.976805],[109.993774,20.678564],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.216576,20.269968],[110.255531,20.165642],[110.272186,20.026445],[110.33136,20.03178]]},type:"Feature",properties:{destinationid:"460100",id:235,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253571,23.164745],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.134445,21.179232],[110.015945,20.957556],[109.994621,20.670534],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.191383,20.313898],[110.248634,20.185984],[110.271172,20.030342],[110.284927,20.020981],[110.262459,19.942127],[110.361801,19.936884],[110.363724,19.676298],[110.403709,19.527527],[110.448418,19.443029],[110.462914,19.294935],[110.435509,19.255373],[110.432526,19.215759],[110.49791,19.06954],[110.500626,19.002701],[110.379807,18.808594],[110.177826,18.587305],[109.973076,18.50967],[109.882935,18.447664],[109.754486,18.398975],[109.680855,18.320982],[109.529572,18.315178],[109.533257,18.291101],[109.503662,18.267477],[109.508453,18.247591]]},type:"Feature",properties:{destinationid:"460200",id:236,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253571,23.164745],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.134445,21.179232],[110.015945,20.957556],[109.994621,20.670534],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.191383,20.313898],[110.248634,20.185984],[110.271172,20.030342],[110.284927,20.020981],[110.262459,19.942127],[110.361801,19.936884],[110.363724,19.676298],[110.403709,19.527527],[110.448418,19.443029],[110.462914,19.294935],[110.435509,19.255373],[110.432526,19.215759],[110.49791,19.06954],[110.500626,19.002701],[110.379807,18.808594],[110.177826,18.587305],[109.973076,18.50967],[109.882935,18.447664],[109.754486,18.398975],[109.680855,18.320982],[109.529572,18.315178],[109.533127,18.290829],[109.499352,18.263781],[109.505379,18.246931],[109.47113,18.209379],[109.484619,18.179089],[109.611061,18.121302],[110.535202,18.10796],[110.580994,18.091221],[112.04306,17.010906],[112.347015,16.830856]]},type:"Feature",properties:{destinationid:"460300",id:237,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.20829,23.16383],[113.140175,23.1325],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.133675,21.178186],[110.015945,20.957556],[109.994621,20.670534],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.191383,20.313898],[110.248634,20.185984],[110.271172,20.030342],[110.284927,20.020981],[110.262459,19.942127],[110.361801,19.936884],[110.363724,19.676298],[110.403709,19.527527],[110.445381,19.456785],[110.462914,19.294935],[110.43811,19.260906],[110.465736,19.2582],[110.466347,19.24593]]},type:"Feature",properties:{destinationid:"469002",id:238,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.20829,23.16383],[113.140175,23.1325],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.132889,21.177076],[110.014259,20.949371],[109.993973,20.675318],[110.044846,20.567526],[110.053368,20.51572],[110.140709,20.384222],[110.143242,20.356623],[110.216576,20.269968],[110.255005,20.167864],[110.28141,20.013288],[110.422821,20.016203],[110.463219,19.970524],[110.533768,19.93943],[110.687157,19.788107],[110.713554,19.726749],[110.724304,19.627869],[110.753571,19.613056]]},type:"Feature",properties:{destinationid:"469005",id:239,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253548,23.164675],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.671585,21.563433],[110.499397,21.453056],[110.273979,21.335546],[110.206337,21.224844],[110.132889,21.177076],[110.014259,20.949371],[109.998039,20.656563],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.17485,20.328369],[110.11869,20.207773],[110.133194,20.042004],[110.163383,20.037704],[110.126877,19.989241],[110.144951,19.973963],[110.130669,19.936138],[109.955856,19.870346],[109.761429,19.864578],[109.71302,19.839586],[109.639183,19.829762],[109.564491,19.778419],[109.438026,19.724813],[109.591118,19.538603],[109.576767,19.517458]]},type:"Feature",properties:{destinationid:"460400",id:240,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253571,23.164745],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.136391,21.181641],[110.015945,20.957556],[109.993973,20.675318],[110.070007,20.483316],[110.14061,20.384396],[110.143242,20.356623],[110.191383,20.313898],[110.254257,20.170528],[110.271172,20.030342],[110.284927,20.020981],[110.260674,19.935177],[110.269905,19.908024],[110.212463,19.84292],[110.162941,19.667509],[110.11322,19.576384],[110.090256,19.477369],[110.095215,19.397722],[109.994232,19.197088],[109.961296,19.150373],[109.87056,19.092205],[109.843262,19.037418],[109.699211,19.039154],[109.65918,19.023849],[109.649483,19.004736],[109.568504,18.979431],[109.572197,18.9676],[109.545509,18.961498],[109.530647,18.934832],[109.50621,18.935694],[109.518562,18.904184],[109.50634,18.831381],[109.516655,18.776789]]},type:"Feature",properties:{destinationid:"469001",id:241,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253548,23.164675],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.671585,21.563433],[110.499397,21.453056],[110.276268,21.33769],[110.206337,21.224844],[110.132889,21.177076],[110.014259,20.949371],[109.998039,20.656563],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.17485,20.328369],[110.11869,20.207773],[110.133194,20.042004],[110.163383,20.037704],[110.126877,19.989241],[110.144951,19.973963],[110.130669,19.936138],[109.955856,19.870346],[109.761429,19.864578],[109.71302,19.839586],[109.639183,19.829762],[109.531723,19.76244],[109.243553,19.647444],[109.094238,19.504154],[108.985901,19.314444],[108.891739,19.212734],[108.809441,19.173798],[108.726814,19.101967],[108.654922,19.101389]]},type:"Feature",properties:{destinationid:"469007",id:242,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.20829,23.16383],[113.140175,23.1325],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.132179,21.175993],[110.015945,20.957556],[109.993973,20.675318],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.191383,20.313898],[110.248634,20.185984],[110.271172,20.030342],[110.284927,20.020981],[110.262459,19.942127],[110.361931,19.936388],[110.366302,19.659878],[110.403709,19.527527],[110.439354,19.48085],[110.458115,19.391424],[110.46286,19.294231],[110.435509,19.255373],[110.432625,19.215086],[110.477852,19.131744],[110.501015,19.006706],[110.409607,18.87254],[110.388527,18.795912]]},type:"Feature",properties:{destinationid:"469006",id:243,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.20829,23.16383],[113.140175,23.1325],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.136024,21.181202],[110.015945,20.957556],[109.994301,20.672474],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.191383,20.313898],[110.248634,20.185984],[110.271172,20.030342],[110.284927,20.020981],[110.262459,19.942127],[110.361801,19.936884],[110.36869,19.73654],[110.362946,19.684103],[110.34903,19.68471]]},type:"Feature",properties:{destinationid:"469021",id:244,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.20829,23.16383],[113.140175,23.1325],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.136024,21.181202],[110.015945,20.957556],[109.994301,20.672474],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.216576,20.269968],[110.255531,20.165642],[110.272186,20.026445],[110.284927,20.020981],[110.260674,19.935177],[110.269867,19.907925],[110.213776,19.845921],[110.172997,19.739754],[110.162941,19.667509],[110.11322,19.576384],[110.090256,19.477369],[110.102745,19.363298]]},type:"Feature",properties:{destinationid:"469022",id:245,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253571,23.164745],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.671585,21.563433],[110.272415,21.33392],[110.206337,21.224844],[110.132889,21.177076],[110.014473,20.950924],[109.998039,20.656563],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.174866,20.327679],[110.118576,20.206238],[110.133194,20.042004],[110.163383,20.037704],[110.126877,19.989241],[110.144951,19.973963],[110.130669,19.936138],[110.040756,19.902081],[110.007065,19.818005],[110.007393,19.737108]]},type:"Feature",properties:{destinationid:"469023",id:246,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253548,23.164675],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.671585,21.563433],[110.499397,21.453056],[110.275482,21.336981],[110.206337,21.224844],[110.132889,21.177076],[110.014259,20.949371],[109.998039,20.656563],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.17485,20.328369],[110.11869,20.207773],[110.133194,20.042004],[110.163383,20.037704],[110.126877,19.989241],[110.144951,19.973963],[110.130669,19.936138],[109.956711,19.870533],[109.761429,19.864578],[109.704132,19.837982],[109.67939,19.839222],[109.69915,19.875656],[109.687645,19.908484]]},type:"Feature",properties:{destinationid:"469024",id:247,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253548,23.164675],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.671585,21.563433],[110.499397,21.453056],[110.273979,21.335546],[110.206337,21.224844],[110.132889,21.177076],[110.014259,20.949371],[109.998039,20.656563],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.17485,20.328369],[110.11869,20.207773],[110.133194,20.042004],[110.163383,20.037704],[110.126877,19.989241],[110.144951,19.973963],[110.130669,19.936138],[109.955856,19.870346],[109.761429,19.864578],[109.71302,19.839586],[109.639183,19.829762],[109.564491,19.778419],[109.438026,19.724813],[109.58239,19.546055],[109.457283,19.478834],[109.475067,19.387646],[109.460945,19.322313],[109.473892,19.317213],[109.441856,19.249918],[109.45253,19.224314]]},type:"Feature",properties:{destinationid:"469025",id:248,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253548,23.164675],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.671585,21.563433],[110.499397,21.453056],[110.275482,21.336981],[110.206337,21.224844],[110.132889,21.177076],[110.014259,20.949371],[109.998039,20.656563],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.17485,20.328369],[110.11869,20.207773],[110.133194,20.042004],[110.163383,20.037704],[110.126877,19.989241],[110.144951,19.973963],[110.130669,19.936138],[109.955856,19.870346],[109.761429,19.864578],[109.71302,19.839586],[109.639183,19.829762],[109.531723,19.76244],[109.242577,19.646852],[109.074783,19.47954],[108.987961,19.320013],[109.044968,19.313963],[109.053848,19.260973]]},type:"Feature",properties:{destinationid:"469026",id:249,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832878,34.827915],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.371094,34.48103],[109.256744,34.430332],[109.093185,34.313797],[109.058807,34.22089],[109.00251,34.196934],[109.001358,34.122738],[109.027634,34.09256],[109.024925,34.054745],[108.96785,34.015545],[108.923485,33.960728],[109.082764,33.720173],[109.116615,33.695065],[109.120132,33.664032],[109.163567,33.62915],[109.165955,33.480202],[109.186844,33.399155],[109.169014,33.29237],[109.183388,33.26276],[109.166054,33.243446],[109.170265,33.219116],[109.136513,33.192612],[109.139435,33.130878],[108.962112,32.92408],[108.971069,32.897255],[108.925797,32.827148],[108.934509,32.799362],[108.913002,32.716782],[108.890701,32.705956],[108.77359,32.72253],[108.756508,32.642357],[108.732506,32.611908],[108.670807,32.579155],[108.625237,32.58884],[108.545609,32.514977],[108.452194,32.505833],[108.446877,32.473862],[108.342392,32.425369],[108.220261,32.292828],[108.116302,32.270054],[108.059219,32.161545],[108.04837,32.082748],[108.145699,31.963388],[108.130356,31.893307],[108.079712,31.847561],[108.029922,31.832369],[108.027115,31.803612],[107.995705,31.771967],[107.989822,31.726189],[107.951843,31.681671],[107.88343,31.639149],[107.827843,31.581106],[107.746307,31.535664],[107.662834,31.452644],[107.656303,31.413643],[107.537056,31.330191],[107.533875,31.227781],[107.488136,31.044996],[107.450958,31.013229],[107.403519,30.928806],[107.325668,30.881237],[107.198654,30.759926],[107.150764,30.649563],[107.109138,30.596107],[107.052979,30.4494],[106.963264,30.321726],[106.903419,30.275309],[106.834373,30.154381],[106.849228,30.070108],[106.817535,29.927408],[106.775047,29.887938],[106.760284,29.841698],[106.736717,29.830099],[106.624107,29.630127],[106.5215,29.611753],[106.530678,29.57575],[106.518631,29.568369],[106.521141,29.534449],[106.505043,29.533421]]},type:"Feature",properties:{destinationid:"500000",id:250,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.253548,23.164675],[113.20829,23.16383],[113.140877,23.133047],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.671585,21.563433],[110.272415,21.33392],[110.206337,21.224844],[110.132889,21.177076],[110.014061,20.947412],[109.99826,20.65579],[110.071304,20.480921],[110.14061,20.384396],[110.143242,20.356623],[110.216576,20.269968],[110.255531,20.165642],[110.272186,20.026445],[110.284927,20.020981],[110.260674,19.935177],[110.269867,19.907925],[110.213776,19.845921],[110.172997,19.739754],[110.162941,19.667509],[110.11322,19.576384],[110.090256,19.477369],[110.095001,19.397167],[109.965393,19.155212],[109.87056,19.092205],[109.844559,19.038216],[109.722969,19.042158],[109.661728,19.025351],[109.649483,19.004736],[109.568504,18.979431],[109.572197,18.9676],[109.545509,18.961498],[109.530647,18.934832],[109.46347,18.921202],[109.430061,18.879873],[109.304184,18.834312],[109.255333,18.753954],[109.175812,18.747236]]},type:"Feature",properties:{destinationid:"469027",id:251,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.944077,34.542061],[109.762444,34.500278],[109.575958,34.496815],[109.494171,34.473949],[109.380341,34.482395],[109.313431,34.460907],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891678,32.637592],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.72525,32.361179],[105.63726,32.347584],[105.530113,32.274719],[105.48349,32.277161],[105.436028,32.253773],[105.234596,32.120651],[105.134659,32.036667],[105.013374,31.887321],[104.914207,31.836006],[104.815605,31.711845],[104.735611,31.565592],[104.693474,31.554867],[104.523598,31.340816],[104.441704,31.283648],[104.415077,31.087877],[104.38398,31.075277],[104.372437,31.022652],[104.225922,30.888857],[104.20594,30.81102],[104.158447,30.727974],[104.103653,30.703547],[104.081337,30.656836],[104.065735,30.659376]]},type:"Feature",properties:{destinationid:"510100",id:252,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832878,34.827915],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.760017,34.570641],[110.377655,34.571564],[110.321548,34.602276],[110.170044,34.60957],[110.075714,34.54055],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.374779,34.48172],[109.209412,34.397545],[109.092743,34.313374],[109.09333,34.285957],[109.050293,34.211903],[109.002571,34.19706],[109.001358,34.122738],[109.027397,34.093227],[109.025848,34.057175],[108.923615,33.962326],[109.036972,33.783321],[109.116615,33.695065],[109.120132,33.664032],[109.162277,33.632935],[109.165955,33.480202],[109.186844,33.39888],[109.169014,33.29237],[109.18335,33.262447],[109.166054,33.243446],[109.170265,33.219116],[109.136513,33.192612],[109.128258,33.156734],[109.139572,33.131187],[108.962112,32.92408],[108.971069,32.897255],[108.925697,32.826832],[108.934563,32.79987],[108.914604,32.718517],[108.891769,32.705925],[108.77359,32.72253],[108.756508,32.642357],[108.732506,32.611908],[108.670807,32.579155],[108.625237,32.58884],[108.545609,32.514977],[108.452194,32.505833],[108.446877,32.473862],[108.342392,32.425369],[108.220261,32.292828],[108.116302,32.270054],[108.059219,32.161545],[108.04837,32.082748],[108.145699,31.963388],[108.130356,31.893307],[108.079712,31.847561],[108.029922,31.832369],[108.027115,31.803612],[107.995705,31.771967],[107.989822,31.726189],[107.951843,31.681671],[107.88343,31.639149],[107.827843,31.581106],[107.746307,31.535664],[107.662834,31.452644],[107.656303,31.413643],[107.537056,31.330191],[107.533875,31.227781],[107.488457,31.045588],[107.450958,31.013229],[107.403519,30.928806],[107.325668,30.881237],[107.199135,30.76063],[107.150764,30.649563],[107.109138,30.596107],[107.052979,30.4494],[106.963264,30.321726],[106.926514,30.299858],[106.872597,30.229969],[106.8311,30.14356],[106.849243,30.070669],[106.831696,29.960724],[106.774597,29.887232],[106.760765,29.842327],[106.736412,29.829622],[106.642235,29.650928],[106.618851,29.62731],[106.594505,29.63372],[106.483528,29.604675],[106.44445,29.550474],[106.439133,29.514763],[106.366898,29.516338],[106.339455,29.483068],[106.299881,29.466333],[106.281731,29.341831],[106.334839,29.244162],[106.29837,29.212299],[106.266159,29.152317],[106.181229,29.075142],[106.10183,29.043789],[106.058914,28.977491],[106.011826,28.943338],[105.858826,28.879681],[105.79129,28.831654],[105.616936,28.829973],[105.466682,28.805246],[105.448189,28.833229],[105.44342,28.888988]]},type:"Feature",properties:{destinationid:"510500",id:253,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.20829,23.16383],[113.140175,23.1325],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.135399,21.180443],[110.015945,20.957556],[109.993973,20.675318],[110.070007,20.483316],[110.14061,20.384396],[110.143242,20.356623],[110.191383,20.313898],[110.254257,20.170528],[110.271172,20.030342],[110.284927,20.020981],[110.260674,19.935177],[110.26992,19.908106],[110.213776,19.845921],[110.172997,19.739754],[110.162941,19.667509],[110.11322,19.576384],[110.090256,19.477369],[110.094452,19.395893],[109.964691,19.154207],[109.87056,19.092205],[109.839996,19.036358]]},type:"Feature",properties:{destinationid:"469030",id:254,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.073761,34.540165],[109.944077,34.542061],[109.762444,34.500278],[109.575958,34.496815],[109.494171,34.473949],[109.380341,34.482395],[109.31472,34.461437],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891678,32.637592],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.72525,32.361179],[105.63726,32.347584],[105.530113,32.274719],[105.48349,32.277161],[105.436028,32.253773],[105.135559,32.037567],[105.012871,31.886917],[104.914703,31.836533],[104.815605,31.711845],[104.735611,31.565592],[104.693474,31.554867],[104.523598,31.340816],[104.441704,31.283648],[104.426598,31.146914],[104.419823,31.128643],[104.39901,31.128134]]},type:"Feature",properties:{destinationid:"510600",id:255,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.20829,23.16383],[113.140175,23.1325],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.132889,21.177076],[110.015945,20.957556],[109.994621,20.670534],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.191383,20.313898],[110.248634,20.185984],[110.271172,20.030342],[110.284927,20.020981],[110.262459,19.942127],[110.361801,19.936884],[110.366302,19.659878],[110.403709,19.527527],[110.439354,19.48085],[110.458115,19.391424],[110.46286,19.294231],[110.435509,19.255373],[110.432625,19.215086],[110.477852,19.131744],[110.501007,19.005819],[110.410187,18.873594],[110.396172,18.830351],[110.267067,18.690586],[110.246162,18.647373],[110.14537,18.568386],[110.036354,18.531649],[110.037369,18.504986]]},type:"Feature",properties:{destinationid:"469028",id:256,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.82309,34.93681],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.801102,34.316414],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.89241,33.958614],[114.049576,33.7649],[114.118553,33.580078],[114.122581,33.541256],[114.091286,33.435421],[114.095428,33.226856],[114.083076,33.174541],[114.10482,32.990017],[114.091652,32.739258],[114.123192,32.651211],[114.112465,32.47477],[114.142197,32.40974],[114.152367,32.266785],[114.221123,32.091061],[114.261559,32.053215],[114.308464,31.966667],[114.24041,31.874184],[114.240517,31.833307],[114.16217,31.657896],[114.148659,31.565496],[114.092361,31.47566],[114.050011,31.361233],[114.089264,31.238945],[114.082603,31.072531],[114.040298,30.857687],[114.040405,30.691002],[114.05513,30.635433],[114.043251,30.511902],[114.092667,30.409531],[114.176399,30.34701],[114.245224,30.321056],[114.29129,30.053221],[114.271324,29.94928],[114.151825,29.830147],[113.976646,29.782904],[113.856697,29.727404],[113.734047,29.640314],[113.654556,29.536259],[113.597641,29.525391],[113.548607,29.478168],[113.453751,29.462053],[113.425598,29.352528],[113.291145,29.257565],[113.247292,29.204695],[113.273422,29.05397],[113.251656,28.771229],[113.269699,28.671654],[113.215286,28.497995],[113.084625,28.299223],[113.049988,28.168333],[113.0625,28.096611],[113.036003,28.019154],[113.047691,27.98138],[113.023804,27.857819],[113.055046,27.811298],[113.031067,27.365952],[112.887535,27.207891],[112.839027,26.998598],[112.825264,26.84996],[112.939438,26.596554],[112.883804,26.384905],[112.878647,26.212309],[112.921074,26.113356],[113.029594,26.01918],[113.084763,25.891535],[113.088928,25.817278],[113.059616,25.757278],[113.06488,25.72331],[113.034172,25.607327],[113.045464,25.558634],[112.973198,25.437819],[112.956238,25.329653],[112.995888,25.268442],[113.071358,25.229618],[113.125816,25.233953],[113.153908,25.199614],[113.240555,25.183264],[113.313156,25.116867],[113.334976,25.052135],[113.381271,25.028368],[113.4049,24.989111],[113.421448,24.895018],[113.406525,24.780893],[113.497749,24.667171],[113.56826,24.640301],[113.579765,24.60144],[113.530136,24.44585],[113.497589,24.412439],[113.447884,24.400633],[113.375671,24.321188],[113.360359,24.199026],[113.319527,24.130083],[113.307251,24.069973],[113.172752,23.894194],[113.17791,23.794405],[113.220642,23.722826],[113.243629,23.610689],[113.295441,23.576658],[113.319527,23.517635],[113.310905,23.457569],[113.276726,23.394926],[113.262932,23.194395],[113.253372,23.164463],[113.20829,23.16383],[113.140175,23.1325],[113.102417,23.064987],[113.059906,23.031147],[113.036873,22.955542],[113.026093,22.793009],[112.998123,22.757627],[112.984207,22.691435],[112.915657,22.648108],[112.86721,22.571503],[112.856743,22.517939],[112.756073,22.463047],[112.701599,22.461479],[112.616287,22.428356],[112.580124,22.391788],[112.431252,22.340847],[112.353683,22.2904],[112.279251,22.20046],[112.261581,22.139462],[112.222847,22.102909],[112.220505,22.061445],[112.181351,22.002018],[111.965805,21.907263],[111.765007,21.88331],[111.580826,21.780842],[111.470879,21.683302],[111.310852,21.645706],[111.18734,21.661776],[110.906296,21.60174],[110.855202,21.573793],[110.670372,21.56299],[110.40799,21.401358],[110.320633,21.370642],[110.270119,21.331215],[110.204323,21.222677],[110.134445,21.179232],[110.015945,20.957556],[109.994621,20.670534],[110.070557,20.482254],[110.14061,20.384396],[110.143242,20.356623],[110.191383,20.313898],[110.248634,20.185984],[110.271172,20.030342],[110.284927,20.020981],[110.262459,19.942127],[110.361801,19.936884],[110.363724,19.676298],[110.403709,19.527527],[110.448418,19.443029],[110.462914,19.294935],[110.435509,19.255373],[110.432526,19.215759],[110.49791,19.06954],[110.500755,19.003351],[110.410187,18.873594],[110.396172,18.830351],[110.267067,18.690586],[110.246834,18.648165],[110.123466,18.557304],[110.03685,18.530113],[109.958481,18.6173],[109.899384,18.624962],[109.819839,18.677345],[109.702759,18.636402]]},type:"Feature",properties:{destinationid:"469029",id:257,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.073761,34.540165],[109.944077,34.542061],[109.762444,34.500278],[109.575958,34.496815],[109.494171,34.473949],[109.380341,34.482395],[109.316154,34.46199],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891678,32.637592],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.72525,32.361179],[105.63726,32.347584],[105.530113,32.274719],[105.48349,32.277161],[105.436028,32.253773],[105.135559,32.037567],[105.012871,31.886917],[104.914703,31.836533],[104.815605,31.711845],[104.757431,31.599115],[104.773819,31.533642],[104.793251,31.520851],[104.766968,31.462177],[104.741722,31.464306]]},type:"Feature",properties:{destinationid:"510700",id:258,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.365173,34.479485],[109.255424,34.429531],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446297,33.617107],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230293,33.395672],[108.069504,33.307686],[108.048347,33.30883],[108.038406,33.290367],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.078995,33.023602],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.741776,33.077431],[106.658722,33.05864],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891319,32.637325],[105.873032,32.615917],[105.87606,32.594234],[105.85006,32.577278],[105.841057,32.532528],[105.878304,32.437263],[105.829674,32.433838]]},type:"Feature",properties:{destinationid:"510800",id:259,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.36689,34.47998],[109.255424,34.429531],[109.092979,34.313629],[109.09333,34.285957],[109.044167,34.207432],[108.976883,34.187119],[108.823997,34.190548],[108.699661,34.137241],[108.656975,34.092773],[108.58976,34.078442],[108.545395,34.033794],[108.523727,33.96833],[108.53019,33.945869],[108.502701,33.864243],[108.517845,33.807068],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891968,32.637772],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.851929,32.479237],[105.950455,32.391506],[105.81266,32.314232],[105.885315,32.231689],[105.885101,32.185265],[105.911423,32.151859],[105.899323,32.082684],[105.928635,32.036804],[105.91893,31.969107],[105.936134,31.914375],[105.934456,31.827391],[105.909637,31.708981],[105.917557,31.628593],[105.946251,31.59668],[105.953712,31.473728],[105.928932,31.350906],[105.959244,31.263042],[105.936226,31.10767],[105.843941,30.994661],[105.83062,30.917395],[105.710968,30.812786],[105.670937,30.801918],[105.636337,30.731133],[105.570107,30.656597],[105.620247,30.595806],[105.6605,30.466198],[105.655579,30.429949],[105.633415,30.40295],[105.51445,30.341902],[105.477989,30.282223],[105.460068,30.206804],[105.427467,30.170664],[105.421387,30.1252],[105.334877,29.983219],[105.227417,29.924124],[105.077812,29.685564],[105.005966,29.628811],[104.968575,29.534517],[104.772728,29.35321]]},type:"Feature",properties:{destinationid:"510300",id:260,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.377983,34.482162],[109.309799,34.459175],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.890282,32.636375],[105.87606,32.594234],[105.847389,32.569469],[105.851929,32.479237],[105.950455,32.391506],[105.812668,32.313992],[105.885315,32.231689],[105.885101,32.185265],[105.911423,32.151859],[105.899323,32.082684],[105.928635,32.036804],[105.91893,31.969107],[105.936134,31.914375],[105.934456,31.827391],[105.909637,31.708981],[105.917557,31.628593],[105.946251,31.59668],[105.953712,31.473728],[105.928932,31.350906],[105.959007,31.265839],[105.955688,31.189497],[105.93293,31.100325],[105.890068,31.066008],[105.843689,30.994188],[105.830841,30.917677],[105.710968,30.812786],[105.67131,30.802286],[105.636337,30.731133],[105.574272,30.66494],[105.621613,30.573429],[105.600212,30.534227],[105.565887,30.528433],[105.572144,30.51358]]},type:"Feature",properties:{destinationid:"510900",id:261,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.36689,34.47998],[109.255424,34.429531],[109.092979,34.313629],[109.09333,34.285957],[109.044167,34.207432],[108.976883,34.187119],[108.823997,34.190548],[108.699661,34.137241],[108.656975,34.092773],[108.58976,34.078442],[108.545395,34.033794],[108.523727,33.96833],[108.53019,33.945869],[108.502701,33.864243],[108.517845,33.807068],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891678,32.637592],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.72525,32.361179],[105.608154,32.33551],[105.52935,32.274403],[105.481796,32.276508],[105.234596,32.120651],[105.134659,32.036667],[105.013374,31.887321],[104.914207,31.836006],[104.815605,31.711845],[104.735611,31.565592],[104.692917,31.554327],[104.585014,31.419184],[104.557549,31.425678],[104.378326,31.368046],[104.185097,31.235191],[103.998985,30.987747],[103.975449,30.928013],[103.980621,30.900694],[103.847427,30.847145],[103.770851,30.783447],[103.709801,30.711658],[103.716278,30.656584],[103.659767,30.648802],[103.636887,30.621805],[103.553192,30.589874],[103.543037,30.56292],[103.498405,30.549435],[103.426308,30.463924],[103.429039,30.413771],[103.413406,30.378086],[103.314026,30.287901],[103.239891,30.243416],[103.225777,30.208597],[103.197479,30.19128],[103.181786,30.12756],[103.102669,30.062004],[102.990639,30.0149],[102.958328,29.979149],[102.910744,29.889435],[102.926987,29.871002],[102.891655,29.798971],[102.857948,29.772444],[102.832855,29.693666],[102.765594,29.67592],[102.73539,29.608097],[102.64637,29.514549],[102.667328,29.471258],[102.625999,29.42683],[102.633179,29.370035],[102.593575,29.322474],[102.532112,29.279358],[102.368065,29.237282],[102.389511,29.182076],[102.336761,29.121229],[102.345039,29.069553],[102.30098,28.990387],[102.316605,28.982286],[102.305473,28.984686],[102.301819,28.948807],[102.316277,28.947287],[102.30439,28.948734],[102.302269,28.924845],[102.317429,28.898199],[102.25341,28.76438],[102.266098,28.691698],[102.212914,28.538111],[102.217194,28.419432],[102.170692,28.248569],[102.170525,28.049011],[102.208366,27.828707],[102.191025,27.738689],[102.205368,27.684923],[102.190567,27.418146],[102.320641,27.320333],[102.32431,27.276129],[102.280525,27.182878],[102.24205,27.158819],[102.23336,27.118858],[102.168907,27.061361],[102.167229,27.016935],[102.123306,26.944254],[102.124268,26.913338],[102.102097,26.894518],[102.097382,26.845894],[102.020569,26.818775],[101.990471,26.772301],[101.950356,26.747423],[101.945381,26.603155],[101.84536,26.565807],[101.811867,26.599909],[101.755913,26.57019],[101.716141,26.580217]]},type:"Feature",properties:{destinationid:"510400",id:262,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.36689,34.47998],[109.255424,34.429531],[109.092979,34.313629],[109.09333,34.285957],[109.044167,34.207432],[108.976883,34.187119],[108.823997,34.190548],[108.699661,34.137241],[108.656975,34.092773],[108.58976,34.078442],[108.545395,34.033794],[108.523727,33.96833],[108.53019,33.945869],[108.502701,33.864243],[108.517845,33.807068],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891968,32.637772],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.851929,32.479237],[105.950455,32.391506],[105.81266,32.314232],[105.885315,32.231689],[105.885101,32.185265],[105.911423,32.151859],[105.899323,32.082684],[105.928635,32.036804],[105.91893,31.969107],[105.936134,31.914375],[105.934456,31.827391],[105.909637,31.708981],[105.917557,31.628593],[105.946251,31.59668],[105.953712,31.473728],[105.928932,31.350906],[105.959244,31.263042],[105.936302,31.107946],[105.843941,30.994661],[105.83062,30.917395],[105.710968,30.812786],[105.67131,30.802286],[105.636337,30.731133],[105.574272,30.66494],[105.641762,30.53562],[105.656136,30.430969],[105.633415,30.40295],[105.514,30.34127],[105.355301,30.010559],[105.333084,29.981602],[105.227417,29.924124],[105.119377,29.743797],[105.036873,29.65313],[105.041565,29.622734],[105.069199,29.622292],[105.066086,29.587236]]},type:"Feature",properties:{destinationid:"511000",id:263,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.377983,34.482162],[109.309799,34.459175],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446297,33.617107],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230293,33.395672],[108.069504,33.307686],[108.048347,33.30883],[108.038406,33.290367],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.078995,33.023602],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.740242,33.077457],[106.65583,33.057362],[106.638161,33.026417],[106.53273,33.004044],[106.523621,32.972801],[106.469131,32.974422],[106.44735,32.958412],[106.438034,32.907112],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.89106,32.637119],[105.873032,32.615917],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.724083,32.360306],[105.63726,32.347584],[105.530113,32.274719],[105.484039,32.277283],[105.43647,32.25404],[105.135559,32.037567],[105.013374,31.887321],[104.914207,31.836006],[104.815605,31.711845],[104.735611,31.565592],[104.693474,31.554867],[104.523598,31.340816],[104.441452,31.283274],[104.415527,31.088737],[104.38398,31.075277],[104.372437,31.022652],[104.226402,30.889509],[104.20594,30.81102],[104.170547,30.75848],[104.200027,30.725348],[104.203812,30.609867],[104.149132,30.570969],[104.027817,30.573484],[103.89769,30.399435],[103.846504,30.365492],[103.834923,30.319054],[103.851807,30.190582],[103.765236,30.003525],[103.767593,29.940569],[103.661285,29.699831],[103.699463,29.585621],[103.727135,29.598021],[103.760918,29.581221]]},type:"Feature",properties:{destinationid:"511100",id:264,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.377983,34.482162],[109.309799,34.459175],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.890282,32.636375],[105.87606,32.594234],[105.847389,32.569469],[105.851929,32.479237],[105.950455,32.391506],[105.81266,32.314232],[105.885315,32.231689],[105.885101,32.185265],[105.911423,32.151859],[105.899323,32.082684],[105.928635,32.036804],[105.91893,31.969107],[105.936134,31.914375],[105.934456,31.827391],[105.909637,31.708981],[105.917557,31.628593],[105.946251,31.59668],[105.953712,31.473728],[105.928932,31.350906],[105.959244,31.263042],[105.930809,31.092487],[105.971474,30.934126],[106.050583,30.8197],[106.077972,30.817457],[106.082397,30.795382]]},type:"Feature",properties:{destinationid:"511300",id:265,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832878,34.827915],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.756348,34.569988],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.376068,34.481918],[109.257713,34.430897],[109.092979,34.313629],[109.058807,34.22089],[109.002571,34.19706],[109.001358,34.122738],[109.027397,34.093227],[109.025848,34.057175],[108.923485,33.96151],[109.03717,33.783047],[109.116615,33.695065],[109.120132,33.664032],[109.163567,33.62915],[109.165955,33.480202],[109.186844,33.399155],[109.169014,33.29237],[109.183388,33.26276],[109.166054,33.243446],[109.170265,33.219116],[109.136513,33.192612],[109.139435,33.130878],[108.962112,32.92408],[108.971069,32.897255],[108.925797,32.827148],[108.934509,32.799362],[108.913002,32.716782],[108.890701,32.705956],[108.77359,32.72253],[108.756508,32.642357],[108.732506,32.611908],[108.670807,32.579155],[108.625237,32.58884],[108.545609,32.514977],[108.452194,32.505833],[108.446877,32.473862],[108.342392,32.425369],[108.220261,32.292828],[108.117638,32.271629],[108.059219,32.161545],[108.04837,32.082748],[108.145699,31.963388],[108.130356,31.893307],[108.079712,31.847561],[108.029922,31.832369],[108.027115,31.803612],[107.995705,31.771967],[107.989822,31.726189],[107.951843,31.681671],[107.88343,31.639149],[107.827843,31.581106],[107.754585,31.542635],[107.662834,31.452644],[107.656303,31.413643],[107.553307,31.351862],[107.529007,31.310596],[107.519012,31.222786],[107.502258,31.20944]]},type:"Feature",properties:{destinationid:"511700",id:266,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.944077,34.542061],[109.762444,34.500278],[109.575958,34.496815],[109.494171,34.473949],[109.380341,34.482395],[109.312233,34.460381],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446297,33.617107],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.229828,33.395405],[108.069504,33.307686],[108.048347,33.30883],[108.038406,33.290367],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.078995,33.023602],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.741776,33.077431],[106.657303,33.058048],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891678,32.637592],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.724731,32.360764],[105.608154,32.33551],[105.52935,32.274403],[105.481796,32.276508],[105.234596,32.120651],[105.134659,32.036667],[105.013374,31.887321],[104.914703,31.836533],[104.815605,31.711845],[104.735611,31.565592],[104.693474,31.554867],[104.523598,31.340816],[104.441704,31.283648],[104.415527,31.088737],[104.38398,31.075277],[104.372437,31.022652],[104.226402,30.889509],[104.20594,30.81102],[104.170547,30.75848],[104.200027,30.725348],[104.204643,30.611046],[104.149132,30.570969],[104.027817,30.573484],[103.89769,30.399435],[103.846504,30.365492],[103.834923,30.319054],[103.852562,30.194231],[103.801796,30.075247],[103.823227,30.074862],[103.831963,30.048519]]},type:"Feature",properties:{destinationid:"511400",id:267,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832878,34.827915],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.75779,34.570236],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.376068,34.481918],[109.255424,34.429531],[109.092979,34.313629],[109.058807,34.22089],[109.002571,34.19706],[109.001358,34.122738],[109.027397,34.093227],[109.025848,34.057175],[108.923615,33.962326],[109.036972,33.783321],[109.116615,33.695065],[109.120132,33.664032],[109.162277,33.632935],[109.165955,33.480202],[109.186844,33.39888],[109.169014,33.29237],[109.18335,33.262447],[109.166054,33.243446],[109.170265,33.219116],[109.136513,33.192612],[109.128258,33.156734],[109.139572,33.131187],[108.962112,32.92408],[108.971069,32.897255],[108.925697,32.826832],[108.934563,32.79987],[108.914604,32.718517],[108.891769,32.705925],[108.77359,32.72253],[108.756508,32.642357],[108.732506,32.611908],[108.670807,32.579155],[108.625237,32.58884],[108.545609,32.514977],[108.452194,32.505833],[108.446877,32.473862],[108.342392,32.425369],[108.220261,32.292828],[108.116302,32.270054],[108.059219,32.161545],[108.04837,32.082748],[108.145699,31.963388],[108.130356,31.893307],[108.079712,31.847561],[108.029922,31.832369],[108.027115,31.803612],[107.995705,31.771967],[107.989822,31.726189],[107.951843,31.681671],[107.88343,31.639149],[107.827843,31.581106],[107.746307,31.535664],[107.662834,31.452644],[107.656303,31.413643],[107.537704,31.331106],[107.532509,31.219883],[107.488136,31.044996],[107.450958,31.013229],[107.403519,30.928806],[107.325668,30.881237],[107.199135,30.76063],[107.150764,30.649563],[107.109138,30.596107],[107.077904,30.494267],[106.962448,30.320843],[106.936394,30.308086],[106.915314,30.321421],[106.905319,30.359476],[106.836433,30.409012],[106.807411,30.392118],[106.79776,30.405979],[106.703926,30.394085],[106.633148,30.45643]]},type:"Feature",properties:{destinationid:"511600",id:268,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.944077,34.542061],[109.762444,34.500278],[109.575958,34.496815],[109.494171,34.473949],[109.380341,34.482395],[109.313431,34.460907],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446297,33.617107],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230293,33.395672],[108.069504,33.307686],[108.048347,33.30883],[108.038406,33.290367],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.080963,33.024097],[107.001068,33.018806],[106.914619,33.045616],[106.905922,32.980835],[106.934563,32.811798],[106.901497,32.781536],[106.908287,32.755196],[106.876823,32.745743],[106.858292,32.721508],[106.868507,32.714577],[106.805748,32.667618],[106.841896,32.640484],[106.84819,32.570736],[106.879547,32.55719],[106.863411,32.531021],[106.879761,32.526138],[106.890739,32.474556],[106.876373,32.463886],[106.866714,32.381298],[106.802757,32.332306],[106.819794,32.273277],[106.756851,32.116985],[106.789383,32.029186],[106.76432,32.00135],[106.751144,31.940825],[106.736916,31.866575],[106.753395,31.859053]]},type:"Feature",properties:{destinationid:"511900",id:269,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.36689,34.47998],[109.255424,34.429531],[109.092979,34.313629],[109.09333,34.285957],[109.044167,34.207432],[108.976883,34.187119],[108.823997,34.190548],[108.699661,34.137241],[108.656975,34.092773],[108.58976,34.078442],[108.545395,34.033794],[108.523727,33.96833],[108.53019,33.945869],[108.502701,33.864243],[108.517845,33.807068],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.890709,32.63681],[105.87606,32.594234],[105.847389,32.569469],[105.851929,32.479237],[105.950455,32.391506],[105.81266,32.314232],[105.885315,32.231689],[105.885101,32.185265],[105.911423,32.151859],[105.899323,32.082684],[105.928635,32.036804],[105.91893,31.969107],[105.936134,31.914375],[105.934456,31.827391],[105.909637,31.708981],[105.917557,31.628593],[105.946251,31.59668],[105.953712,31.473728],[105.928932,31.350906],[105.959244,31.263042],[105.936226,31.10767],[105.843941,30.994661],[105.83062,30.917395],[105.710968,30.812786],[105.670937,30.801918],[105.636337,30.731133],[105.570107,30.656597],[105.620247,30.595806],[105.6605,30.466198],[105.655579,30.429949],[105.633415,30.40295],[105.51445,30.341902],[105.355301,30.010559],[105.333084,29.981602],[105.227417,29.924124],[105.077812,29.685564],[105.005966,29.628811],[104.968948,29.534986],[104.906586,29.487444],[104.817436,29.375874],[104.81723,29.34898],[104.789642,29.316429],[104.762474,29.092627],[104.685837,28.927628],[104.655289,28.896156],[104.651939,28.855873],[104.604675,28.80419],[104.615486,28.764462],[104.631134,28.760324]]},type:"Feature",properties:{destinationid:"511500",id:270,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.944077,34.542061],[109.762444,34.500278],[109.575958,34.496815],[109.494171,34.473949],[109.380341,34.482395],[109.312233,34.460381],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891678,32.637592],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.72525,32.361179],[105.608154,32.33551],[105.52935,32.274403],[105.481796,32.276508],[105.234596,32.120651],[105.134659,32.036667],[105.013374,31.887321],[104.914207,31.836006],[104.815605,31.711845],[104.735611,31.565592],[104.692917,31.554327],[104.585014,31.419184],[104.557549,31.425678],[104.378326,31.368046],[104.185883,31.235937],[103.998985,30.987747],[103.975449,30.928013],[103.980995,30.901085],[103.847427,30.847145],[103.770851,30.783447],[103.709801,30.711658],[103.716278,30.656584],[103.659767,30.648802],[103.636887,30.621805],[103.553192,30.589874],[103.543037,30.56292],[103.498405,30.549435],[103.426308,30.463924],[103.428864,30.412636],[103.411835,30.376165],[103.314026,30.287901],[103.239891,30.243416],[103.225777,30.208597],[103.197479,30.19128],[103.181572,30.127356],[103.001122,29.987646]]},type:"Feature",properties:{destinationid:"511800",id:271,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.944077,34.542061],[109.762444,34.500278],[109.575958,34.496815],[109.494171,34.473949],[109.380341,34.482395],[109.310913,34.459747],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446297,33.617107],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230293,33.395672],[108.069504,33.307686],[108.048347,33.30883],[108.038406,33.290367],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.079605,33.023746],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.739357,33.077412],[106.655273,33.057083],[106.638161,33.026417],[106.53273,33.004044],[106.523193,32.972618],[106.465805,32.973289],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891678,32.637592],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.72525,32.361179],[105.63726,32.347584],[105.530113,32.274719],[105.48349,32.277161],[105.436028,32.253773],[105.135559,32.037567],[105.012871,31.886917],[104.91494,31.836767],[104.815605,31.711845],[104.735611,31.565592],[104.693474,31.554867],[104.523598,31.340816],[104.441704,31.283648],[104.415527,31.088737],[104.38475,31.076262],[104.373512,31.023853],[104.262184,30.919596],[104.352631,30.870329],[104.349251,30.839895],[104.404472,30.759705],[104.395401,30.727987],[104.450142,30.607309],[104.432945,30.460979],[104.485069,30.435255],[104.531982,30.353897],[104.565262,30.340946],[104.611008,30.255026],[104.601242,30.128016],[104.641518,30.122322]]},type:"Feature",properties:{destinationid:"512000",id:272,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.36689,34.47998],[109.255424,34.429531],[109.092979,34.313629],[109.09333,34.285957],[109.044167,34.207432],[108.976883,34.187119],[108.823997,34.190548],[108.699661,34.137241],[108.656975,34.092773],[108.58976,34.078442],[108.545395,34.033794],[108.523727,33.96833],[108.53019,33.945869],[108.502701,33.864243],[108.517845,33.807068],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891968,32.637772],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.72525,32.361179],[105.608154,32.33551],[105.52935,32.274403],[105.481796,32.276508],[105.234596,32.120651],[105.134659,32.036667],[105.013374,31.887321],[104.914207,31.836006],[104.815605,31.711845],[104.735611,31.565592],[104.692917,31.554327],[104.585014,31.419184],[104.557549,31.425678],[104.378326,31.368046],[104.185097,31.235191],[103.998985,30.987747],[103.975449,30.928013],[103.980621,30.900694],[103.847427,30.847145],[103.770851,30.783447],[103.709801,30.711658],[103.716278,30.656584],[103.659767,30.648802],[103.636887,30.621805],[103.553192,30.589874],[103.543037,30.56292],[103.498405,30.549435],[103.426308,30.463924],[103.429039,30.413771],[103.413406,30.378086],[103.314026,30.287901],[103.239891,30.243416],[103.225777,30.208597],[103.197479,30.19128],[103.181786,30.12756],[103.102669,30.062004],[102.990639,30.0149],[102.958328,29.979149],[102.910744,29.889435],[102.926987,29.871002],[102.891655,29.798971],[102.857948,29.772444],[102.832855,29.693666],[102.765594,29.67592],[102.73539,29.608097],[102.64637,29.514549],[102.667328,29.471258],[102.625999,29.42683],[102.633179,29.370035],[102.593575,29.322474],[102.532112,29.279358],[102.368065,29.237282],[102.389511,29.182076],[102.336761,29.121229],[102.345039,29.069553],[102.30098,28.990387],[102.316605,28.982286],[102.305473,28.984686],[102.301819,28.948807],[102.316277,28.947287],[102.30439,28.948734],[102.302269,28.924845],[102.317429,28.898199],[102.25341,28.76438],[102.266098,28.691698],[102.212914,28.538111],[102.217194,28.419432],[102.170692,28.248569],[102.170525,28.049011],[102.194229,27.893061],[102.25882,27.887114]]},type:"Feature",properties:{destinationid:"513400",id:273,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258331,30.371349],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867805,29.839649],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.569908,29.113224],[111.581841,28.968706],[111.626541,28.940027],[111.614464,28.914827],[111.5756,28.869549],[111.520889,28.840382],[111.453484,28.758816],[111.384933,28.730265],[111.269165,28.649057],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.316238,28.277599],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276932,27.824854],[109.221794,27.795916],[109.171555,27.73168],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.213173,27.042822],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.735306,26.672577],[106.686905,26.693979],[106.660828,26.652882],[106.665863,26.582373],[106.713516,26.578325]]},type:"Feature",properties:{destinationid:"520100",id:274,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.831184,34.826656],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.073761,34.540165],[109.944077,34.542061],[109.762444,34.500278],[109.575958,34.496815],[109.494171,34.473949],[109.380341,34.482395],[109.31472,34.461437],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891678,32.637592],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.72525,32.361179],[105.608154,32.33551],[105.52935,32.274403],[105.481796,32.276508],[105.234596,32.120651],[105.134659,32.036667],[105.013374,31.887321],[104.914207,31.836006],[104.815605,31.711845],[104.735611,31.565592],[104.692917,31.554327],[104.585014,31.419184],[104.557549,31.425678],[104.378738,31.368233],[104.217003,31.261116],[103.999535,30.988611],[103.975449,30.928013],[103.981186,30.901289],[103.827271,30.834591],[103.67569,30.954805],[103.628357,30.944288],[103.599686,30.957218],[103.59227,30.995604],[103.493759,31.062868],[103.499466,31.194019],[103.469215,31.299618],[103.546967,31.444626],[103.589066,31.482901],[103.509384,31.549404],[103.337906,31.569679],[103.226234,31.515774],[103.171021,31.45949],[103.178299,31.440178],[103.15609,31.434576],[103.145584,31.406448],[103.135864,31.416775],[103.084015,31.396832],[103.070015,31.420588],[103.041237,31.419931],[102.972008,31.502764],[102.882866,31.533119],[102.822037,31.573685],[102.829636,31.634705],[102.746758,31.696909],[102.741745,31.739454],[102.710419,31.770178],[102.685188,31.831388],[102.626328,31.849905],[102.634346,31.870378],[102.598495,31.825218],[102.545456,31.830381],[102.481117,31.865694],[102.356834,31.857838],[102.319748,31.877182],[102.295593,31.867054],[102.221657,31.899612]]},type:"Feature",properties:{destinationid:"513200",id:275,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.073761,34.540165],[109.944077,34.542061],[109.762444,34.500278],[109.575958,34.496815],[109.494171,34.473949],[109.380341,34.482395],[109.31472,34.461437],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.891678,32.637592],[105.873154,32.616257],[105.87606,32.594234],[105.847389,32.569469],[105.852196,32.480728],[105.767746,32.433266],[105.72525,32.361179],[105.608154,32.33551],[105.52935,32.274403],[105.481796,32.276508],[105.234596,32.120651],[105.134659,32.036667],[105.013374,31.887321],[104.914207,31.836006],[104.815605,31.711845],[104.735611,31.565592],[104.692917,31.554327],[104.585014,31.419184],[104.557549,31.425678],[104.378326,31.368046],[104.185883,31.235937],[103.998985,30.987747],[103.975449,30.928013],[103.981186,30.901289],[103.847427,30.847145],[103.770851,30.783447],[103.709801,30.711658],[103.716278,30.656584],[103.659767,30.648802],[103.636887,30.621805],[103.553192,30.589874],[103.543037,30.56292],[103.498405,30.549435],[103.426308,30.463924],[103.428864,30.412636],[103.412697,30.377195],[103.314026,30.287901],[103.240341,30.243889],[103.225777,30.208597],[103.197479,30.19128],[103.182014,30.127832],[103.103539,30.062517],[102.947594,29.986515],[102.899582,30.024782],[102.870735,30.003298],[102.860023,30.023087],[102.791458,30.017174],[102.725716,30.08493],[102.663651,30.080196],[102.543015,30.007391],[102.454605,30.003065],[102.438011,29.968302],[102.389465,29.942053],[102.354874,29.873632],[102.257523,29.841671],[102.223602,29.800032],[102.216606,29.893009],[102.230293,29.931498],[102.208679,29.957022],[102.205734,29.995373],[102.160248,30.049809],[102.176926,30.06105],[102.168297,30.073086],[102.122772,30.062122],[102.046539,30.100109],[102.007553,30.061493],[101.963699,30.050737]]},type:"Feature",properties:{destinationid:"513300",id:276,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761841,38.355289],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890045,33.963284],[113.780174,33.956554],[113.582321,33.848877],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.2556,32.607422],[112.214661,32.539764],[112.117584,32.446537],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352608,31.363224],[112.344002,31.287214],[112.298508,31.240061],[112.266685,31.08032],[112.268585,30.951244],[112.103172,30.902],[111.862793,30.78091],[111.5756,30.737356],[111.490616,30.66588],[111.432571,30.583672],[111.251831,30.5298],[111.184647,30.560053],[111.150124,30.552542],[111.012794,30.576771],[110.942001,30.613106],[110.880402,30.59586],[110.798126,30.602341],[110.7379,30.62653],[110.575577,30.625565],[110.302734,30.604813],[110.103867,30.651608],[110.006691,30.590273],[109.894669,30.546406],[109.855232,30.496666],[109.802757,30.462925],[109.748909,30.463455],[109.707695,30.488356],[109.630379,30.452023],[109.565926,30.379887],[109.510323,30.24596],[109.484871,30.221684],[109.449417,30.221785],[109.462685,30.159613],[109.435158,30.043467],[109.443779,29.998547],[109.423111,29.950346],[109.193802,29.784773],[109.179832,29.712925],[109.064949,29.609835],[109.011566,29.589777],[108.924599,29.595142],[108.84565,29.548975],[108.784355,29.551476],[108.747643,29.524527],[108.719429,29.525356],[108.779236,29.453434],[108.764648,29.416088],[108.772499,29.349951],[108.75647,29.255901],[108.776535,29.209969],[108.754883,29.12841],[108.762505,29.079672],[108.812988,29.025875],[108.7388,28.867546],[108.786942,28.798899],[108.639488,28.765465],[108.620293,28.706566],[108.627396,28.674969],[108.59613,28.61598],[108.505257,28.531494],[108.42173,28.524115],[108.351608,28.549389],[108.253403,28.491579],[108.198097,28.375875],[108.130234,28.302561],[108.083725,28.289791],[108.064987,28.265669],[108.098228,28.195946],[108.056747,28.064596],[107.946106,28.116385],[107.756126,27.994085],[107.720802,27.928106],[107.527458,27.834982],[107.383286,27.706129],[107.273872,27.669317],[107.080086,27.65254],[107.016174,27.636475],[106.95639,27.597279],[106.841087,27.607555],[106.810905,27.589935],[106.664101,27.589909],[106.50251,27.526457],[106.445381,27.530506],[106.322937,27.49855],[106.27066,27.499823],[106.193901,27.467096],[106.134758,27.473763],[106.085739,27.428383],[106.088371,27.389917],[106.069794,27.369545],[106.015717,27.355473],[105.955544,27.312469],[105.922607,27.310833],[105.882919,27.275791],[105.830505,27.270113],[105.749008,27.197517],[105.703209,27.191067],[105.669632,27.209654],[105.595993,27.204357],[105.524002,27.231476],[105.356148,27.242546],[105.32029,27.216602],[105.317535,27.179567],[105.249321,27.05349],[105.237152,26.980324],[105.269958,26.877987],[105.257393,26.819031],[105.093292,26.684973],[104.998322,26.526541],[104.928772,26.515442],[104.84713,26.584518]]},type:"Feature",properties:{destinationid:"520200",id:277,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761841,38.355289],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.890045,33.963284],[113.780174,33.956554],[113.582321,33.848877],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.2556,32.607422],[112.214661,32.539764],[112.117584,32.446537],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352608,31.363224],[112.344002,31.287214],[112.298508,31.240061],[112.266685,31.08032],[112.268974,30.951712],[112.103172,30.902],[111.862793,30.78091],[111.5756,30.737356],[111.490616,30.66588],[111.432571,30.583672],[111.251831,30.5298],[111.184647,30.560053],[111.150124,30.552542],[111.012794,30.576771],[110.942001,30.613106],[110.880402,30.59586],[110.798126,30.602341],[110.7379,30.62653],[110.575577,30.625565],[110.302734,30.604813],[110.103867,30.651608],[110.006691,30.590273],[109.894669,30.546406],[109.855232,30.496666],[109.802757,30.462925],[109.748909,30.463455],[109.707695,30.488356],[109.630379,30.452023],[109.565926,30.379887],[109.510323,30.24596],[109.484871,30.221684],[109.449417,30.221785],[109.462685,30.159613],[109.435158,30.043467],[109.443779,29.998547],[109.423111,29.950346],[109.193802,29.784773],[109.179832,29.712925],[109.064949,29.609835],[109.011566,29.589777],[108.924599,29.595142],[108.84565,29.548975],[108.784355,29.551476],[108.747643,29.524527],[108.719383,29.525278],[108.779236,29.453434],[108.764648,29.416088],[108.772499,29.349951],[108.75647,29.255901],[108.776535,29.209969],[108.754883,29.12841],[108.762505,29.079672],[108.812988,29.025875],[108.7388,28.867546],[108.786728,28.798559],[108.639488,28.765465],[108.620293,28.706566],[108.627396,28.674969],[108.59613,28.61598],[108.505257,28.531494],[108.42173,28.524115],[108.351608,28.549389],[108.253403,28.491579],[108.198097,28.375875],[108.130234,28.302561],[108.083725,28.289791],[108.064987,28.265669],[108.098198,28.195295],[108.055458,28.063721],[107.946106,28.116385],[107.756126,27.994085],[107.720802,27.928106],[107.527458,27.834982],[107.383286,27.706129],[107.273872,27.669317],[107.118011,27.654385],[107.101944,27.660418],[107.088348,27.718903],[107.060608,27.706623],[106.964676,27.726042],[106.93721,27.706749]]},type:"Feature",properties:{destinationid:"520300",id:278,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258499,30.3729],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.918663,29.891636],[111.866798,29.837282],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761635,29.147879],[111.706238,29.126894],[111.570686,29.114363],[111.581841,28.968706],[111.626389,28.94026],[111.616051,28.917187],[111.5756,28.869549],[111.520889,28.840382],[111.454109,28.759298],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.304924,28.274084],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.289932,27.896399],[109.27742,27.8256],[109.220459,27.795408],[109.191666,27.718416]]},type:"Feature",properties:{destinationid:"520600",id:279,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258331,30.371349],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867805,29.839649],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.569908,29.113224],[111.581726,28.969223],[111.626541,28.940027],[111.613838,28.913975],[111.5756,28.869549],[111.520889,28.840382],[111.453484,28.758816],[111.384933,28.730265],[111.269165,28.649057],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276932,27.824854],[109.221794,27.795916],[109.171555,27.73168],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.721184,27.743429],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.910507,27.245674],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212296,27.042374],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.618835,26.696394],[106.587753,26.661585],[106.576767,26.592518],[106.539856,26.564026],[106.346718,26.489832],[106.289032,26.458334],[106.246979,26.407883],[106.099831,26.337227],[106.000908,26.261349],[105.932014,26.245481]]},type:"Feature",properties:{destinationid:"520400",id:280,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258331,30.371349],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867805,29.839649],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.569908,29.113224],[111.581841,28.968706],[111.626389,28.94026],[111.616051,28.917187],[111.5756,28.869549],[111.520889,28.840382],[111.454109,28.759298],[111.384933,28.730265],[111.269165,28.649057],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.316238,28.277599],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732597,28.262787],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614044,27.987928],[109.57254,27.962414],[109.290382,27.896662],[109.268997,27.816071],[109.228752,27.80204],[109.172264,27.7321],[109.133362,27.72987],[109.153328,27.660984],[109.123184,27.616758],[109.141541,27.599718],[109.127777,27.554089],[109.14254,27.531689],[109.022758,27.360178],[109.04023,27.294231],[108.866394,27.225807],[108.791214,27.163233],[108.755211,27.113903],[108.759354,27.091511],[108.737785,27.066147],[108.745544,27.045946],[108.670624,26.970501],[108.658394,26.934978],[108.632523,26.928251],[108.623199,26.871012],[108.571609,26.788889],[108.516777,26.750078],[108.260574,26.6394],[108.219559,26.594307],[108.092865,26.559135],[108.042274,26.564144],[108.021812,26.592543],[107.977448,26.583611]]},type:"Feature",properties:{destinationid:"522600",id:281,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258331,30.371349],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867805,29.839649],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.569908,29.113224],[111.581841,28.968706],[111.626541,28.940027],[111.615379,28.916155],[111.5756,28.869549],[111.520889,28.840382],[111.454109,28.759298],[111.384933,28.730265],[111.269165,28.649057],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.316238,28.277599],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732597,28.262787],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614044,27.987928],[109.57254,27.962414],[109.290382,27.896662],[109.268997,27.816071],[109.228752,27.80204],[109.172264,27.7321],[109.133362,27.72987],[109.153328,27.660984],[109.123184,27.616758],[109.141541,27.599718],[109.127777,27.554089],[109.14254,27.531689],[109.022758,27.360178],[109.04023,27.294231],[108.866394,27.225807],[108.791214,27.163233],[108.755211,27.113903],[108.759354,27.091511],[108.737785,27.066147],[108.745544,27.045946],[108.670624,26.970501],[108.658394,26.934978],[108.632523,26.928251],[108.623199,26.871012],[108.571609,26.788889],[108.516777,26.750078],[108.260574,26.6394],[108.220444,26.594696],[108.141289,26.571991],[108.092865,26.559135],[108.01368,26.567482],[107.838112,26.520168],[107.563705,26.50358],[107.532509,26.39905],[107.512917,26.383564],[107.503723,26.311285],[107.516548,26.305683],[107.51738,26.258224]]},type:"Feature",properties:{destinationid:"522700",id:282,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258331,30.371349],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867805,29.839649],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.569908,29.113224],[111.581726,28.969223],[111.626541,28.940027],[111.613838,28.913975],[111.5756,28.869549],[111.520889,28.840382],[111.453484,28.758816],[111.384933,28.730265],[111.269165,28.649057],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276749,27.8246],[109.221794,27.795916],[109.171043,27.731428],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.910507,27.245674],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212296,27.042374],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.618835,26.696394],[106.587753,26.661585],[106.576767,26.592518],[106.540344,26.564348],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.055092,26.309536],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.643478,25.961315],[105.581322,25.93343],[105.540939,25.935068],[105.521439,25.902704],[105.458527,25.888512],[105.419823,25.927305],[105.366432,25.936129],[105.268738,25.864773],[105.210434,25.860434],[105.168533,25.794666],[105.087982,25.747364],[105.10321,25.623129],[105.091469,25.594749],[105.123405,25.592505],[105.143562,25.553247],[105.150909,25.441225],[105.060165,25.310934],[105.068703,25.255131],[105.049103,25.18689],[104.996658,25.187109],[104.929932,25.148001],[104.897728,25.08832]]},type:"Feature",properties:{destinationid:"522300",id:283,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.371094,34.48103],[109.256744,34.430332],[109.092812,34.313454],[109.058807,34.22089],[109.00251,34.196934],[109.001358,34.122738],[109.027634,34.09256],[109.024925,34.054745],[108.96785,34.015545],[108.923485,33.960728],[109.082764,33.720173],[109.116615,33.695065],[109.120132,33.664032],[109.16288,33.631443],[109.165955,33.480202],[109.186844,33.399155],[109.169014,33.29237],[109.183388,33.26276],[109.166054,33.243446],[109.170265,33.219116],[109.136787,33.193428],[109.128258,33.156734],[109.140953,33.135818],[109.118942,33.096272],[109.082375,33.074596],[109.007881,32.964527],[108.962112,32.92408],[108.971069,32.897255],[108.925697,32.826832],[108.934563,32.79987],[108.914604,32.718517],[108.891769,32.705925],[108.77359,32.72253],[108.756508,32.642357],[108.732506,32.611908],[108.670807,32.579155],[108.625237,32.58884],[108.545609,32.514977],[108.452194,32.505833],[108.446877,32.473862],[108.342392,32.425369],[108.220261,32.292828],[108.116302,32.270054],[108.059219,32.161545],[108.04837,32.082748],[108.145699,31.963388],[108.130356,31.893307],[108.079712,31.847561],[108.029922,31.832369],[108.027115,31.803612],[107.995705,31.771967],[107.989822,31.726189],[107.951843,31.681671],[107.88343,31.639149],[107.827843,31.581106],[107.746307,31.535664],[107.662834,31.452644],[107.656303,31.413643],[107.537056,31.330191],[107.533875,31.227781],[107.488457,31.045588],[107.450958,31.013229],[107.403519,30.928806],[107.325668,30.881237],[107.199135,30.76063],[107.150764,30.649563],[107.109138,30.596107],[107.052979,30.4494],[106.963264,30.321726],[106.926514,30.299858],[106.872597,30.229969],[106.8311,30.14356],[106.849243,30.070669],[106.831696,29.960724],[106.774597,29.887232],[106.760765,29.842327],[106.736412,29.829622],[106.642235,29.650928],[106.618851,29.62731],[106.594505,29.63372],[106.483528,29.604675],[106.44445,29.550474],[106.439133,29.514763],[106.366898,29.516338],[106.339455,29.483068],[106.299881,29.466333],[106.281731,29.341831],[106.334839,29.244162],[106.29837,29.212299],[106.266159,29.152317],[106.181229,29.075142],[106.10183,29.043789],[106.058914,28.977491],[106.011826,28.943338],[105.858826,28.879681],[105.793251,28.832436],[105.616936,28.829973],[105.472183,28.806372],[105.346008,28.734919],[105.350792,28.705683],[105.336021,28.683416],[105.3536,28.656515],[105.332817,28.610151],[105.340981,28.568033],[105.32019,28.526775],[105.331848,28.510906],[105.320976,28.448751],[105.361511,28.407249],[105.372765,28.35734],[105.427956,28.312645],[105.41758,28.246679],[105.433128,28.183552],[105.562134,28.055422],[105.566963,27.996498],[105.547554,27.980278],[105.598801,27.961489],[105.610641,27.886986],[105.565598,27.845346],[105.568924,27.79859],[105.529121,27.770519],[105.387123,27.733107],[105.349739,27.680943],[105.416061,27.505619],[105.407028,27.43211],[105.388367,27.407974],[105.400444,27.364914],[105.284935,27.301813]]},type:"Feature",properties:{destinationid:"520500",id:284,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258095,30.36974],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867989,29.840055],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570206,29.113766],[111.58223,28.967266],[111.626846,28.939035],[111.578842,28.872595],[111.523048,28.84236],[111.453484,28.758816],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276749,27.8246],[109.221794,27.795916],[109.171043,27.731428],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.909317,25.670174],[103.857536,25.640787],[103.832848,25.548651],[103.805931,25.546553],[103.797829,25.501553]]},type:"Feature",properties:{destinationid:"530300",id:285,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258095,30.36974],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867989,29.840055],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570206,29.113766],[111.58223,28.967266],[111.626846,28.939035],[111.578842,28.872595],[111.523048,28.84236],[111.453484,28.758816],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276749,27.8246],[109.221794,27.795916],[109.171043,27.731428],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.882385,25.662983],[103.846916,25.62155],[103.810623,25.480577],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.045921,25.35516],[102.94429,25.287392],[102.912483,25.184769],[102.845322,25.123312],[102.795547,25.120018],[102.753876,25.09392],[102.712486,25.040516]]},type:"Feature",properties:{destinationid:"530100",id:286,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258095,30.36974],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867989,29.840055],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570206,29.113766],[111.58223,28.967266],[111.626846,28.939035],[111.578842,28.872595],[111.523048,28.84236],[111.453484,28.758816],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276749,27.8246],[109.221794,27.795916],[109.171043,27.731428],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.909317,25.670174],[103.856972,25.6399],[103.821358,25.492313],[103.793755,25.473248],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.051109,25.356445],[103.010612,25.339041],[102.94429,25.287392],[102.915184,25.188021],[102.865479,25.151346],[102.805992,25.074066],[102.806274,25.013393],[102.831177,24.979853],[102.822113,24.949141],[102.789673,24.925793],[102.818199,24.875053],[102.817833,24.839909],[102.7537,24.727644],[102.648415,24.657454],[102.583908,24.573078],[102.555176,24.513943],[102.564995,24.485168],[102.530792,24.350868],[102.544083,24.350317]]},type:"Feature",properties:{destinationid:"530400",id:287,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.36689,34.47998],[109.255424,34.429531],[109.092979,34.313629],[109.09333,34.285957],[109.044167,34.207432],[108.976883,34.187119],[108.823997,34.190548],[108.699661,34.137241],[108.656975,34.092773],[108.58976,34.078442],[108.545395,34.033794],[108.523727,33.96833],[108.53019,33.945869],[108.502701,33.864243],[108.517845,33.807068],[108.42627,33.677956],[108.446083,33.616783],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230515,33.395832],[108.069504,33.307686],[108.048347,33.30883],[108.039825,33.290905],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.490234,33.189064],[107.395691,33.133179],[107.077736,33.02335],[106.999428,33.019039],[106.895737,33.054581],[106.815659,33.051025],[106.742699,33.077354],[106.662376,33.059937],[106.63855,33.026558],[106.532341,33.003811],[106.523438,32.972717],[106.457138,32.967609],[106.40535,32.856693],[106.252914,32.820698],[106.157433,32.764687],[106.12571,32.721935],[106.086761,32.721104],[105.890709,32.63681],[105.87606,32.594234],[105.847389,32.569469],[105.851929,32.479237],[105.950455,32.391506],[105.81266,32.314232],[105.885315,32.231689],[105.885101,32.185265],[105.911423,32.151859],[105.899323,32.082684],[105.928635,32.036804],[105.91893,31.969107],[105.936134,31.914375],[105.934456,31.827391],[105.909637,31.708981],[105.917557,31.628593],[105.946251,31.59668],[105.953712,31.473728],[105.928932,31.350906],[105.959244,31.263042],[105.935753,31.10638],[105.843941,30.994661],[105.83062,30.917395],[105.710968,30.812786],[105.670937,30.801918],[105.636337,30.731133],[105.570107,30.656597],[105.620247,30.595806],[105.6605,30.466198],[105.655579,30.429949],[105.633415,30.40295],[105.51445,30.341902],[105.355301,30.010559],[105.333084,29.981602],[105.227417,29.924124],[105.077812,29.685564],[105.005966,29.628811],[104.968948,29.534986],[104.906586,29.487444],[104.817673,29.376297],[104.78154,29.273499],[104.766953,29.105082],[104.686035,28.927992],[104.655571,28.896753],[104.658569,28.870083],[104.634491,28.829453],[104.522995,28.702295],[104.526146,28.680634],[104.503487,28.66301],[104.497101,28.633556],[104.459671,28.604107],[104.3759,28.596062],[104.354393,28.561602],[104.330269,28.560673],[104.315262,28.540243],[104.273048,28.53668],[104.244629,28.559366],[104.191673,28.528637],[104.198112,28.445169],[104.150185,28.388672],[104.154068,28.360851],[104.13549,28.336348],[104.156288,28.261936],[104.139633,28.240608],[104.142433,28.204262],[104.111832,28.1954],[104.075012,28.130989],[104.135117,28.08954],[104.145905,28.042349],[104.089127,28.035824],[104.06942,28.013052],[104.031845,28.016466],[103.940201,27.961945],[103.922401,27.943975],[103.909454,27.872004],[103.856606,27.821424],[103.815208,27.843552],[103.768677,27.809835],[103.722771,27.802135],[103.762672,27.763493],[103.754532,27.681662],[103.776657,27.625292],[103.750343,27.502573],[103.775208,27.382196],[103.716812,27.336672]]},type:"Feature",properties:{destinationid:"530600",id:288,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258095,30.36974],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867989,29.840055],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570206,29.113766],[111.58223,28.967266],[111.626846,28.939035],[111.578842,28.872595],[111.523048,28.84236],[111.453484,28.758816],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276749,27.8246],[109.221794,27.795916],[109.171043,27.731428],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.909317,25.670174],[103.856972,25.6399],[103.821358,25.492313],[103.793755,25.473248],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.051109,25.356445],[103.007446,25.337296],[102.94429,25.287392],[102.915184,25.188021],[102.865479,25.151346],[102.805992,25.074066],[102.806274,25.013393],[102.831177,24.979853],[102.822113,24.949141],[102.789673,24.925793],[102.818199,24.875053],[102.817833,24.839909],[102.7537,24.727644],[102.648415,24.657454],[102.583908,24.573078],[102.55526,24.514326],[102.564995,24.485168],[102.529861,24.344185],[102.487297,24.271166],[102.47464,24.207035],[102.381668,24.166908],[102.296806,24.077312],[102.196487,24.034498],[102.138519,23.888351],[102.113052,23.861502],[102.089432,23.8647],[102.104454,23.845329],[102.036072,23.749804],[102.021843,23.749207],[102.032684,23.701948],[101.97509,23.682423],[101.97242,23.647644],[101.953682,23.630659],[101.87384,23.655117],[101.829994,23.642014],[101.761475,23.554041],[101.694382,23.512865],[101.702774,23.471252],[101.676895,23.444344],[101.678261,23.411428],[101.620987,23.425865],[101.584389,23.386599],[101.582596,23.361052],[101.543289,23.358698],[101.492737,23.295803],[101.339584,23.307196],[101.339798,23.252369],[101.32383,23.234125],[101.285248,23.259111],[101.15667,23.253511],[101.1455,23.192991],[101.18029,23.115925],[101.125359,23.072647],[101.088394,23.065113],[101.070702,23.001616],[101.082993,22.967304],[101.045181,22.953215],[101.041183,22.887691],[100.961952,22.833584],[100.954605,22.815355],[100.972336,22.777195]]},type:"Feature",properties:{destinationid:"530800",id:289,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258095,30.36974],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867989,29.840055],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570206,29.113766],[111.58223,28.967266],[111.626854,28.938807],[111.577827,28.871529],[111.523048,28.84236],[111.453484,28.758816],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276749,27.8246],[109.221794,27.795916],[109.171043,27.731428],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.51712,25.90066],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.882385,25.662983],[103.846916,25.62155],[103.820801,25.49098],[103.793755,25.473248],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.051109,25.356445],[103.009659,25.338537],[102.94429,25.287392],[102.915184,25.188021],[102.847565,25.124914],[102.784348,25.115452],[102.732704,25.070223],[102.667686,25.072838],[102.668259,25.030178],[102.633926,25.015121],[102.601402,24.972427],[102.533379,24.938803],[102.47216,24.942482],[102.422623,24.926046],[102.312256,24.972221],[102.217545,24.975906],[102.142998,24.92412],[102.109459,24.92882],[102.109024,24.953329],[102.092033,24.964207],[102.025406,24.980413],[101.954292,24.965113],[101.928772,24.979202],[101.894089,24.965946],[101.872032,24.936367],[101.806503,24.938894],[101.728455,24.984207],[101.713364,25.040352],[101.647125,25.070087],[101.617241,25.078415],[101.546043,25.042023]]},type:"Feature",properties:{destinationid:"532300",id:290,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258095,30.36974],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867989,29.840055],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570206,29.113766],[111.58223,28.967266],[111.626854,28.938807],[111.577827,28.871529],[111.523048,28.84236],[111.453484,28.758816],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276749,27.8246],[109.221794,27.795916],[109.171043,27.731428],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.882385,25.662983],[103.846916,25.62155],[103.820801,25.49098],[103.793755,25.473248],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.051109,25.356445],[103.009659,25.338537],[102.94429,25.287392],[102.915184,25.188021],[102.847565,25.124914],[102.784348,25.115452],[102.732704,25.070223],[102.667686,25.072838],[102.668259,25.030178],[102.535088,24.939236],[102.47216,24.942482],[102.422623,24.926046],[102.312256,24.972221],[102.217545,24.975906],[102.142998,24.92412],[102.109459,24.92882],[102.109024,24.953329],[102.092033,24.964207],[102.025406,24.980413],[101.954292,24.965113],[101.928772,24.979202],[101.894089,24.965946],[101.872032,24.936367],[101.805496,24.939062],[101.728455,24.984207],[101.706047,25.044409],[101.620491,25.078625],[101.579201,25.053938],[101.502762,25.084352],[101.462166,25.083212],[101.250908,25.203819],[101.155563,25.236298],[101.07048,25.304272],[101.016006,25.317127],[100.985626,25.345491],[100.959793,25.336012],[100.869377,25.373854],[100.794037,25.426525],[100.646706,25.409245],[100.551224,25.448898],[100.505829,25.34457],[100.50647,25.300146],[100.58168,25.207432],[100.574692,25.191341],[100.604561,25.123306],[100.56089,25.107943],[100.552353,25.068697],[100.513397,25.030811],[100.459282,25.023811],[100.400917,24.972618],[100.323273,24.944845],[100.306679,24.837774],[100.342789,24.805218],[100.367264,24.750637],[100.354439,24.72714],[100.308472,24.740984],[100.232964,24.673515],[100.230736,24.61244],[100.203796,24.551155],[100.14595,24.437496],[100.108681,24.404154],[100.103722,24.332081],[100.03437,24.227079],[100.031273,24.184866],[100.079689,24.149765],[100.062447,24.069132],[100.103607,23.971889],[100.087044,23.886944]]},type:"Feature",properties:{destinationid:"530900",id:291,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.253571,30.401062],[112.25766,30.367174],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.868683,29.841454],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570435,29.114071],[111.58223,28.967266],[111.626648,28.937756],[111.578354,28.87207],[111.523048,28.84236],[111.454109,28.759298],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.941185,28.529284],[110.892166,28.547052],[110.810127,28.528793],[110.790459,28.54006],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.460526,28.417027],[110.305786,28.274323],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276932,27.824854],[109.221794,27.795916],[109.171555,27.73168],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.882385,25.662983],[103.846916,25.62155],[103.810623,25.480577],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.045326,25.354914],[102.95179,25.296776],[102.915184,25.188021],[102.847038,25.124472],[102.784348,25.115452],[102.732704,25.070223],[102.667686,25.072838],[102.668648,25.030651],[102.633926,25.015121],[102.624176,24.988697],[102.521423,24.936554],[102.485092,24.943893],[102.421669,24.926165],[102.312256,24.972221],[102.217545,24.975906],[102.142998,24.92412],[102.109459,24.92882],[102.109024,24.953329],[102.092033,24.964207],[102.025406,24.980413],[101.954292,24.965113],[101.928772,24.979202],[101.894089,24.965946],[101.872032,24.936367],[101.80481,24.93924],[101.728455,24.984207],[101.706047,25.044409],[101.620491,25.078625],[101.579201,25.053938],[101.502762,25.084352],[101.462166,25.083212],[101.250908,25.203819],[101.155563,25.236298],[101.07048,25.304272],[101.016006,25.317127],[100.985626,25.345491],[100.959793,25.336012],[100.869377,25.373854],[100.794037,25.426525],[100.642258,25.4105],[100.612793,25.462049],[100.536674,25.503824],[100.506859,25.545929],[100.467224,25.542723],[100.424675,25.497755],[100.336296,25.526663],[100.326019,25.630318],[100.344505,25.668758],[100.321388,25.698177],[100.26741,25.72332],[100.25766,25.759926],[100.269676,25.784426],[100.241524,25.827934],[100.224846,25.896866],[100.200485,25.902796],[100.157402,25.962126],[100.119675,25.984892],[100.094727,26.04858],[100.050072,26.060669],[99.978821,26.120806],[99.95842,26.205137],[99.969154,26.250984],[100.000397,26.272026],[100.007332,26.307173],[99.971832,26.351814],[99.980095,26.413616],[99.956726,26.437895],[99.924187,26.547131],[100.016541,26.804882],[100.087944,26.83112],[100.105843,26.815729],[100.137039,26.824207],[100.176659,26.881897],[100.233017,26.872053]]},type:"Feature",properties:{destinationid:"530700",id:292,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.253571,30.401062],[112.25766,30.367174],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.868683,29.841454],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570435,29.114071],[111.58223,28.967266],[111.626648,28.937756],[111.578354,28.87207],[111.523048,28.84236],[111.454605,28.759705],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.941185,28.529284],[110.892166,28.547052],[110.810127,28.528793],[110.790459,28.54006],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.460526,28.417027],[110.305786,28.274323],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276932,27.824854],[109.221794,27.795916],[109.171555,27.73168],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.882385,25.662983],[103.846916,25.62155],[103.820801,25.49098],[103.793755,25.473248],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.051109,25.356445],[103.009659,25.338537],[102.94429,25.287392],[102.915184,25.188021],[102.847565,25.124914],[102.784348,25.115452],[102.732704,25.070223],[102.667686,25.072838],[102.668259,25.030178],[102.535088,24.939236],[102.47216,24.942482],[102.422623,24.926046],[102.312256,24.972221],[102.217545,24.975906],[102.142998,24.92412],[102.109459,24.92882],[102.109024,24.953329],[102.092033,24.964207],[102.025406,24.980413],[101.954292,24.965113],[101.928772,24.979202],[101.894089,24.965946],[101.872032,24.936367],[101.80481,24.93924],[101.728455,24.984207],[101.706047,25.044409],[101.620491,25.078625],[101.579201,25.053938],[101.502762,25.084352],[101.462166,25.083212],[101.250908,25.203819],[101.155563,25.236298],[101.07048,25.304272],[101.016006,25.317127],[100.985626,25.345491],[100.959793,25.336012],[100.869377,25.373854],[100.794037,25.426525],[100.642258,25.4105],[100.612793,25.462049],[100.536674,25.503824],[100.506859,25.545929],[100.467224,25.542723],[100.424316,25.497765],[100.337227,25.526056],[100.320488,25.547747],[100.253197,25.545256],[100.206505,25.577969],[100.112175,25.554197],[100.051529,25.576809],[99.984779,25.489241],[99.86779,25.465328],[99.828163,25.426598],[99.753395,25.415693],[99.745293,25.392378],[99.706032,25.398737],[99.634109,25.380356],[99.626686,25.410578],[99.565506,25.42588],[99.46489,25.407539],[99.448883,25.43115],[99.395493,25.449053],[99.345467,25.362383],[99.284996,25.381689],[99.241615,25.339476],[99.193878,25.333998],[99.223007,25.221512],[99.209015,25.154079],[99.181572,25.109873],[99.16729,25.111753]]},type:"Feature",properties:{destinationid:"530500",id:293,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.253571,30.401062],[112.25766,30.367174],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.868683,29.841454],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570435,29.114071],[111.58223,28.967266],[111.626648,28.937756],[111.578354,28.87207],[111.523048,28.84236],[111.454605,28.759705],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.941185,28.529284],[110.892166,28.547052],[110.810127,28.528793],[110.790459,28.54006],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.460526,28.417027],[110.305786,28.274323],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276932,27.824854],[109.221794,27.795916],[109.171555,27.73168],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.882385,25.662983],[103.846916,25.62155],[103.820801,25.49098],[103.793755,25.473248],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.051109,25.356445],[103.009659,25.338537],[102.94429,25.287392],[102.915184,25.188021],[102.847565,25.124914],[102.784348,25.115452],[102.732704,25.070223],[102.667686,25.072838],[102.668259,25.030178],[102.535088,24.939236],[102.47216,24.942482],[102.422623,24.926046],[102.312256,24.972221],[102.217545,24.975906],[102.142998,24.92412],[102.109459,24.92882],[102.109024,24.953329],[102.092033,24.964207],[102.025406,24.980413],[101.954292,24.965113],[101.928772,24.979202],[101.894089,24.965946],[101.872032,24.936367],[101.80481,24.93924],[101.728455,24.984207],[101.706047,25.044409],[101.620491,25.078625],[101.579201,25.053938],[101.502762,25.084352],[101.462166,25.083212],[101.250908,25.203819],[101.155563,25.236298],[101.07048,25.304272],[101.016006,25.317127],[100.985626,25.345491],[100.959793,25.336012],[100.869377,25.373854],[100.794037,25.426525],[100.642258,25.4105],[100.612793,25.462049],[100.536674,25.503824],[100.506859,25.545929],[100.467224,25.542723],[100.424316,25.497765],[100.337227,25.526056],[100.320488,25.547747],[100.249207,25.546766],[100.225716,25.589777]]},type:"Feature",properties:{destinationid:"532900",id:294,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258331,30.371349],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867805,29.839649],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.569908,29.113224],[111.581726,28.969223],[111.626541,28.940027],[111.613838,28.913975],[111.5756,28.869549],[111.520889,28.840382],[111.453484,28.758816],[111.384933,28.730265],[111.269165,28.649057],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276749,27.8246],[109.221794,27.795916],[109.171043,27.731428],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.880943,25.662275],[103.853554,25.63088],[103.867668,25.620399],[103.860008,25.582453],[103.899162,25.524235],[103.898506,25.496748],[103.866051,25.42411],[103.829788,25.398386],[103.845444,25.271164],[103.826363,25.181211],[103.661339,25.045496],[103.61483,24.970261],[103.535072,24.928738],[103.486221,24.883533],[103.429199,24.891279],[103.30674,24.847622],[103.293007,24.858438],[103.280624,24.832991],[103.303932,24.693838],[103.371094,24.478306],[103.37838,24.371719],[103.403854,24.342182],[103.443199,24.220591],[103.418251,24.069944],[103.392639,24.03862],[103.378052,23.980278],[103.291534,23.874228],[103.269333,23.764952],[103.325714,23.617035],[103.369705,23.558666],[103.399994,23.554075],[103.420265,23.52796],[103.408943,23.4624],[103.422066,23.422859],[103.374229,23.38269],[103.384438,23.366772]]},type:"Feature",properties:{destinationid:"532500",id:295,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258331,30.371349],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867805,29.839649],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.569908,29.113224],[111.581726,28.969223],[111.626541,28.940027],[111.613838,28.913975],[111.5756,28.869549],[111.520889,28.840382],[111.453484,28.758816],[111.384933,28.730265],[111.269165,28.649057],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276749,27.8246],[109.221794,27.795916],[109.171043,27.731428],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.880478,25.661936],[103.853554,25.63088],[103.867668,25.620399],[103.860008,25.582453],[103.899162,25.524235],[103.898506,25.496748],[103.866051,25.42411],[103.829788,25.398386],[103.845444,25.271164],[103.826363,25.181211],[103.661339,25.045496],[103.61483,24.970261],[103.535072,24.928738],[103.486221,24.883533],[103.422104,24.890142],[103.30674,24.847622],[103.292717,24.858347],[103.280975,24.834352],[103.303932,24.693838],[103.371094,24.478306],[103.37838,24.371719],[103.403854,24.342182],[103.443092,24.221836],[103.418633,24.071043],[103.370651,23.9723],[103.395607,23.944717],[103.449486,23.942928],[103.458878,23.896137],[103.486061,23.873289],[103.539894,23.858025],[103.584328,23.873461],[103.628632,23.840609],[103.644608,23.806524],[103.800339,23.752392],[103.82003,23.68306],[103.914444,23.56163],[104.010223,23.538889],[104.057724,23.481216],[104.111275,23.463711],[104.160294,23.432505],[104.185043,23.396202],[104.243744,23.369617]]},type:"Feature",properties:{destinationid:"532600",id:296,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.253571,30.401062],[112.25766,30.367174],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.868683,29.841454],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570435,29.114071],[111.58223,28.967266],[111.626648,28.937756],[111.578354,28.87207],[111.523048,28.84236],[111.454109,28.759298],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.941185,28.529284],[110.892166,28.547052],[110.810127,28.528793],[110.790459,28.54006],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.460526,28.417027],[110.305786,28.274323],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276932,27.824854],[109.221794,27.795916],[109.171555,27.73168],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.882385,25.662983],[103.846916,25.62155],[103.820801,25.49098],[103.793755,25.473248],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.051109,25.356445],[103.009659,25.338537],[102.94429,25.287392],[102.915184,25.188021],[102.847565,25.124914],[102.784348,25.115452],[102.732704,25.070223],[102.667686,25.072838],[102.668259,25.030178],[102.633926,25.015121],[102.601402,24.972427],[102.534073,24.938963],[102.47216,24.942482],[102.422623,24.926046],[102.312256,24.972221],[102.217545,24.975906],[102.142998,24.92412],[102.109459,24.92882],[102.109024,24.953329],[102.092033,24.964207],[102.025406,24.980413],[101.971909,24.965902],[101.907341,24.973452],[101.871323,24.936197],[101.801788,24.940104],[101.728455,24.984207],[101.706047,25.044409],[101.620491,25.078625],[101.579201,25.053938],[101.502762,25.084352],[101.462166,25.083212],[101.250908,25.203819],[101.155563,25.236298],[101.07048,25.304272],[101.016006,25.317127],[100.985626,25.345491],[100.959793,25.336012],[100.869377,25.373854],[100.794037,25.426525],[100.642258,25.4105],[100.612793,25.462049],[100.536674,25.503824],[100.505348,25.546293],[100.466835,25.542492],[100.424316,25.497765],[100.337227,25.526056],[100.320488,25.547747],[100.253197,25.545256],[100.206985,25.57789],[100.112175,25.554197],[100.052658,25.577114],[99.984779,25.489241],[99.86779,25.465328],[99.828163,25.426598],[99.753395,25.415693],[99.745789,25.392473],[99.706032,25.398737],[99.634109,25.380356],[99.626686,25.410578],[99.565506,25.42588],[99.46489,25.407539],[99.448883,25.43115],[99.396896,25.449345],[99.345757,25.362591],[99.327713,25.378273],[99.307556,25.370865],[99.289856,25.385073],[99.278603,25.438498],[99.228966,25.462942],[99.176224,25.521393],[99.120598,25.533638],[99.102768,25.645729],[99.038162,25.663912],[99.015076,25.651234],[99.006332,25.622496],[98.953857,25.637783],[98.891136,25.632605],[98.873466,25.660433],[98.8545,25.850559]]},type:"Feature",properties:{destinationid:"533300",id:297,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.253571,30.401062],[112.25766,30.367174],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.868683,29.841454],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570435,29.114071],[111.58223,28.967266],[111.626648,28.937756],[111.578354,28.87207],[111.523048,28.84236],[111.454605,28.759705],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.941185,28.529284],[110.892166,28.547052],[110.810127,28.528793],[110.790459,28.54006],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.460526,28.417027],[110.305786,28.274323],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276932,27.824854],[109.221794,27.795916],[109.171555,27.73168],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.618835,26.696394],[106.587753,26.661585],[106.576767,26.592518],[106.540344,26.564348],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.055092,26.309536],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.648972,25.96467],[105.581322,25.93343],[105.540939,25.935068],[105.521439,25.902704],[105.458527,25.888512],[105.419823,25.927305],[105.365486,25.935843],[105.268738,25.864773],[105.210892,25.860798],[105.178894,25.805073],[105.103813,25.751188],[105.017822,25.75144],[104.954994,25.800114],[104.807365,25.791809],[104.649963,25.8228],[104.561241,25.794956],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.882385,25.662983],[103.846916,25.62155],[103.810623,25.480577],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.045921,25.35516],[102.95179,25.296776],[102.915184,25.188021],[102.846748,25.124241],[102.784348,25.115452],[102.732704,25.070223],[102.667686,25.072838],[102.668533,25.030495],[102.581245,24.959965],[102.433716,24.92577],[102.386703,24.931822],[102.311737,24.972345],[102.218277,24.975924],[102.147362,24.924757],[102.111717,24.927773],[102.107216,24.955238],[102.025406,24.980413],[101.971909,24.965902],[101.907341,24.973452],[101.871323,24.936197],[101.801353,24.940237],[101.728455,24.984207],[101.706047,25.044409],[101.620491,25.078625],[101.579201,25.053938],[101.502762,25.084352],[101.462166,25.083212],[101.250908,25.203819],[101.155563,25.236298],[101.07048,25.304272],[101.016006,25.317127],[100.985626,25.345491],[100.959793,25.336012],[100.869377,25.373854],[100.794037,25.426525],[100.642258,25.4105],[100.612793,25.462049],[100.536674,25.503824],[100.505348,25.546293],[100.466835,25.542492],[100.424316,25.497765],[100.337227,25.526056],[100.320488,25.547747],[100.253197,25.545256],[100.206985,25.57789],[100.112175,25.554197],[100.052658,25.577114],[99.984535,25.489107],[99.86779,25.465328],[99.828163,25.426598],[99.753395,25.415693],[99.748024,25.39315],[99.706032,25.398737],[99.634682,25.380356],[99.634827,25.402487],[99.608047,25.416622],[99.558922,25.425591],[99.46489,25.407539],[99.448883,25.43115],[99.396286,25.449293],[99.345467,25.362383],[99.284996,25.381689],[99.241615,25.339476],[99.193626,25.333607],[99.223007,25.221512],[99.209404,25.154991],[99.145927,25.026804],[99.150803,25.006115],[99.076523,24.995441],[99.073654,24.968512],[99.049225,24.954208],[99.009918,24.994692],[98.981171,24.991575],[98.949608,24.964701],[98.947739,24.940786],[98.917572,24.959995],[98.863953,24.91641],[98.835381,24.846292],[98.789238,24.832491],[98.799393,24.749067],[98.787521,24.679974],[98.711922,24.62627],[98.647369,24.554728],[98.606949,24.539127],[98.613174,24.528341],[98.634483,24.540195],[98.573402,24.478464],[98.590851,24.459093],[98.578758,24.436554]]},type:"Feature",properties:{destinationid:"533100",id:298,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.253571,30.401062],[112.25766,30.367174],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.868683,29.841454],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570435,29.114071],[111.58223,28.967266],[111.626648,28.937756],[111.578354,28.87207],[111.523048,28.84236],[111.453484,28.758816],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.941185,28.529284],[110.892166,28.547052],[110.810127,28.528793],[110.790459,28.54006],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.460526,28.417027],[110.305786,28.274323],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276932,27.824854],[109.221794,27.795916],[109.171555,27.73168],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.882385,25.662983],[103.846916,25.62155],[103.810623,25.480577],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.045921,25.35516],[102.95179,25.296776],[102.915184,25.188021],[102.846748,25.124241],[102.784348,25.115452],[102.732704,25.070223],[102.667686,25.072838],[102.668533,25.030495],[102.581245,24.959965],[102.433716,24.92577],[102.386703,24.931822],[102.311737,24.972345],[102.218277,24.975924],[102.147362,24.924757],[102.111717,24.927773],[102.107216,24.955238],[102.025406,24.980413],[101.971909,24.965902],[101.907341,24.973452],[101.871323,24.936197],[101.801788,24.940104],[101.728455,24.984207],[101.706047,25.044409],[101.620491,25.078625],[101.579201,25.053938],[101.502762,25.084352],[101.462166,25.083212],[101.250908,25.203819],[101.155563,25.236298],[101.07048,25.304272],[101.016006,25.317127],[100.985626,25.345491],[100.959793,25.336012],[100.869377,25.373854],[100.794037,25.426525],[100.642258,25.4105],[100.612793,25.462049],[100.536674,25.503824],[100.506859,25.545929],[100.467224,25.542723],[100.424675,25.497755],[100.335548,25.527355],[100.326019,25.630318],[100.344505,25.668758],[100.321388,25.698177],[100.26741,25.72332],[100.25766,25.759926],[100.269676,25.784426],[100.241524,25.827934],[100.224846,25.896866],[100.200485,25.902796],[100.157402,25.962126],[100.119675,25.984892],[100.094383,26.048893],[100.050629,26.060347],[99.99157,26.10663],[99.962204,26.165386],[99.968712,26.249817],[100.000397,26.272026],[100.007332,26.307173],[99.971832,26.351814],[99.980095,26.413616],[99.956726,26.437895],[99.924278,26.549726],[99.980888,26.687483],[100.021927,26.866671],[100.061821,26.932709],[100.075607,27.014753],[100.054398,27.107227],[100.065712,27.164444],[100.02523,27.223551],[99.986839,27.332327],[99.958977,27.333994],[99.944954,27.363274],[99.894348,27.342796],[99.905571,27.36628],[99.813065,27.454765],[99.804932,27.481485],[99.8293,27.530222],[99.741547,27.654184],[99.707497,27.754093],[99.718178,27.823324],[99.707474,27.826797]]},type:"Feature",properties:{destinationid:"533400",id:299,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.761536,38.354614],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.976852,35.305389],[113.899323,35.063862],[113.823189,34.937321],[113.817902,34.867428],[113.834328,34.832588],[113.81469,34.692577],[113.83033,34.589737],[113.809296,34.510128],[113.800774,34.319073],[113.82753,34.274036],[113.861839,34.117443],[113.890533,34.063305],[113.889931,33.963051],[113.780174,33.956554],[113.583572,33.849995],[113.461304,33.642376],[113.41629,33.609203],[113.330727,33.494755],[113.280403,33.461372],[113.209137,33.354679],[113.065361,33.28553],[112.962578,33.263626],[112.7276,33.126179],[112.674675,33.054955],[112.674225,32.992569],[112.497215,32.838543],[112.394196,32.712467],[112.263947,32.615601],[112.214355,32.53941],[112.118279,32.44833],[112.134186,32.372478],[112.108932,32.31567],[112.107368,32.203949],[112.077881,32.125687],[112.066055,32.022827],[112.075859,31.880123],[112.177139,31.712355],[112.270027,31.610201],[112.299049,31.504526],[112.333229,31.457514],[112.352737,31.361641],[112.344002,31.287214],[112.299019,31.242231],[112.267006,31.082541],[112.271141,30.932192],[112.236519,30.790413],[112.210167,30.576662],[112.209946,30.471161],[112.258095,30.36974],[112.22467,30.326097],[112.214996,30.267591],[112.184204,30.220179],[112.146057,30.035673],[112.112709,30.004208],[112.030052,29.979002],[111.996086,29.935799],[111.91967,29.892391],[111.867989,29.840055],[111.825722,29.698288],[111.822243,29.569845],[111.765259,29.445324],[111.782814,29.311525],[111.761742,29.148121],[111.706238,29.126894],[111.570206,29.113766],[111.58223,28.967266],[111.626846,28.939035],[111.57946,28.873302],[111.523048,28.84236],[111.453484,28.758816],[111.384933,28.730265],[111.268532,28.648758],[111.221069,28.644787],[111.083481,28.582895],[111.039505,28.583647],[110.940506,28.529072],[110.892166,28.547052],[110.810127,28.528793],[110.788445,28.539526],[110.693771,28.505487],[110.669266,28.478125],[110.603668,28.471827],[110.520622,28.425787],[110.46154,28.417427],[110.315903,28.277483],[110.122078,28.252487],[110.008415,28.268202],[109.952011,28.253191],[109.873123,28.27372],[109.815254,28.256052],[109.732918,28.262978],[109.67157,28.201557],[109.6213,28.100473],[109.603508,28.048264],[109.614304,27.988169],[109.57254,27.962414],[109.290382,27.896662],[109.276749,27.8246],[109.221794,27.795916],[109.171043,27.731428],[108.956329,27.714331],[108.880753,27.725405],[108.852669,27.710138],[108.795731,27.761242],[108.724091,27.744591],[108.64344,27.69142],[108.620003,27.646984],[108.58197,27.622942],[108.44503,27.55957],[108.363213,27.546398],[108.305016,27.508524],[108.238815,27.492163],[108.187538,27.441875],[107.969406,27.314735],[107.909958,27.245419],[107.864136,27.238607],[107.827477,27.211067],[107.642006,27.141272],[107.371559,27.090187],[107.32505,27.046753],[107.212753,27.042618],[107.175598,26.985973],[107.106705,26.941723],[107.09536,26.909145],[107.065804,26.88781],[106.973068,26.838619],[106.910286,26.841063],[106.860817,26.802053],[106.850616,26.746832],[106.812912,26.705938],[106.734718,26.672535],[106.670624,26.699936],[106.617683,26.695761],[106.588417,26.663055],[106.577255,26.593559],[106.558723,26.577404],[106.346718,26.489832],[106.289032,26.458334],[106.246223,26.40741],[106.056488,26.310455],[105.985474,26.236954],[105.888985,26.193388],[105.737404,26.049135],[105.66523,26.009413],[105.653069,25.967236],[105.582237,25.933685],[105.539597,25.934471],[105.518219,25.901085],[105.456528,25.888672],[105.419823,25.927305],[105.365921,25.935993],[105.268738,25.864773],[105.210892,25.860798],[105.179527,25.805773],[105.125351,25.760656],[105.053436,25.743238],[105.015617,25.75246],[104.955383,25.800049],[104.807365,25.791809],[104.640656,25.82098],[104.459015,25.737314],[104.404053,25.730616],[104.397568,25.703934],[104.315109,25.622335],[104.261467,25.636957],[104.260002,25.657053],[104.215607,25.682049],[104.158447,25.690041],[104.010376,25.660688],[103.909317,25.670174],[103.856972,25.6399],[103.821358,25.492313],[103.793755,25.473248],[103.587822,25.443159],[103.511917,25.386711],[103.377937,25.386845],[103.313309,25.363621],[103.281845,25.374874],[103.249512,25.350712],[103.20401,25.367609],[103.118607,25.336349],[103.051109,25.356445],[103.000389,25.333033],[102.942657,25.284973],[102.914299,25.186728],[102.865479,25.151346],[102.805992,25.074066],[102.806274,25.013393],[102.831177,24.979853],[102.822113,24.949141],[102.789673,24.925793],[102.818199,24.875053],[102.817833,24.839909],[102.7537,24.727644],[102.648415,24.657454],[102.583908,24.573078],[102.55526,24.514326],[102.564995,24.485168],[102.529861,24.344185],[102.487297,24.271166],[102.475723,24.208633],[102.456284,24.188646],[102.381668,24.166908],[102.296806,24.077312],[102.196487,24.034498],[102.138519,23.888351],[102.113052,23.861502],[102.089432,23.8647],[102.104454,23.845329],[102.036072,23.749804],[102.021843,23.749207],[102.032684,23.701948],[101.97509,23.682423],[101.97242,23.647644],[101.953682,23.630659],[101.87384,23.655117],[101.829994,23.642014],[101.761475,23.554041],[101.694382,23.512865],[101.702774,23.471252],[101.676895,23.444344],[101.679459,23.412436],[101.620987,23.425865],[101.584389,23.386599],[101.582596,23.361052],[101.543289,23.358698],[101.493118,23.295952],[101.340141,23.307444],[101.339798,23.252369],[101.323326,23.234003],[101.28479,23.259136],[101.165375,23.257053],[101.147461,23.242081],[101.146362,23.188881],[101.18029,23.115925],[101.125359,23.072647],[101.088142,23.064682],[101.070702,23.001616],[101.082993,22.967304],[101.045181,22.953215],[101.041183,22.887691],[100.96183,22.833361],[100.93055,22.685619],[100.931076,22.669714],[101.007805,22.608387],[101.05777,22.542267],[101.086731,22.470461],[101.061333,22.445065],[101.041245,22.452631],[101.003952,22.434849],[100.996025,22.348742],[100.890419,22.252596],[100.872192,22.168497],[100.891708,22.155222],[100.895012,22.098633],[100.917068,22.053616],[100.797882,22.001966]]},type:"Feature",properties:{destinationid:"532800",id:300,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.17318,34.759712],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.371094,34.48103],[109.255424,34.429531],[109.072685,34.298923],[108.946739,34.276947],[108.947411,34.263161]]},type:"Feature",properties:{destinationid:"610100",id:301,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717026,37.235706],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587395,36.193325],[103.433876,36.176792],[103.383415,36.143806],[103.355095,36.141521],[103.33345,36.161549],[103.265343,36.177979],[103.21833,36.172661],[103.117554,36.207817],[103.042801,36.235661],[102.982719,36.288765],[102.859566,36.331532],[102.763458,36.33316],[102.721733,36.359512],[102.693016,36.359444],[102.673927,36.404446],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096092,36.51638],[101.993668,36.512428],[101.940491,36.546028],[101.873131,36.550526],[101.799332,36.585876],[101.756676,36.586643],[101.690804,36.639732],[101.501999,36.637737],[101.42646,36.66954],[101.303268,36.683037],[101.271599,36.679245],[101.244408,36.5952],[101.150459,36.511517],[101.147789,36.473183],[101.111031,36.444019],[101.108421,36.424606],[101.052788,36.42231],[100.932571,36.377728],[100.882195,36.382309],[100.865784,36.365292],[100.78904,36.352505],[100.74527,36.350399],[100.713104,36.36972],[100.642105,36.310154],[100.428551,36.321598],[100.325378,36.353012],[100.196053,36.365662],[99.971039,36.437172],[99.782089,36.457932],[99.63179,36.541348],[99.529709,36.560532],[99.474159,36.612247],[99.356567,36.651932],[99.305923,36.708324],[99.245247,36.721985],[99.117874,36.789085],[99.041084,36.793983],[98.91246,36.761223],[98.871483,36.710293],[98.789192,36.704758],[98.745956,36.608696],[98.612495,36.522812],[98.627449,36.448364],[98.508476,36.429199],[98.287842,36.466454],[98.166931,36.427185],[98.162941,36.406319],[98.105217,36.376881],[98.123672,36.342773],[98.121758,36.292171],[98.098877,36.259712],[98.121323,36.224998],[98.175949,36.206379],[98.172287,36.067631],[98.032974,36.056313],[97.972633,36.024872],[97.88427,36.011574],[97.781975,36.035263],[97.647057,36.025505],[97.566818,36.052277],[97.453575,36.063194],[97.339767,36.119461],[97.146545,36.155357],[97.012321,36.220264],[96.862534,36.249573],[96.665024,36.34185],[96.432762,36.380543],[95.972771,36.357628],[95.696259,36.378429],[95.210594,36.31673],[95.090233,36.344398],[94.829185,36.335274],[94.785873,36.274075],[94.772217,36.217964],[94.778648,36.141148],[94.818527,36.12394],[94.801636,36.09021],[94.820518,36.0812],[94.831123,35.99884],[94.81263,35.943268],[94.759186,35.904011],[94.60305,35.902653],[94.566757,35.873409],[94.441803,35.893501],[94.37001,35.886257],[94.354134,35.86961],[94.336304,35.756096],[94.061958,35.71032],[94.050621,35.669415],[94.071487,35.630058],[94.009438,35.566711],[93.977127,35.565022],[93.917145,35.518875],[93.840775,35.512737],[93.792206,35.525982],[93.684868,35.500347],[93.570366,35.409386],[93.35701,35.344528],[93.293259,35.298241],[93.088196,35.238392],[93.037094,35.168575],[93.03746,35.099251],[93.013588,35.062618],[93.016266,35.038044],[92.953979,34.955235],[92.93486,34.878784],[92.949821,34.844753],[92.908371,34.794949],[92.884132,34.718266],[92.921997,34.664581],[92.892006,34.640648],[92.746117,34.589115],[92.728043,34.550137],[92.721909,34.415825],[92.665604,34.385017],[92.600204,34.372536],[92.585121,34.3195],[92.494186,34.284058],[92.424599,34.184761],[92.389641,34.161247],[92.37545,34.11805],[92.341972,34.097366],[92.366783,33.893425],[92.359482,33.851433],[92.290123,33.791779],[92.123993,33.733776],[92.055313,33.68195],[92.082634,33.608051],[92.066139,33.591152],[92.070656,33.57214],[92.013031,33.559341],[91.960365,33.49934],[91.933922,33.445999],[91.941544,33.382622],[91.869446,33.297367],[91.856461,33.226028],[91.863289,33.144283],[91.983025,32.9995],[91.987328,32.968956],[91.963638,32.929173],[91.922485,32.900635],[91.901024,32.766056],[91.847176,32.621342],[91.865639,32.594898],[91.851761,32.548927],[91.829628,32.553284],[91.823601,32.538113],[91.838112,32.508316],[91.792229,32.439075],[91.79834,32.411194],[91.71331,32.384495],[91.71328,32.341404],[91.736397,32.299404],[91.682838,32.259125],[91.676987,32.203625],[91.691353,32.180054],[91.711998,32.187328],[91.723846,32.144615],[91.719025,32.110916],[91.673828,32.083561],[91.726952,31.924887],[91.698372,31.893507],[91.696693,31.853724],[91.854515,31.679853],[91.756721,31.642822],[91.739059,31.612608],[91.774826,31.588261],[91.909912,31.568945],[92.035927,31.528606],[92.061882,31.515442],[92.064087,31.493378],[91.987602,31.432791],[91.955933,31.378994],[91.867683,31.311371],[91.799629,31.281908],[91.81002,31.271002],[91.783936,31.246071],[91.785858,31.216988],[91.760063,31.165123],[91.697609,31.116808],[91.691559,31.045126],[91.658424,30.976723],[91.61602,30.789696],[91.552856,30.715141],[91.535683,30.607227],[91.449799,30.560947],[91.125671,30.489094],[90.744881,30.271334],[90.677811,30.262981],[90.547485,30.141197],[90.547821,30.085346],[90.721634,29.957262],[90.726204,29.866901],[90.788933,29.746492],[90.889938,29.685665],[91.013481,29.645765],[91.104958,29.645664],[91.131859,29.660595]]},type:"Feature",properties:{destinationid:"540100",id:302,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643875,38.213333],[114.506676,38.207626],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.384987,38.066311],[113.396172,38.048012],[113.359688,37.891396],[113.36969,37.865093],[113.171227,37.874371],[113.089211,37.913761],[113.015869,37.890427],[112.970909,37.900326],[112.938118,37.866634],[112.890251,37.859039],[112.861763,37.794159],[112.80957,37.779396],[112.825058,37.699879],[112.81514,37.659264],[112.723129,37.540283],[112.457344,37.459221],[112.402046,37.456936],[112.358406,37.426346],[112.28595,37.409172],[112.256714,37.2332],[112.229332,37.194134],[112.111588,37.13327],[111.93763,37.004532],[111.929375,36.90556],[111.807312,36.761745],[111.814621,36.518082],[111.75795,36.364861],[111.731247,36.337513],[111.634628,36.320137],[111.518311,36.22295],[111.483688,36.169281],[111.454216,36.067677],[111.346291,35.869617],[111.276924,35.689785],[111.177101,35.64473],[110.801788,35.65081],[110.663704,35.598755],[110.567535,35.594921],[110.517128,35.559059],[110.477318,35.496948],[110.4431,35.391815],[110.414772,35.363499],[110.334206,35.296932],[110.250343,35.293915],[110.192245,35.259804],[110.163292,35.209915],[110.0952,35.16967],[110.0439,35.088676],[110.010643,35.076889],[109.959137,35.016884],[109.897072,35.000187],[109.805298,34.935165],[109.696594,34.929321],[109.475555,34.881626],[109.22242,34.720875],[109.167511,34.611061],[109.119072,34.575298],[109.109833,34.547909],[109.001442,34.568901],[108.827583,34.552479],[108.749771,34.511124],[108.644691,34.482822],[108.544067,34.392712],[108.545013,34.281624],[108.336784,34.243729],[107.836578,34.263298],[107.761482,34.300835],[107.58065,34.306549],[107.434425,34.344814],[107.144775,34.369011]]},type:"Feature",properties:{destinationid:"610300",id:303,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717026,37.235706],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587395,36.193325],[103.433876,36.176792],[103.383415,36.143806],[103.355095,36.141521],[103.33345,36.161549],[103.265343,36.177979],[103.21833,36.172661],[103.117554,36.207817],[103.042801,36.235661],[102.982719,36.288765],[102.859566,36.331532],[102.763458,36.33316],[102.721733,36.359512],[102.693016,36.359444],[102.673927,36.404446],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096092,36.51638],[101.993668,36.512428],[101.940491,36.546028],[101.873131,36.550526],[101.799332,36.585876],[101.756676,36.586643],[101.690804,36.639732],[101.501999,36.637737],[101.42646,36.66954],[101.303268,36.683037],[101.271599,36.679245],[101.244408,36.5952],[101.150459,36.511517],[101.147789,36.473183],[101.111031,36.444019],[101.108421,36.424606],[101.052788,36.42231],[100.932571,36.377728],[100.882195,36.382309],[100.865784,36.365292],[100.78904,36.352505],[100.74527,36.350399],[100.713104,36.36972],[100.642105,36.310154],[100.428551,36.321598],[100.325378,36.353012],[100.196053,36.365662],[99.971039,36.437172],[99.782089,36.457932],[99.63179,36.541348],[99.529709,36.560532],[99.474159,36.612247],[99.356567,36.651932],[99.305923,36.708324],[99.245247,36.721985],[99.117874,36.789085],[99.041084,36.793983],[98.91246,36.761223],[98.871483,36.710293],[98.789192,36.704758],[98.745956,36.608696],[98.612495,36.522812],[98.627449,36.448364],[98.508476,36.429199],[98.287842,36.466454],[98.166931,36.427185],[98.162941,36.406319],[98.105217,36.376881],[98.123672,36.342773],[98.121758,36.292171],[98.098877,36.259712],[98.121323,36.224998],[98.175949,36.206379],[98.172287,36.067631],[98.032974,36.056313],[97.972633,36.024872],[97.88427,36.011574],[97.781975,36.035263],[97.647057,36.025505],[97.566818,36.052277],[97.453575,36.063194],[97.339767,36.119461],[97.146545,36.155357],[97.012321,36.220264],[96.862534,36.249573],[96.665024,36.34185],[96.432762,36.380543],[95.972771,36.357628],[95.696259,36.378429],[95.210594,36.31673],[95.090233,36.344398],[94.829887,36.335552],[94.785873,36.274075],[94.772217,36.217964],[94.778648,36.141148],[94.818527,36.12394],[94.801636,36.09021],[94.820518,36.0812],[94.831123,35.99884],[94.81263,35.943268],[94.759186,35.904011],[94.60305,35.902653],[94.566757,35.873409],[94.441803,35.893501],[94.37001,35.886257],[94.354134,35.86961],[94.336304,35.756096],[94.061958,35.71032],[94.050621,35.669415],[94.071487,35.630058],[94.009438,35.566711],[93.977127,35.565022],[93.917145,35.518875],[93.840775,35.512737],[93.792206,35.525982],[93.684868,35.500347],[93.570366,35.409386],[93.35701,35.344528],[93.293259,35.298241],[93.088196,35.238392],[93.037094,35.168575],[93.03746,35.099251],[93.013588,35.062618],[93.016266,35.038044],[92.953979,34.955235],[92.93486,34.878784],[92.949821,34.844753],[92.908371,34.794949],[92.884132,34.718266],[92.921997,34.664581],[92.892006,34.640648],[92.746117,34.589115],[92.728043,34.550137],[92.721909,34.415825],[92.665604,34.385017],[92.600204,34.372536],[92.585121,34.3195],[92.494186,34.284058],[92.424599,34.184761],[92.389641,34.161247],[92.37545,34.11805],[92.341972,34.097366],[92.366783,33.893425],[92.359482,33.851433],[92.290123,33.791779],[92.123993,33.733776],[92.055313,33.68195],[92.082634,33.608051],[92.066139,33.591152],[92.070656,33.57214],[92.013031,33.559341],[91.960365,33.49934],[91.933922,33.445999],[91.941544,33.382622],[91.869446,33.297367],[91.856461,33.226028],[91.863289,33.144283],[91.983025,32.9995],[91.987328,32.968956],[91.963638,32.929173],[91.922485,32.900635],[91.901024,32.766056],[91.847176,32.621342],[91.865639,32.594898],[91.851761,32.548927],[91.829628,32.553284],[91.823601,32.538113],[91.838112,32.508316],[91.792229,32.439075],[91.79834,32.411194],[91.71331,32.384495],[91.71328,32.341404],[91.736397,32.299404],[91.682838,32.259125],[91.676987,32.203625],[91.691353,32.180054],[91.711998,32.187328],[91.723846,32.144615],[91.719025,32.110916],[91.673828,32.083561],[91.726952,31.924887],[91.698372,31.893507],[91.696693,31.853724],[91.854515,31.679853],[91.756721,31.642822],[91.739059,31.612608],[91.774826,31.588261],[91.909912,31.568945],[92.035927,31.528606],[92.065804,31.499479],[91.987602,31.432791],[91.955933,31.378994],[91.867683,31.311371],[91.799629,31.281908],[91.81002,31.271002],[91.783936,31.246071],[91.785858,31.216988],[91.760063,31.165123],[91.697609,31.116808],[91.691559,31.045126],[91.658424,30.976723],[91.61602,30.789696],[91.552856,30.715141],[91.536278,30.607834],[91.449799,30.560947],[91.126038,30.489248],[90.744881,30.271334],[90.680336,30.264076],[90.641472,30.237719],[90.621613,30.197344],[90.55011,30.146271],[90.544937,30.092314],[90.505394,30.093],[90.456619,30.060247],[90.395477,29.960787],[90.387665,29.916288],[90.362122,29.882938],[90.351807,29.805794],[90.378471,29.769239],[90.383324,29.722509],[90.363144,29.63625],[90.324135,29.589964],[90.273346,29.572733],[90.274544,29.509436],[90.244293,29.421362],[90.197968,29.404758],[90.176895,29.412973],[90.200264,29.345968],[90.078995,29.351616],[89.928947,29.315346],[89.858032,29.318794],[89.789528,29.294596],[89.713943,29.318485],[89.681175,29.356493],[89.444153,29.317482],[89.343689,29.340082],[89.230522,29.327339],[89.199364,29.33688],[89.122391,29.308775],[88.978127,29.329126],[88.922432,29.312084],[88.902145,29.271475],[88.885117,29.267759]]},type:"Feature",properties:{destinationid:"540200",id:304,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643875,38.213333],[114.506676,38.207626],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.384987,38.066311],[113.396172,38.048012],[113.359688,37.891396],[113.36969,37.865093],[113.171227,37.874371],[113.089211,37.913761],[113.015869,37.890427],[112.970909,37.900326],[112.938118,37.866634],[112.890251,37.859039],[112.861763,37.794159],[112.80957,37.779396],[112.825058,37.699879],[112.81514,37.659264],[112.723129,37.540283],[112.457344,37.459221],[112.402046,37.456936],[112.358406,37.426346],[112.28595,37.409172],[112.256714,37.2332],[112.229332,37.194134],[112.111588,37.13327],[111.93763,37.004532],[111.929375,36.90556],[111.807312,36.761745],[111.814621,36.518082],[111.75795,36.364861],[111.731247,36.337513],[111.634628,36.320137],[111.518311,36.22295],[111.483688,36.169281],[111.454216,36.067677],[111.346291,35.869617],[111.276924,35.689785],[111.177101,35.64473],[110.801788,35.65081],[110.663704,35.598755],[110.56813,35.595222],[110.517128,35.559059],[110.477318,35.496948],[110.4431,35.391815],[110.414772,35.363499],[110.334206,35.296932],[110.250343,35.293915],[110.192245,35.259804],[110.163292,35.209915],[110.0952,35.16967],[110.0439,35.088676],[110.010643,35.076889],[109.959137,35.016884],[109.897072,35.000187],[109.805298,34.935165],[109.696594,34.929321],[109.479095,34.883289],[109.22406,34.723949],[109.102509,34.732838],[109.057083,34.718697],[109.043327,34.773872],[108.977242,34.845139],[108.97963,34.916439]]},type:"Feature",properties:{destinationid:"610200",id:305,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.75779,34.570236],[110.377655,34.571564],[110.321548,34.602276],[110.170044,34.60957],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.36689,34.47998],[109.255058,34.429306],[109.097763,34.314453],[109.062943,34.352272],[108.976028,34.364532],[108.820908,34.339592],[108.782623,34.300407],[108.707207,34.311363],[108.705139,34.333282]]},type:"Feature",properties:{destinationid:"610400",id:306,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.866631,34.533092],[109.712517,34.495258],[109.502899,34.499828]]},type:"Feature",properties:{destinationid:"610500",id:307,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.677132,38.292843],[114.638,38.210957],[114.50605,38.207657],[114.449661,38.222797],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.188942,38.116745],[113.063766,38.10656],[113.015457,38.0592],[112.984406,38.049622],[112.917473,38.040104],[112.843437,38.060074],[112.663918,38.005768],[112.554153,38.030048],[112.490738,38.077888],[112.48838,38.106232],[112.394295,38.159195],[112.357948,38.164906],[112.310806,38.122696],[112.257477,38.111252],[112.130211,38.191978],[112.062172,38.199394],[111.977875,38.242668],[111.897644,38.247639],[111.875923,38.239777],[111.869438,38.202915],[111.719452,38.171272],[111.590157,38.108185],[111.429405,38.080658],[111.396729,38.025776],[111.313477,37.978249],[111.180748,38.010841],[110.877579,38.020321],[110.784393,38.055054],[110.54657,38.024708],[110.485138,38.037693],[110.42878,38.114868],[110.294098,38.220531],[110.12352,38.329735],[110.03746,38.359035],[109.973145,38.364697],[109.900978,38.349186],[109.824295,38.314396],[109.803635,38.278534],[109.739777,38.279133],[109.74073,38.290581]]},type:"Feature",properties:{destinationid:"610800",id:308,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.641891,38.212265],[114.50605,38.207657],[114.449661,38.222797],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717026,37.235706],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.238113,37.526417],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.253502,37.56163],[110.284508,37.530346],[110.263618,37.508003],[110.291901,37.46777],[110.150032,37.421074],[110.169174,37.382786],[110.16568,37.300793],[110.128693,37.128098],[110.112061,37.105442],[110.189316,36.888161],[110.091988,36.886425],[110.013153,36.84491],[109.877953,36.696568],[109.771629,36.705917],[109.630585,36.677063],[109.491287,36.596809]]},type:"Feature",properties:{destinationid:"610600",id:309,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587395,36.193325],[103.433876,36.176792],[103.384201,36.143925],[103.355095,36.141521],[103.33345,36.161549],[103.265343,36.177979],[103.21833,36.172661],[103.117554,36.207817],[103.042801,36.235661],[102.982719,36.288765],[102.859566,36.331532],[102.763458,36.33316],[102.721733,36.359512],[102.693016,36.359444],[102.673927,36.404446],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096092,36.51638],[101.992523,36.512676],[101.940491,36.546028],[101.873131,36.550526],[101.799332,36.585876],[101.756676,36.586643],[101.689354,36.640068],[101.573296,36.630352],[101.464767,36.645027],[101.425949,36.669632],[101.274117,36.681202],[101.244408,36.5952],[101.150459,36.511517],[101.147789,36.473183],[101.111031,36.444019],[101.109093,36.424931],[100.78904,36.352505],[100.74527,36.350399],[100.712685,36.369617],[100.70813,36.352531],[100.643265,36.310349],[100.557152,36.318302],[100.541718,36.293659],[100.557388,36.268024],[100.545456,36.221447],[100.517479,36.173382],[100.451042,36.116459],[100.317024,36.038666],[100.136581,35.964725],[100.119904,35.942406],[99.931961,35.869343],[99.91449,35.850361],[99.928352,35.843975],[99.896362,35.817581],[99.898712,35.797863],[99.85479,35.803589],[99.694756,35.875252],[99.640106,35.809372],[99.567673,35.794388],[99.540436,35.664261],[99.554199,35.613575],[99.527534,35.58408],[99.479309,35.43293],[99.454521,35.402988],[99.363037,35.422523],[99.284439,35.372936],[99.08461,35.342056],[98.978027,35.257786],[98.968971,35.193977],[98.878693,35.11343],[98.798859,35.102081],[98.735306,35.066029],[98.656883,35.064308],[98.430809,34.835846],[98.345093,34.829163],[98.23082,34.884644],[98.155006,34.881672],[98.132515,34.844166],[98.1241,34.777523],[98.135559,34.754734],[97.983315,34.592773],[97.998436,34.555908],[97.980713,34.489895],[97.944572,34.448997],[97.955048,34.384098],[97.931152,34.368305],[97.929611,34.332043],[97.881546,34.275803],[97.782646,34.208641],[97.765724,34.171928],[97.648666,34.127766],[97.581696,34.043503],[97.433487,33.983459],[97.351875,33.972572],[97.27002,33.897354],[97.12886,33.814213],[97.19442,33.680943],[97.197678,33.608852],[97.222519,33.589527],[97.217896,33.550434],[97.247665,33.508625],[97.23806,33.476494],[97.282669,33.44297],[97.340424,33.360794],[97.442551,33.31356],[97.47303,33.225021],[97.37281,33.173893],[97.350952,33.129803],[97.296288,33.093834],[97.257904,33.007294],[97.211426,32.989964],[97.047668,33.01899],[97.01033,33.003651],[97.045113,32.901653],[97.070702,32.875076],[97.061157,32.851818],[96.655167,32.889576],[96.671165,32.856163],[96.639465,32.793415],[96.648888,32.770927],[96.609123,32.660252],[96.552979,32.623486],[96.559158,32.590656],[96.37278,32.507519],[96.420921,32.429871],[96.429214,32.391605],[96.416779,32.373863],[96.455215,32.321777],[96.487679,32.190937],[96.534363,32.142582],[96.485031,32.014191],[96.5373,31.964649],[96.479576,31.965742],[96.479126,31.938702],[96.451698,31.929722],[96.417793,31.953493],[96.415512,31.992826],[96.358498,32.024162],[96.310715,31.972172],[96.340363,31.9604],[96.327843,31.933624],[96.292503,31.933111],[96.279022,31.915165],[96.339272,31.746502],[96.311714,31.714567],[96.318977,31.666216],[96.376488,31.635534],[96.412659,31.586384],[96.401581,31.553411],[96.337677,31.491867],[96.40303,31.483425],[96.42807,31.411276],[96.494583,31.368919],[96.55632,31.368324],[96.566483,31.343277],[96.596176,31.332518],[96.605446,31.183195],[96.625404,31.181858],[96.663643,31.124027],[96.697296,31.108015],[96.755959,31.126415],[96.805466,31.105747],[96.885582,31.106125],[96.962563,31.072756],[96.969322,31.054583],[97.023697,31.119158],[97.022301,31.185101],[97.09446,31.183897],[97.098709,31.167427],[97.179024,31.136957]]},type:"Feature",properties:{destinationid:"540300",id:310,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832512,34.827568],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.756348,34.569988],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.075714,34.54055],[109.944077,34.542061],[109.763443,34.50042],[109.649063,34.499863],[109.619278,34.453693],[109.59523,34.344193],[109.561127,34.319416],[109.551842,34.282608],[109.526054,34.270916],[109.488167,34.197803],[109.611061,34.154255],[109.757843,34.136364],[109.965797,34.011379],[109.956429,33.933754],[109.98024,33.86211],[109.964615,33.854523],[109.940002,33.868702]]},type:"Feature",properties:{destinationid:"611000",id:311,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.83197,34.827156],[113.706978,34.846054],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196869,34.612068],[110.166283,34.608326],[110.107155,34.552711],[110.071922,34.539864],[109.94297,34.541939],[109.763443,34.50042],[109.575958,34.496815],[109.494743,34.473988],[109.368073,34.480305],[109.256744,34.430332],[109.092979,34.313629],[109.09333,34.285957],[109.044785,34.207756],[108.976883,34.187119],[108.823997,34.190548],[108.565575,34.056461],[108.537033,34.016037],[108.505363,33.878544],[108.518349,33.808331],[108.42627,33.677956],[108.446297,33.617107],[108.395561,33.587208],[108.333618,33.507774],[108.243683,33.46217],[108.230293,33.395672],[108.069504,33.307686],[108.048347,33.30883],[108.038406,33.290367],[107.986076,33.303619],[107.949905,33.285393],[107.74514,33.261444],[107.668823,33.205246],[107.496017,33.190838],[107.395691,33.133179],[107.146233,33.048454],[107.105652,33.08371],[107.02903,33.077648]]},type:"Feature",properties:{destinationid:"610700",id:312,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.474632,38.741844],[115.331131,38.726128],[115.233849,38.670883],[115.15567,38.596569],[115.086563,38.574219],[114.990532,38.463135],[114.871872,38.438179],[114.762291,38.356239],[114.782608,38.035988],[114.748932,37.941711],[114.750114,37.852818],[114.688347,37.800156],[114.640869,37.688007],[114.650742,37.532295],[114.5989,37.348904],[114.577553,37.187267],[114.588081,37.061981],[114.550179,36.896275],[114.55233,36.587379],[114.535843,36.538246],[114.44442,36.427483],[114.395035,36.267551],[114.431396,36.078217],[114.41967,35.993198],[114.38707,35.882088],[114.331306,35.793156],[114.314041,35.719887],[114.217278,35.597988],[114.163742,35.557301],[114.133949,35.505314],[114.141136,35.456623],[114.086861,35.377003],[113.987328,35.31826],[113.955841,35.265415],[113.899323,35.063862],[113.824142,34.941238],[113.817902,34.867428],[113.832878,34.827915],[113.704468,34.846149],[113.554688,34.837803],[113.454918,34.861752],[113.347824,34.866402],[112.913811,34.762344],[112.653069,34.783489],[112.298676,34.73983],[112.215385,34.753677],[112.151665,34.736271],[112.074699,34.759392],[111.938675,34.749512],[111.777016,34.786404],[111.676506,34.753376],[111.624542,34.707901],[111.590309,34.700077],[111.274811,34.716774],[111.173752,34.759777],[111.033394,34.722389],[110.993797,34.673515],[110.88736,34.639057],[110.846428,34.591362],[110.754059,34.569603],[110.377655,34.571564],[110.322792,34.602028],[110.196007,34.612003],[110.166283,34.608326],[110.073761,34.540165],[109.944077,34.542061],[109.762444,34.500278],[109.575958,34.496815],[109.494171,34.473949],[109.380341,34.482395],[109.312233,34.460381],[109.092743,34.313374],[109.093613,34.286652],[109.058807,34.22089],[109.00251,34.196934],[109.001358,34.122738],[109.027634,34.09256],[109.024925,34.054745],[108.923615,33.962326],[109.036972,33.783321],[109.116615,33.695065],[109.120132,33.664032],[109.162277,33.632935],[109.165955,33.480202],[109.186844,33.399155],[109.169014,33.29237],[109.18335,33.262447],[109.166054,33.243446],[109.170265,33.219116],[109.136513,33.192612],[109.139435,33.130878],[108.96254,32.924801],[108.970901,32.89661],[108.925591,32.826408],[108.93335,32.792152],[108.90477,32.708061],[108.952621,32.69083],[108.989616,32.697411],[109.013351,32.677528],[109.029305,32.690224]]},type:"Feature",properties:{destinationid:"610900",id:313,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717026,37.235706],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587395,36.193325],[103.433876,36.176792],[103.383415,36.143806],[103.355095,36.141521],[103.33345,36.161549],[103.265343,36.177979],[103.21833,36.172661],[103.117554,36.207817],[103.042801,36.235661],[102.982719,36.288765],[102.859566,36.331532],[102.763458,36.33316],[102.721733,36.359512],[102.693016,36.359444],[102.673927,36.404446],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096092,36.51638],[101.993668,36.512428],[101.940491,36.546028],[101.873131,36.550526],[101.799332,36.585876],[101.756676,36.586643],[101.690804,36.639732],[101.501999,36.637737],[101.42646,36.66954],[101.303268,36.683037],[101.271599,36.679245],[101.244408,36.5952],[101.150459,36.511517],[101.147789,36.473183],[101.111031,36.444019],[101.108421,36.424606],[101.052788,36.42231],[100.932571,36.377728],[100.882195,36.382309],[100.865784,36.365292],[100.78904,36.352505],[100.74527,36.350399],[100.713104,36.36972],[100.642105,36.310154],[100.428551,36.321598],[100.325378,36.353012],[100.196053,36.365662],[99.971039,36.437172],[99.782089,36.457932],[99.63179,36.541348],[99.529709,36.560532],[99.474159,36.612247],[99.356567,36.651932],[99.305923,36.708324],[99.245247,36.721985],[99.117874,36.789085],[99.041084,36.793983],[98.91246,36.761223],[98.871483,36.710293],[98.789192,36.704758],[98.745956,36.608696],[98.612495,36.522812],[98.627449,36.448364],[98.508476,36.429199],[98.287842,36.466454],[98.166931,36.427185],[98.162941,36.406319],[98.105217,36.376881],[98.123672,36.342773],[98.121758,36.292171],[98.098877,36.259712],[98.121323,36.224998],[98.175949,36.206379],[98.172287,36.067631],[98.032974,36.056313],[97.972633,36.024872],[97.88427,36.011574],[97.781975,36.035263],[97.647057,36.025505],[97.566818,36.052277],[97.453575,36.063194],[97.339767,36.119461],[97.146545,36.155357],[97.012321,36.220264],[96.862534,36.249573],[96.665024,36.34185],[96.432762,36.380543],[95.972771,36.357628],[95.696259,36.378429],[95.210594,36.31673],[95.091141,36.344353],[94.830521,36.335777],[94.785873,36.274075],[94.772217,36.217964],[94.778648,36.141148],[94.818527,36.12394],[94.801636,36.09021],[94.820518,36.0812],[94.831123,35.99884],[94.81263,35.943268],[94.759186,35.904011],[94.60305,35.902653],[94.566757,35.873409],[94.441803,35.893501],[94.37001,35.886257],[94.354134,35.86961],[94.336304,35.756096],[94.061958,35.71032],[94.050621,35.669415],[94.071487,35.630058],[94.009438,35.566711],[93.977127,35.565022],[93.917145,35.518875],[93.840775,35.512737],[93.792206,35.525982],[93.684868,35.500347],[93.570366,35.409386],[93.35701,35.344528],[93.293259,35.298241],[93.088196,35.238392],[93.037094,35.168575],[93.03746,35.099251],[93.013588,35.062618],[93.016266,35.038044],[92.953979,34.955235],[92.93486,34.878784],[92.949821,34.844753],[92.908371,34.794949],[92.884132,34.718266],[92.921997,34.664581],[92.892006,34.640648],[92.746117,34.589115],[92.728043,34.550137],[92.721909,34.415825],[92.665604,34.385017],[92.600204,34.372536],[92.585121,34.3195],[92.494186,34.284058],[92.424599,34.184761],[92.389641,34.161247],[92.37545,34.11805],[92.341972,34.097366],[92.366783,33.893425],[92.359482,33.851433],[92.290123,33.791779],[92.123993,33.733776],[92.055313,33.68195],[92.082634,33.608051],[92.066139,33.591152],[92.070656,33.57214],[92.013031,33.559341],[91.960365,33.49934],[91.933922,33.445999],[91.941544,33.382622],[91.869446,33.297367],[91.856461,33.226028],[91.863289,33.144283],[91.983025,32.9995],[91.987328,32.968956],[91.963638,32.929173],[91.922485,32.900635],[91.901024,32.766056],[91.847176,32.621342],[91.865639,32.594898],[91.851761,32.548927],[91.829628,32.553284],[91.823601,32.538113],[91.838112,32.508316],[91.792229,32.439075],[91.79834,32.411194],[91.71331,32.384495],[91.71328,32.341404],[91.736397,32.299404],[91.682838,32.259125],[91.676987,32.203625],[91.691353,32.180054],[91.711998,32.187328],[91.723846,32.144615],[91.719025,32.110916],[91.673828,32.083561],[91.726952,31.924887],[91.698372,31.893507],[91.696693,31.853724],[91.854515,31.679853],[91.756721,31.642822],[91.739059,31.612608],[91.774826,31.588261],[91.909912,31.568945],[92.036362,31.528439],[92.063896,31.511749],[92.060295,31.476559]]},type:"Feature",properties:{destinationid:"542400",id:314,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717026,37.235706],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587395,36.193325],[103.433876,36.176792],[103.383415,36.143806],[103.355095,36.141521],[103.33345,36.161549],[103.265343,36.177979],[103.21833,36.172661],[103.117554,36.207817],[103.042801,36.235661],[102.982719,36.288765],[102.859566,36.331532],[102.763458,36.33316],[102.721733,36.359512],[102.693016,36.359444],[102.673927,36.404446],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096092,36.51638],[101.993668,36.512428],[101.940491,36.546028],[101.873131,36.550526],[101.799332,36.585876],[101.756676,36.586643],[101.690804,36.639732],[101.501999,36.637737],[101.42646,36.66954],[101.303268,36.683037],[101.271599,36.679245],[101.244408,36.5952],[101.150459,36.511517],[101.147789,36.473183],[101.111031,36.444019],[101.108421,36.424606],[101.052788,36.42231],[100.932571,36.377728],[100.882195,36.382309],[100.865784,36.365292],[100.78904,36.352505],[100.74527,36.350399],[100.713104,36.36972],[100.642105,36.310154],[100.428551,36.321598],[100.325378,36.353012],[100.196053,36.365662],[99.971039,36.437172],[99.782089,36.457932],[99.63179,36.541348],[99.529709,36.560532],[99.474159,36.612247],[99.356567,36.651932],[99.305923,36.708324],[99.245247,36.721985],[99.117874,36.789085],[99.041084,36.793983],[98.91246,36.761223],[98.871483,36.710293],[98.789192,36.704758],[98.745956,36.608696],[98.612495,36.522812],[98.627449,36.448364],[98.508476,36.429199],[98.287842,36.466454],[98.166931,36.427185],[98.162941,36.406319],[98.105217,36.376881],[98.123672,36.342773],[98.121758,36.292171],[98.098877,36.259712],[98.121323,36.224998],[98.175949,36.206379],[98.172287,36.067631],[98.032974,36.056313],[97.972633,36.024872],[97.88427,36.011574],[97.781975,36.035263],[97.647057,36.025505],[97.566818,36.052277],[97.453575,36.063194],[97.339767,36.119461],[97.146545,36.155357],[97.012321,36.220264],[96.862534,36.249573],[96.665024,36.34185],[96.432762,36.380543],[95.972771,36.357628],[95.696259,36.378429],[95.210594,36.31673],[95.090233,36.344398],[94.828598,36.335022],[94.785873,36.274075],[94.772217,36.217964],[94.778648,36.141148],[94.818527,36.12394],[94.801636,36.09021],[94.820518,36.0812],[94.831123,35.99884],[94.81263,35.943268],[94.759186,35.904011],[94.60305,35.902653],[94.566757,35.873409],[94.441803,35.893501],[94.37001,35.886257],[94.354134,35.86961],[94.336304,35.756096],[94.061958,35.71032],[94.050621,35.669415],[94.071487,35.630058],[94.009438,35.566711],[93.977127,35.565022],[93.917145,35.518875],[93.840775,35.512737],[93.792206,35.525982],[93.684868,35.500347],[93.570366,35.409386],[93.35701,35.344528],[93.293259,35.298241],[93.088196,35.238392],[93.037094,35.168575],[93.03746,35.099251],[93.013588,35.062618],[93.016266,35.038044],[92.953979,34.955235],[92.93486,34.878784],[92.949821,34.844753],[92.908371,34.794949],[92.884132,34.718266],[92.921997,34.664581],[92.892006,34.640648],[92.746117,34.589115],[92.728043,34.550137],[92.721909,34.415825],[92.665604,34.385017],[92.599937,34.372356],[92.589348,34.323479],[92.494522,34.284332],[92.424599,34.184761],[92.39016,34.161926],[92.375832,34.118603],[92.335014,34.076492],[92.366783,33.893425],[92.359993,33.852112],[92.289635,33.791519],[92.078552,33.708492],[92.052788,33.66869],[92.082535,33.608601],[92.066139,33.591152],[92.070503,33.571861],[92.012672,33.559063],[91.938553,33.458847],[91.941544,33.382622],[91.869202,33.296806],[91.85965,33.159561],[91.881989,33.109406],[91.983025,32.9995],[91.987404,32.969299],[91.963638,32.929173],[91.922485,32.900635],[91.901024,32.766056],[91.847176,32.621342],[91.865639,32.594898],[91.851761,32.548927],[91.829628,32.553284],[91.823601,32.538113],[91.838112,32.508316],[91.792229,32.439075],[91.79834,32.411194],[91.71331,32.384495],[91.71328,32.341404],[91.736397,32.299404],[91.682838,32.259125],[91.676987,32.203625],[91.691353,32.180054],[91.711998,32.187328],[91.723846,32.144615],[91.719025,32.110916],[91.673828,32.083561],[91.726952,31.924887],[91.698372,31.893507],[91.696693,31.853724],[91.854515,31.679853],[91.756721,31.642822],[91.739059,31.612608],[91.774826,31.588261],[91.909912,31.568945],[92.035927,31.528606],[92.061882,31.515442],[92.064087,31.493378],[91.987602,31.432791],[91.955933,31.378994],[91.867683,31.311371],[91.799629,31.281908],[91.81002,31.271002],[91.783936,31.246071],[91.785858,31.216988],[91.760063,31.165123],[91.697609,31.116808],[91.691559,31.045126],[91.658424,30.976723],[91.61602,30.789696],[91.552856,30.715141],[91.535683,30.607227],[91.449799,30.560947],[91.126038,30.489248],[90.744881,30.271334],[90.678062,30.263128],[90.641296,30.237522],[90.621437,30.19717],[90.55011,30.146271],[90.544548,30.097561],[90.599281,30.039955],[90.721283,29.957783],[90.726204,29.866901],[90.78878,29.746618],[90.940758,29.6668],[91.083771,29.643547],[91.085388,29.632408],[91.041924,29.615965],[91.013069,29.530319],[90.96151,29.504848],[90.943626,29.414244],[90.867371,29.360369],[90.871094,29.288025],[91.024651,29.280338],[91.077621,29.30504],[91.096481,29.276138],[91.150887,29.28455],[91.389839,29.246172],[91.473755,29.261827],[91.530678,29.25046],[91.538483,29.269413],[91.766869,29.236052]]},type:"Feature",properties:{destinationid:"542200",id:315,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707985,40.374752],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.510971,41.99361],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.864418,43.408237],[91.741814,43.387535],[91.711029,43.368168],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.538597,43.084667],[88.603127,42.876499],[88.594353,42.833248],[88.611404,42.802856],[88.610641,42.754433],[88.570068,42.611141],[88.538124,42.581421],[88.533928,42.529324],[88.517448,42.520039],[88.52536,42.471024],[88.542633,42.457245],[88.523819,42.397831],[88.362534,42.284046],[88.190506,42.246071],[87.899689,42.273983],[87.917618,42.233566],[87.745361,42.217056],[87.371117,42.227016],[86.962112,42.298786],[86.777451,42.301388],[86.68824,42.257473],[86.64856,42.147839],[86.559135,42.086937],[86.468033,41.958378],[86.400635,41.919048],[86.288055,41.819401],[86.239403,41.814705],[86.222885,41.78186],[86.142166,41.786316],[86.034309,41.833065],[85.735184,41.855026],[85.49855,41.918022],[85.292221,41.994106],[85.140327,41.993877],[85.110756,42.023232],[85.067833,42.036987],[84.880936,42.010845],[84.641792,42.014004],[84.540001,41.980812],[84.376541,41.989494],[84.16819,41.948715],[84.129044,41.934258],[84.014091,41.835968],[83.835686,41.828785],[83.746864,41.800594],[83.164833,41.743267],[83.058899,41.786701],[82.954147,41.787209],[82.913635,41.76849],[82.863884,41.706764],[82.821121,41.687126],[82.764389,41.675747],[82.614677,41.682121],[82.506454,41.63205],[82.3657,41.594311],[82.235123,41.530621],[82.078171,41.527653],[81.624763,41.398102],[81.083733,41.391251],[80.915031,41.436634],[80.397598,41.337471],[80.34166,41.243973],[80.214409,41.172806],[80.21125,41.103706],[80.189835,41.070736],[79.899002,40.75296],[79.745468,40.646645],[79.616768,40.595612],[79.365234,40.548965],[79.315521,40.517578],[79.289909,40.462009],[79.166176,40.392048],[79.036171,40.286625],[78.870323,40.193466],[78.761963,40.096535],[78.417084,39.943619],[78.471306,39.86969],[78.484795,39.820107],[78.485657,39.783112],[78.456772,39.720493],[78.380836,39.677814],[78.228256,39.636326],[78.134766,39.55611],[78.07856,39.52771],[77.9291,39.516102],[77.760086,39.437504],[77.70462,39.374458],[77.661095,39.260563],[77.520149,39.157875],[77.511795,39.123913],[77.537384,39.085663],[77.537781,39.055317],[77.508087,38.993225],[77.500519,38.930347],[77.365723,38.768284],[77.276489,38.704533],[77.19059,38.553349],[77.179161,38.489395],[77.144722,38.448635],[77.126488,38.380226],[77.189529,38.370083],[77.236755,38.335602],[77.288078,38.252121],[77.311661,38.112938],[77.390556,37.960712],[77.393333,37.915302],[77.410889,37.892101],[77.469429,37.876526],[77.398132,37.658932],[77.329758,37.581295],[77.25515,37.443481],[77.172905,37.38916],[77.146286,37.307266],[77.080269,37.239941],[77.049179,37.171074],[77.051346,37.14233],[76.968887,37.087555],[76.88221,37.075535],[76.972214,36.992504],[76.997154,36.9249],[76.983253,36.837975],[77.030273,36.766434],[77.030579,36.735901],[77.150085,36.628239],[77.146294,36.574314],[77.122154,36.551807],[76.99408,36.582417],[77.005234,36.573536],[76.986115,36.548126],[77.005363,36.449997],[77.111206,36.460957],[77.165001,36.441368],[77.295815,36.461594],[77.370499,36.431992],[77.407936,36.437584],[77.425087,36.424858],[77.454987,36.438705],[77.490555,36.404022],[77.569794,36.418808],[77.577034,36.437317],[77.676659,36.395519],[77.74807,36.440109],[77.853531,36.395611],[77.940598,36.392254],[77.988037,36.409988],[77.980835,36.388683],[77.997963,36.359737],[78.178673,36.301613],[78.364616,36.27417],[78.479523,36.240055],[78.741531,36.203625],[78.823853,36.209267],[78.914536,36.176384],[78.927719,36.154587],[78.998154,36.124485],[79.010361,36.098465],[79.080612,36.043488],[79.317032,35.911983],[79.368019,35.864635],[79.390846,35.865437],[79.41227,35.835903],[79.428162,35.762581],[79.515244,35.658726],[79.53141,35.491165],[79.585999,35.458305],[79.537971,35.36021],[79.536636,35.285137],[79.659309,35.05677],[79.940285,34.893623],[80.064919,34.851707],[80.079483,34.798805],[80.170631,34.732384],[80.297417,34.680477],[80.294197,34.655632],[80.329132,34.632431],[80.313934,34.607288],[80.326469,34.568684],[80.363297,34.572605],[80.415359,34.557098],[80.42482,34.539757],[80.385246,34.479599],[80.384918,34.339191],[80.359772,34.247417],[80.398186,34.19429],[80.381935,34.120159],[80.393707,34.012569],[80.405861,33.989491],[80.45311,33.979233],[80.49234,33.94405],[80.513443,33.833702],[80.462753,33.74958],[80.392548,33.755341],[80.363708,33.731476],[80.37941,33.703861],[80.444077,33.666931],[80.326546,33.607697],[80.284302,33.523254],[80.145798,33.556217],[80.086914,33.548538],[79.945343,33.567741],[79.905602,33.526962],[79.903976,33.489571],[79.884453,33.464214],[79.844421,33.470219],[79.816132,33.444057],[79.745026,33.427364],[79.728279,33.376289],[79.702728,33.361542],[79.700851,33.278381],[79.785667,33.238831],[79.842567,33.18008],[79.784889,32.841644],[79.795425,32.756336],[79.828087,32.721752],[79.904953,32.695686],[79.95755,32.626823],[80.043701,32.584652],[80.064354,32.518299],[80.106667,32.50359]]},type:"Feature",properties:{destinationid:"542500",id:316,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.718071,37.235916],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491348,37.73867],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.670296,37.448944],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.713013,37.10675],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.291443,36.958012],[105.029297,36.945358],[104.827103,36.905769],[104.80291,36.890221],[104.795952,36.864059],[104.807968,36.78447],[104.796593,36.764843],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.194519,36.520061],[104.154053,36.520126],[104.138428,36.486908],[104.001648,36.368832],[103.965042,36.30479],[103.849937,36.285076],[103.794464,36.235481],[103.816299,36.205833],[103.81398,36.135555],[103.838371,36.088612],[103.823608,36.058037]]},type:"Feature",properties:{destinationid:"620100",id:317,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456055,37.69595],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[111.946877,37.375484],[111.809105,37.317692],[111.72126,37.237358],[111.688522,37.231964],[111.601753,37.264668],[111.580208,37.314926],[111.530212,37.334591],[111.499695,37.421928],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.76944,37.469921],[105.668701,37.448174],[105.621269,37.39249],[105.41597,37.466125],[105.313179,37.479237],[105.177032,37.468826],[105.107834,37.442741],[104.91494,37.432468],[104.737396,37.450729],[104.661888,37.422436],[104.432533,37.451267],[104.287712,37.41943],[104.262039,37.359512],[104.108437,37.236904],[103.93779,37.214993],[103.7836,37.26997],[103.699554,37.325329],[103.667297,37.352009],[103.646423,37.423546],[103.483299,37.46954],[103.449051,37.501747],[103.215233,37.627262],[103.029877,37.648144],[102.941895,37.614815],[102.865433,37.611771],[102.733032,37.732723],[102.690224,37.821415],[102.627632,37.894459],[102.565376,37.927559],[102.592896,37.983246],[102.554955,38.1716],[102.510559,38.25742],[102.510887,38.367043],[102.481133,38.417076],[102.433983,38.456879],[102.315033,38.502075],[102.207375,38.464645],[102.177414,38.508545],[102.188347,38.514507]]},type:"Feature",properties:{destinationid:"620300",id:318,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456055,37.69595],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[111.946877,37.375484],[111.809105,37.317692],[111.72126,37.237358],[111.687073,37.231888],[111.601753,37.264668],[111.580208,37.314926],[111.530212,37.334591],[111.499695,37.421928],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.76944,37.469921],[105.668701,37.448174],[105.621269,37.39249],[105.41597,37.466125],[105.313179,37.479237],[105.177032,37.468826],[105.107834,37.442741],[104.91494,37.432468],[104.737396,37.450729],[104.661888,37.422436],[104.432533,37.451267],[104.287712,37.41943],[104.262039,37.359512],[104.108437,37.236904],[103.936745,37.215164],[103.7836,37.26997],[103.699554,37.325329],[103.667297,37.352009],[103.646423,37.423546],[103.483299,37.46954],[103.449051,37.501747],[103.215233,37.627262],[103.029877,37.648144],[102.941895,37.614815],[102.865929,37.611443],[102.733032,37.732723],[102.690224,37.821415],[102.627632,37.894459],[102.577896,37.915489],[102.426933,38.040997],[102.155876,38.15686],[102.067535,38.210999],[101.745049,38.299835],[101.613777,38.39397],[101.400711,38.490303],[101.359108,38.590679],[101.267403,38.64753],[101.153076,38.783253],[101.057281,38.841671],[100.953804,38.833858],[100.860413,38.849144],[100.713097,38.902195],[100.41629,38.909237],[100.234924,39.025101],[100.161469,39.101212],[100.080772,39.141323],[100.054436,39.17411],[99.912979,39.21603],[99.812134,39.280251],[99.718155,39.302158],[99.497246,39.263298],[99.228249,39.334648],[99.156105,39.337746],[99.075417,39.366982],[98.860229,39.520779],[98.710983,39.584976],[98.584381,39.681904],[98.464996,39.708317],[98.365463,39.757488],[98.294693,39.757835],[98.277817,39.786705]]},type:"Feature",properties:{destinationid:"620200",id:319,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.385437,38.066418],[113.396133,38.047501],[113.359688,37.891396],[113.368927,37.864712],[113.171227,37.874371],[113.087639,37.913815],[113.015869,37.890427],[112.971237,37.900444],[112.938118,37.866634],[112.890892,37.859596],[112.862633,37.794952],[112.809433,37.779156],[112.825058,37.699879],[112.81514,37.659264],[112.72657,37.543064],[112.457344,37.459221],[112.402046,37.456936],[112.358406,37.426346],[112.286171,37.409325],[112.256714,37.2332],[112.229332,37.194134],[112.111588,37.13327],[111.939285,37.006924],[111.929375,36.90556],[111.807312,36.761745],[111.814621,36.518082],[111.75795,36.364861],[111.731247,36.337513],[111.634628,36.320137],[111.518311,36.22295],[111.483688,36.169281],[111.454216,36.067677],[111.346291,35.869617],[111.277344,35.690109],[111.177101,35.64473],[110.801788,35.65081],[110.663704,35.598755],[110.56485,35.593517],[110.52285,35.566219],[110.477913,35.498138],[110.439484,35.387016],[110.335503,35.29755],[110.250343,35.293915],[110.192245,35.259804],[110.163292,35.209915],[110.0952,35.16967],[110.0439,35.088676],[110.010643,35.076889],[109.959137,35.016884],[109.897072,35.000187],[109.805298,34.935165],[109.696594,34.929321],[109.475555,34.881626],[109.22242,34.720875],[109.167511,34.611061],[109.119072,34.575298],[109.109993,34.547981],[109.000214,34.568893],[108.797363,34.545689],[108.751686,34.511929],[108.65094,34.485592],[108.598587,34.453125],[108.542313,34.388298],[108.547752,34.282627],[108.391319,34.247112],[108.251389,34.242275],[108.029198,34.264301],[107.835068,34.263432],[107.762802,34.300617],[107.537407,34.311367],[107.436279,34.344471],[107.302322,34.358467],[107.211655,34.35931],[107.158089,34.342491],[107.099403,34.371338],[107.015503,34.369358],[106.918701,34.39893],[106.759361,34.362022],[106.674004,34.376385],[106.643745,34.343689],[106.50518,34.333061],[106.402908,34.296543],[106.300987,34.322258],[106.145592,34.329254],[106.121834,34.382923],[106.077263,34.400368],[106.06871,34.449322],[105.979614,34.452274],[105.921127,34.474327],[105.90686,34.511856],[105.917664,34.540668],[105.893181,34.545277],[105.896835,34.558445],[105.727936,34.589897],[105.725388,34.578529]]},type:"Feature",properties:{destinationid:"620500",id:320,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.718071,37.235916],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491348,37.73867],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.711617,37.105797],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.829185,36.906715],[104.798958,36.877293],[104.807968,36.784107],[104.795464,36.764191],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506645,36.674789],[104.46489,36.631592],[104.377968,36.608788],[104.332825,36.567291],[104.263939,36.540886],[104.172668,36.533024],[104.173141,36.545929]]},type:"Feature",properties:{destinationid:"620400",id:321,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717026,37.235706],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.76944,37.469921],[105.668701,37.448174],[105.621269,37.39249],[105.41597,37.466125],[105.313179,37.479237],[105.177032,37.468826],[105.107834,37.442741],[104.91494,37.432468],[104.737396,37.450729],[104.661888,37.422436],[104.432533,37.451267],[104.287712,37.41943],[104.262039,37.359512],[104.108437,37.236904],[103.940109,37.214725],[103.7836,37.26997],[103.699554,37.325329],[103.667297,37.352009],[103.646423,37.423546],[103.483299,37.46954],[103.449051,37.501747],[103.215233,37.627262],[103.029877,37.648144],[102.941895,37.614815],[102.865929,37.611443],[102.720024,37.749023],[102.690224,37.821415],[102.63562,37.883537],[102.634674,37.929546]]},type:"Feature",properties:{destinationid:"620600",id:322,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456055,37.69595],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[111.946877,37.375484],[111.809105,37.317692],[111.72126,37.237358],[111.688194,37.231937],[111.601753,37.264668],[111.580208,37.314926],[111.530212,37.334591],[111.499695,37.421928],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.76944,37.469921],[105.668701,37.448174],[105.621269,37.39249],[105.41597,37.466125],[105.313179,37.479237],[105.177032,37.468826],[105.107834,37.442741],[104.91494,37.432468],[104.737396,37.450729],[104.661888,37.422436],[104.432533,37.451267],[104.287712,37.41943],[104.262039,37.359512],[104.108437,37.236904],[103.93779,37.214993],[103.7836,37.26997],[103.699554,37.325329],[103.667297,37.352009],[103.646423,37.423546],[103.483299,37.46954],[103.449051,37.501747],[103.215233,37.627262],[103.029877,37.648144],[102.941895,37.614815],[102.865929,37.611443],[102.733032,37.732723],[102.690224,37.821415],[102.627632,37.894459],[102.577896,37.915489],[102.426933,38.040997],[102.155876,38.15686],[102.067535,38.210999],[101.745049,38.299835],[101.613777,38.39397],[101.400711,38.490303],[101.359108,38.590679],[101.267403,38.64753],[101.153076,38.783253],[101.060089,38.840385],[100.944824,38.834839],[100.846596,38.852448],[100.718323,38.901455],[100.496696,38.904572],[100.456131,38.932888]]},type:"Feature",properties:{destinationid:"620700",id:323,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643875,38.213333],[114.506676,38.207626],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.384987,38.066311],[113.396172,38.048012],[113.359688,37.891396],[113.36969,37.865093],[113.171227,37.874371],[113.089211,37.913761],[113.015869,37.890427],[112.970909,37.900326],[112.938118,37.866634],[112.890251,37.859039],[112.861763,37.794159],[112.80957,37.779396],[112.825058,37.699879],[112.81514,37.659264],[112.723129,37.540283],[112.457344,37.459221],[112.402046,37.456936],[112.358406,37.426346],[112.28595,37.409172],[112.250221,37.219639],[112.220963,37.186813],[112.111588,37.13327],[111.941422,37.00935],[111.929375,36.90556],[111.807846,36.762951],[111.814621,36.518082],[111.756989,36.363178],[111.731247,36.337513],[111.634628,36.320137],[111.520424,36.225616],[111.395775,35.966301],[111.273064,35.949043],[111.217377,36.032864],[111.124931,36.074696],[111.093056,36.042377],[110.92363,36.022236],[110.852043,36.071404],[110.814301,36.065403],[110.706985,36.10321],[110.587669,36.045555],[110.473259,36.04847],[110.454544,36.068485],[110.409386,36.07708],[110.236816,36.080616],[110.19696,36.060699],[110.124237,35.985466],[110.063576,35.985325],[110.012215,35.959263],[109.99662,35.973969],[109.932686,35.964653],[109.859123,35.984665],[109.714531,35.951637],[109.563683,35.956512],[109.48307,35.916065],[109.439102,35.937088],[109.257751,35.921135],[109.146584,35.888184],[109.095482,35.904133],[109.038513,35.966618],[108.977943,35.965694],[108.923882,36.021973],[108.685593,36.121548],[108.541847,36.076881],[108.462746,36.107891],[108.409958,36.110401],[108.233948,36.066875],[108.124023,36.011127],[108.067932,35.949039],[107.991074,35.915447],[107.911377,35.976311],[107.759865,35.949799],[107.709061,35.932133],[107.700356,35.903599],[107.625641,35.897141],[107.601219,35.829391],[107.618713,35.796188],[107.618347,35.707832],[107.676483,35.56757],[107.746643,35.508137],[107.741478,35.472454],[107.78054,35.369946],[107.75927,35.336315],[107.76918,35.311428],[107.748978,35.336594],[107.692238,35.360588],[107.559052,35.372612],[107.358398,35.33984],[107.275986,35.347656],[106.949982,35.443138],[106.852997,35.492905],[106.765816,35.50462],[106.684402,35.542923]]},type:"Feature",properties:{destinationid:"620800",id:324,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587395,36.193325],[103.433876,36.176792],[103.384201,36.143925],[103.355095,36.141521],[103.33345,36.161549],[103.265343,36.177979],[103.21833,36.172661],[103.117554,36.207817],[103.042801,36.235661],[102.982719,36.288765],[102.859566,36.331532],[102.763458,36.33316],[102.721733,36.359512],[102.693016,36.359444],[102.673927,36.404446],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096092,36.51638],[101.992523,36.512676],[101.940491,36.546028],[101.873131,36.550526],[101.799332,36.585876],[101.756676,36.586643],[101.689354,36.640068],[101.573296,36.630352],[101.464767,36.645027],[101.425949,36.669632],[101.274117,36.681202],[101.244408,36.5952],[101.150459,36.511517],[101.147789,36.473183],[101.111031,36.444019],[101.109093,36.424931],[100.78904,36.352505],[100.74527,36.350399],[100.712685,36.369617],[100.70813,36.352531],[100.643265,36.310349],[100.557152,36.318302],[100.541718,36.293659],[100.557388,36.268024],[100.545456,36.221447],[100.517479,36.173382],[100.451042,36.116459],[100.317024,36.038666],[100.136581,35.964725],[100.119904,35.942406],[99.931961,35.869343],[99.91449,35.850361],[99.928352,35.843975],[99.896362,35.817581],[99.898712,35.797863],[99.85479,35.803589],[99.694756,35.875252],[99.640106,35.809372],[99.567673,35.794388],[99.540436,35.664261],[99.554199,35.613575],[99.527534,35.58408],[99.479309,35.43293],[99.454521,35.402988],[99.363037,35.422523],[99.284439,35.372936],[99.08461,35.342056],[98.978027,35.257786],[98.968971,35.193977],[98.878693,35.11343],[98.798859,35.102081],[98.735306,35.066029],[98.656883,35.064308],[98.430809,34.835846],[98.345093,34.829163],[98.23082,34.884644],[98.155006,34.881672],[98.132515,34.844166],[98.1241,34.777523],[98.135559,34.754734],[97.983315,34.592773],[97.998436,34.555908],[97.980713,34.489895],[97.944572,34.448997],[97.955048,34.384098],[97.931152,34.368305],[97.929611,34.332043],[97.881546,34.275803],[97.782646,34.208641],[97.765724,34.171928],[97.648666,34.127766],[97.581696,34.043503],[97.433487,33.983459],[97.351875,33.972572],[97.27002,33.897354],[97.128326,33.813461],[97.15416,33.784504],[97.19442,33.680943],[97.197678,33.608852],[97.222519,33.589527],[97.217896,33.550434],[97.247665,33.508625],[97.23806,33.476494],[97.282669,33.44297],[97.340424,33.360794],[97.442551,33.31356],[97.47303,33.225021],[97.37281,33.173893],[97.350952,33.129803],[97.296288,33.093834],[97.257904,33.007294],[97.211426,32.989964],[97.047668,33.01899],[97.01033,33.003651],[97.045113,32.901653],[97.070702,32.875076],[97.061157,32.851818],[96.655167,32.889576],[96.671165,32.856163],[96.639465,32.793415],[96.648888,32.770927],[96.609123,32.660252],[96.552979,32.623486],[96.559158,32.590656],[96.37278,32.507519],[96.420921,32.429871],[96.429214,32.391605],[96.416779,32.373863],[96.455215,32.321777],[96.487679,32.190937],[96.534363,32.142582],[96.485031,32.014191],[96.5373,31.964649],[96.479576,31.965742],[96.479126,31.938702],[96.451698,31.929722],[96.417793,31.953493],[96.415512,31.992826],[96.358498,32.024162],[96.310715,31.972172],[96.340363,31.9604],[96.327843,31.933624],[96.292503,31.933111],[96.27903,31.915281],[96.339272,31.746502],[96.311714,31.714567],[96.318977,31.666216],[96.376488,31.635534],[96.412659,31.586384],[96.401581,31.553411],[96.337677,31.491867],[96.40303,31.483425],[96.42807,31.411276],[96.494583,31.368919],[96.55632,31.368324],[96.566483,31.343277],[96.596176,31.332518],[96.605446,31.183195],[96.625404,31.181858],[96.660629,31.126684],[96.697296,31.108015],[96.755959,31.126415],[96.805466,31.105747],[96.885582,31.106125],[96.962563,31.072756],[96.969322,31.054583],[97.023697,31.119158],[97.017937,31.181097],[97.07338,31.190077],[97.128906,31.152027],[97.173454,31.143688],[97.222687,31.044384],[97.31353,31.007795],[97.369522,30.933693],[97.336815,30.835915],[97.366997,30.751453],[97.341408,30.714394],[97.293846,30.689245],[97.254402,30.689213],[97.264328,30.678684],[97.250603,30.686562],[97.264481,30.653763],[97.19854,30.674089],[97.117607,30.669867],[97.057976,30.61904],[97.14225,30.514481],[97.183815,30.434135],[97.218628,30.4056],[97.269257,30.291449],[97.292648,30.207674],[97.276398,30.198734],[97.297638,30.196165],[97.287308,30.162521],[97.310722,30.153885],[97.285225,30.13695],[97.291168,30.127314],[97.275215,30.1306],[97.307762,30.113388],[97.301498,30.092117],[97.274864,30.073294],[97.177834,30.100851],[97.153641,30.043394],[97.120819,30.017355],[97.043137,30.015226],[96.989052,30.055529],[96.944969,30.063885],[96.731705,30.035915],[96.670593,29.982378],[96.660461,29.946253],[96.73056,29.698215],[96.715454,29.654022],[96.778679,29.543369],[96.764366,29.502369],[96.654984,29.478785],[96.620247,29.486347],[96.542923,29.542236],[96.512093,29.53392],[96.442612,29.555838],[96.384109,29.609974],[96.248108,29.631216],[96.208626,29.652546],[96.202507,29.689285],[96.141914,29.710409],[96.101143,29.746889],[96.049583,29.730383],[96.003334,29.737373],[95.91954,29.762009],[95.916092,29.780807],[95.869858,29.800642],[95.788658,29.810247],[95.779579,29.850283],[95.74987,29.872183],[95.635902,29.913095],[95.547668,29.88418],[95.491219,29.907965],[95.440781,29.908255],[95.36335,29.961285],[95.359451,29.980619],[95.299881,29.999874],[95.270561,30.034649],[95.224312,30.035378],[95.199921,30.061644],[95.118759,30.075104],[95.11174,30.100044],[95.06472,30.095947],[94.990707,30.008411],[94.914932,29.989782],[94.892693,30.001589],[94.866249,29.966698],[94.799698,29.946129],[94.787415,29.881134],[94.739136,29.818621],[94.751808,29.790318],[94.726372,29.743729],[94.733192,29.717199],[94.71534,29.666042],[94.725449,29.654591],[94.698296,29.639111],[94.715958,29.634682],[94.706505,29.616627],[94.652451,29.607779],[94.62606,29.629768],[94.577209,29.558443],[94.555946,29.555429],[94.566154,29.564732],[94.442619,29.581228],[94.363739,29.654539]]},type:"Feature",properties:{destinationid:"540400",id:325,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643875,38.213333],[114.506676,38.207626],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.384987,38.066311],[113.396172,38.048012],[113.359688,37.891396],[113.36969,37.865093],[113.171227,37.874371],[113.089211,37.913761],[113.015869,37.890427],[112.970909,37.900326],[112.938118,37.866634],[112.890251,37.859039],[112.861763,37.794159],[112.80957,37.779396],[112.825058,37.699879],[112.81514,37.659264],[112.723129,37.540283],[112.457344,37.459221],[112.402046,37.456936],[112.358406,37.426346],[112.28595,37.409172],[112.250221,37.219639],[112.220963,37.186813],[112.111588,37.13327],[111.941422,37.00935],[111.929375,36.90556],[111.807846,36.762951],[111.814621,36.518082],[111.756989,36.363178],[111.731247,36.337513],[111.634628,36.320137],[111.520424,36.225616],[111.396126,35.966465],[111.273064,35.949043],[111.217377,36.032864],[111.124931,36.074696],[111.093056,36.042377],[110.92363,36.022236],[110.852043,36.071404],[110.814301,36.065403],[110.706985,36.10321],[110.587669,36.045555],[110.473259,36.04847],[110.454544,36.068485],[110.409386,36.07708],[110.236816,36.080616],[110.19696,36.060699],[110.124237,35.985466],[110.063576,35.985325],[110.012215,35.959263],[109.99662,35.973969],[109.932686,35.964653],[109.859123,35.984665],[109.714531,35.951637],[109.563683,35.956512],[109.48307,35.916065],[109.439102,35.937088],[109.257751,35.921135],[109.146584,35.888184],[109.095482,35.904133],[109.038513,35.966618],[108.977943,35.965694],[108.923882,36.021973],[108.685593,36.121548],[108.541847,36.076881],[108.462746,36.107891],[108.410973,36.110481],[108.233948,36.066875],[108.124023,36.011127],[108.067932,35.949039],[107.991074,35.915447],[107.911377,35.976311],[107.711594,35.933479],[107.699081,35.903198],[107.63131,35.901672],[107.601196,35.828686],[107.638222,35.734539]]},type:"Feature",properties:{destinationid:"621000",id:326,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.718842,37.236153],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.492012,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.769218,37.469879],[105.668098,37.447849],[105.616524,37.381145],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.711617,37.105797],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.796318,36.865696],[104.807968,36.78447],[104.796593,36.764843],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.965042,36.30479],[103.852798,36.286766],[103.795555,36.23737],[103.821037,36.186092],[103.813881,36.136189],[103.836998,36.093906],[103.835487,36.063133],[103.770927,36.056934],[103.772072,35.999752],[103.757393,35.972244],[103.76519,35.819027],[103.691673,35.73373],[103.710098,35.673714],[103.789185,35.601345],[103.783058,35.586597],[103.665527,35.505886],[103.459305,35.458233],[103.354996,35.460312],[103.300522,35.444248],[103.233734,35.486504],[103.238091,35.551758],[103.212036,35.599174]]},type:"Feature",properties:{destinationid:"622900",id:327,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643875,38.213333],[114.506676,38.207626],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.384987,38.066311],[113.396172,38.048012],[113.359688,37.891396],[113.36969,37.865093],[113.171227,37.874371],[113.089211,37.913761],[113.015869,37.890427],[112.970909,37.900326],[112.938118,37.866634],[112.890251,37.859039],[112.861763,37.794159],[112.80957,37.779396],[112.825058,37.699879],[112.81514,37.659264],[112.723129,37.540283],[112.457344,37.459221],[112.402046,37.456936],[112.358406,37.426346],[112.28595,37.409172],[112.250221,37.219639],[112.220963,37.186813],[112.111588,37.13327],[111.941422,37.00935],[111.929375,36.90556],[111.807846,36.762951],[111.814621,36.518082],[111.756989,36.363178],[111.731247,36.337513],[111.634628,36.320137],[111.520424,36.225616],[111.395531,35.966198],[111.273064,35.949043],[111.217377,36.032864],[111.124931,36.074696],[111.093056,36.042377],[110.92363,36.022236],[110.852043,36.071404],[110.814301,36.065403],[110.706985,36.10321],[110.587669,36.045555],[110.473259,36.04847],[110.454544,36.068485],[110.409386,36.07708],[110.236816,36.080616],[110.19696,36.060699],[110.124237,35.985466],[110.063576,35.985325],[110.012215,35.959263],[109.99662,35.973969],[109.932686,35.964653],[109.859123,35.984665],[109.714531,35.951637],[109.563683,35.956512],[109.48307,35.916065],[109.439102,35.937088],[109.257751,35.921135],[109.146584,35.888184],[109.095482,35.904133],[109.038513,35.966618],[108.977943,35.965694],[108.923882,36.021973],[108.685593,36.121548],[108.541847,36.076881],[108.460793,36.108284],[108.371422,36.103733],[108.300659,36.073544],[108.233315,36.066566],[108.124023,36.011127],[108.067932,35.949039],[107.991074,35.915447],[107.911377,35.976311],[107.759865,35.949799],[107.709061,35.932133],[107.700356,35.903599],[107.625641,35.897141],[107.601219,35.829391],[107.618713,35.796188],[107.618347,35.707832],[107.676483,35.56757],[107.746643,35.508137],[107.741478,35.472454],[107.78054,35.369946],[107.75927,35.336315],[107.7677,35.31115],[107.748978,35.336594],[107.692238,35.360588],[107.559052,35.372612],[107.358398,35.33984],[107.275986,35.347656],[106.922684,35.45237],[106.849434,35.494068],[106.566521,35.543472],[106.412804,35.597012],[106.369263,35.591125],[106.357239,35.573814],[106.288208,35.593185],[106.274628,35.577358],[106.185623,35.575027],[106.102165,35.616814],[106.014717,35.592236],[105.917061,35.588047],[105.736176,35.539692],[105.574898,35.634579],[105.499657,35.703449],[105.458534,35.715984],[105.414169,35.709702],[105.387772,35.687988],[105.358192,35.704697],[105.269272,35.684738],[105.160988,35.702717],[105.055794,35.684349],[104.977798,35.730301],[104.899261,35.672604],[104.716316,35.620659],[104.59906,35.639515],[104.626801,35.579697]]},type:"Feature",properties:{destinationid:"621100",id:328,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456055,37.69595],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[111.946877,37.375484],[111.809105,37.317692],[111.72126,37.237358],[111.687073,37.231888],[111.601753,37.264668],[111.580208,37.314926],[111.530212,37.334591],[111.499695,37.421928],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.76944,37.469921],[105.668701,37.448174],[105.621269,37.39249],[105.41597,37.466125],[105.313179,37.479237],[105.177032,37.468826],[105.107834,37.442741],[104.91494,37.432468],[104.737396,37.450729],[104.661888,37.422436],[104.432533,37.451267],[104.287712,37.41943],[104.262039,37.359512],[104.108437,37.236904],[103.936745,37.215164],[103.7836,37.26997],[103.699554,37.325329],[103.667297,37.352009],[103.646423,37.423546],[103.483299,37.46954],[103.449051,37.501747],[103.215233,37.627262],[103.029877,37.648144],[102.941895,37.614815],[102.865929,37.611443],[102.733032,37.732723],[102.690224,37.821415],[102.627632,37.894459],[102.577896,37.915489],[102.426933,38.040997],[102.155876,38.15686],[102.067535,38.210999],[101.745049,38.299835],[101.613777,38.39397],[101.400711,38.490303],[101.359108,38.590679],[101.267403,38.64753],[101.153076,38.783253],[101.060089,38.840385],[100.953804,38.833858],[100.860413,38.849144],[100.713097,38.902195],[100.41629,38.909237],[100.234924,39.025101],[100.161469,39.101212],[100.080772,39.141323],[100.053596,39.174606],[99.979286,39.187721],[99.827164,39.273418],[99.745651,39.29932],[99.496208,39.26339],[99.088188,39.360912],[98.894577,39.500645],[98.708611,39.586437],[98.587914,39.680027],[98.496727,39.705379],[98.510353,39.744053]]},type:"Feature",properties:{destinationid:"620900",id:329,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.492012,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.711617,37.105797],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.796318,36.865696],[104.807968,36.78447],[104.796593,36.764843],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.965042,36.30479],[103.852798,36.286766],[103.795555,36.23737],[103.821037,36.186092],[103.813881,36.136189],[103.836998,36.093906],[103.835487,36.063133],[103.770927,36.056934],[103.772072,35.999752],[103.757393,35.972244],[103.76519,35.819027],[103.691673,35.73373],[103.713699,35.668121],[103.776169,35.616604],[103.785805,35.589386],[103.665527,35.505886],[103.459305,35.458233],[103.354996,35.460312],[103.301872,35.444237],[103.234123,35.485924],[103.237808,35.552853],[103.205566,35.571857],[103.096878,35.484066],[102.944107,35.412216],[102.893921,35.365047],[102.848999,35.367687],[102.797401,35.345043],[102.777481,35.302414],[102.827477,35.233971],[102.823532,35.180695],[102.86026,35.115223],[102.844482,35.083664],[102.910439,34.986244]]},type:"Feature",properties:{destinationid:"623000",id:330,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587395,36.193325],[103.433876,36.176792],[103.384201,36.143925],[103.355095,36.141521],[103.33345,36.161549],[103.265343,36.177979],[103.21833,36.172661],[103.117554,36.207817],[103.042801,36.235661],[102.982719,36.288765],[102.859566,36.331532],[102.763458,36.33316],[102.721733,36.359512],[102.693016,36.359444],[102.673927,36.404446],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096596,36.516285],[102.013451,36.523205],[101.852676,36.585793],[101.821358,36.619099],[101.778908,36.623142]]},type:"Feature",properties:{destinationid:"630100",id:331,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.718071,37.235916],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.711617,37.105797],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.796318,36.865696],[104.807968,36.78447],[104.796593,36.764843],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.965042,36.30479],[103.852798,36.286766],[103.793175,36.236618],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587021,36.193089],[103.433876,36.176792],[103.355751,36.141357],[103.332901,36.161743],[103.217789,36.172794],[103.044617,36.234787],[102.956459,36.300999],[102.695656,36.358055],[102.67485,36.403896],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.105049,36.513676],[102.102524,36.50312]]},type:"Feature",properties:{destinationid:"630200",id:332,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491348,37.73867],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.829185,36.906715],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587021,36.193089],[103.433876,36.176792],[103.358139,36.141201],[103.332901,36.161743],[103.217789,36.172794],[103.044617,36.234787],[102.956459,36.300999],[102.695656,36.358055],[102.673927,36.404446],[102.5047,36.455833],[102.315567,36.484444],[102.231606,36.478123],[102.095016,36.516502],[101.992523,36.512676],[101.940491,36.546028],[101.873131,36.550526],[101.799332,36.585876],[101.756676,36.586643],[101.688499,36.640221],[101.574059,36.63028],[101.464767,36.645027],[101.425949,36.669632],[101.237923,36.678619],[101.136185,36.753895],[101.057701,36.863758],[101.033669,36.861416],[101.013771,36.879223],[101.001778,36.911781],[100.900803,36.959435]]},type:"Feature",properties:{destinationid:"632200",id:333,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.718071,37.235916],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.492012,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.76944,37.469921],[105.668098,37.447849],[105.616524,37.381145],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.711617,37.105797],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.796318,36.865696],[104.807968,36.78447],[104.796593,36.764843],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.965042,36.30479],[103.852798,36.286766],[103.793175,36.236618],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587021,36.193089],[103.433876,36.176792],[103.355751,36.141357],[103.332901,36.161743],[103.217789,36.172794],[103.044617,36.234787],[102.956459,36.300999],[102.695656,36.358055],[102.67485,36.403896],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.104187,36.513512],[102.082253,36.467136],[102.023911,36.429199],[102.000046,36.378429],[101.997581,36.30864],[101.964569,36.245869],[101.999123,36.171543],[101.982697,36.108292],[101.955635,36.076817],[102.040916,36.024044],[102.054779,35.929794],[102.092438,35.855907],[102.056282,35.740932],[102.072021,35.679981],[102.053566,35.650154],[102.046906,35.566856],[102.019852,35.518097]]},type:"Feature",properties:{destinationid:"632300",id:334,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717026,37.235706],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.238113,37.526417],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.856735,37.408588],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.524712,37.544525],[109.440437,37.566597],[109.316498,37.538994],[109.158318,37.612717],[108.959656,37.603821],[108.854195,37.635036],[108.633286,37.570923],[108.472992,37.544739],[108.402359,37.550648],[108.258949,37.517982],[107.698372,37.554253],[107.657333,37.57468],[107.529839,37.707481],[107.413361,37.799454],[107.240654,37.86591],[106.949211,38.083763],[106.847794,38.124676],[106.730309,38.102818],[106.629486,38.12027],[106.472542,38.324142],[106.277794,38.466446]]},type:"Feature",properties:{destinationid:"640100",id:335,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.385963,40.393459],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.772446,40.731174],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.122597,40.761761],[114.026917,40.804081],[113.792809,40.872055],[113.696136,40.926727],[113.603592,40.941746],[113.455513,40.935074],[113.37706,40.962486],[113.078827,40.965614],[113.015488,40.982204],[112.984459,40.977612],[112.941673,40.939369],[112.820358,40.878311],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.318985,40.988461],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.870491,40.636578],[108.756454,40.669563],[108.709625,40.697472],[108.686691,40.741177],[108.644524,40.773026],[108.553162,40.787262],[108.380486,40.881901],[108.299057,40.890617],[108.245132,40.914204],[107.947754,40.93396],[107.417671,40.863056],[107.22757,40.731567],[107.186829,40.670158],[107.102844,40.598858],[107.01458,40.384045],[107.07785,40.293018],[106.890221,40.118698],[106.813332,39.990234],[106.830666,39.753395],[106.882454,39.683964],[106.856461,39.619678],[106.892738,39.571045],[106.891396,39.466099],[106.831055,39.420151],[106.721191,39.393517],[106.719368,39.194462],[106.610168,39.0937],[106.510651,38.942528],[106.460098,38.953243],[106.376587,39.013653]]},type:"Feature",properties:{destinationid:"640200",id:336,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.238113,37.526417],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.856735,37.408588],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.524712,37.544525],[109.440437,37.566597],[109.316498,37.538994],[109.158318,37.612717],[108.959656,37.603821],[108.854195,37.635036],[108.633286,37.570923],[108.472992,37.544739],[108.402359,37.550648],[108.258949,37.517982],[107.701485,37.553604],[107.657333,37.57468],[107.529839,37.707481],[107.413361,37.799454],[107.240654,37.86591],[106.952263,38.08205],[106.846619,38.124809],[106.743164,38.103214],[106.635666,38.117329],[106.573128,38.19997],[106.526451,38.181225],[106.507507,38.134636],[106.465744,38.103966],[106.373154,38.064556],[106.352936,38.021259],[106.276024,37.958969],[106.240578,37.942417],[106.229446,37.976082],[106.199402,37.985977]]},type:"Feature",properties:{destinationid:"640300",id:337,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.492012,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.670296,37.448944],[105.616989,37.383335],[105.628899,37.309582],[105.686188,37.258369],[105.726959,37.155441],[105.775017,37.137703],[105.851959,36.988781],[105.947578,36.880405],[105.96537,36.839752],[106.039589,36.771717],[106.101128,36.665714],[106.14843,36.543705],[106.104301,36.402275],[106.108185,36.320271],[106.19696,36.171116],[106.188828,36.112057],[106.221565,36.022663],[106.233406,36.008446],[106.285912,36.004868]]},type:"Feature",properties:{destinationid:"640400",id:338,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491348,37.73867],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587395,36.193325],[103.433876,36.176792],[103.384201,36.143925],[103.355095,36.141521],[103.33345,36.161549],[103.265343,36.177979],[103.21833,36.172661],[103.117554,36.207817],[103.042801,36.235661],[102.982719,36.288765],[102.859566,36.331532],[102.763458,36.33316],[102.721733,36.359512],[102.693016,36.359444],[102.673927,36.404446],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096092,36.51638],[101.993668,36.512428],[101.940491,36.546028],[101.873131,36.550526],[101.799332,36.585876],[101.756676,36.586643],[101.690804,36.639732],[101.501999,36.637737],[101.42646,36.66954],[101.302544,36.683079],[101.271599,36.679245],[101.244408,36.5952],[101.150459,36.511517],[101.147789,36.473183],[101.111031,36.444019],[101.109528,36.425179],[100.78904,36.352505],[100.74527,36.350399],[100.712685,36.369617],[100.619797,36.280907]]},type:"Feature",properties:{destinationid:"632500",id:339,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717026,37.235706],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491348,37.73867],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.829185,36.906715],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587021,36.193089],[103.433876,36.176792],[103.357353,36.14119],[103.332901,36.161743],[103.217789,36.172794],[103.044617,36.234787],[102.956459,36.300999],[102.695656,36.358055],[102.67485,36.403896],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096092,36.51638],[101.993668,36.512428],[101.940491,36.546028],[101.873131,36.550526],[101.799332,36.585876],[101.756676,36.586643],[101.690804,36.639732],[101.501999,36.637737],[101.42646,36.66954],[101.303268,36.683037],[101.271599,36.679245],[101.244408,36.5952],[101.150459,36.511517],[101.147789,36.473183],[101.10717,36.424164],[101.052788,36.42231],[100.932571,36.377728],[100.882195,36.382309],[100.865784,36.365292],[100.78904,36.352505],[100.74527,36.350399],[100.713104,36.36972],[100.70813,36.352531],[100.641388,36.310085],[100.431206,36.321243],[100.325378,36.353012],[100.196899,36.365463],[99.971039,36.437172],[99.784355,36.457211],[99.63179,36.541348],[99.529709,36.560532],[99.474159,36.612247],[99.356567,36.651932],[99.305923,36.708324],[99.245247,36.721985],[99.102394,36.79752],[99.065582,36.802574],[99.048683,36.824131],[98.911407,36.874077],[98.905029,36.962193],[98.815552,37.016174],[98.749947,37.02507],[98.671623,37.001698],[98.547836,37.007942],[98.495415,36.957691],[98.454109,36.9561],[98.341957,36.968296],[98.264946,36.994293],[98.07386,36.999783],[97.987709,37.033382],[97.804291,37.052452],[97.655502,37.094868],[97.583977,37.13332],[97.554276,37.198025],[97.505318,37.248398],[97.446983,37.275761],[97.379059,37.274025],[97.370667,37.37466]]},type:"Feature",properties:{destinationid:"632800",id:340,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.492012,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.76944,37.469921],[105.668701,37.448174],[105.621269,37.39249],[105.410904,37.467262],[105.291306,37.479809],[105.223412,37.468822],[105.21386,37.495804],[105.190033,37.496372],[105.189568,37.514816]]},type:"Feature",properties:{destinationid:"640500",id:341,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.513741,41.99316],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.537598,42.940628],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.145775,43.377148],[91.984756,43.383057],[91.858284,43.40847],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.450615,43.353603],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.551712,43.081867],[88.530159,43.088741],[88.45649,43.21896],[88.3573,43.270023],[88.357872,43.308018],[88.333221,43.330078],[88.232658,43.351566],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.958199,43.548328],[87.874199,43.565914],[87.756454,43.619705],[87.58387,43.636585],[87.571442,43.687092],[87.61792,43.793301]]},type:"Feature",properties:{destinationid:"650100",id:342,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.519279,41.992065],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.537598,42.940628],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.181152,43.363888],[92.083977,43.384995],[91.984756,43.383057],[91.856781,43.408417],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.450195,43.353497],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.34816,42.973423],[90.276924,42.929867],[90.15081,42.893951],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.333618,42.92289],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.532837,43.086712],[88.456757,43.218658],[88.360779,43.266186],[88.348587,43.28825],[88.357681,43.308422],[88.314636,43.343632],[88.233322,43.351315],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.950768,43.551899],[87.874748,43.56572],[87.754311,43.620201],[87.585091,43.635803],[87.572472,43.680054],[87.52845,43.684776],[87.478416,43.741673],[87.501083,43.797302],[87.443344,43.885502],[87.182442,43.969723],[87.09507,44.031033],[86.951691,44.08939],[86.845642,44.159172],[86.661476,44.192684],[86.504211,44.197575],[86.438301,44.219528],[86.373894,44.214363],[86.133362,44.276516],[86.008919,44.24815],[85.907135,44.255272],[85.711586,44.299797],[85.620003,44.301231],[85.555847,44.338799],[85.265396,44.334763],[85.172638,44.364445],[85.079765,44.361465],[84.961037,44.391567],[84.836021,44.399612],[84.896004,44.489494],[84.905983,44.621395],[84.852859,44.875679],[84.748764,44.95528],[84.704842,45.090813],[84.800323,45.338142],[84.778282,45.354462],[84.747757,45.448185],[84.786842,45.524734],[84.889084,45.572498],[84.874039,45.595898]]},type:"Feature",properties:{destinationid:"650200",id:343,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.519279,41.992065],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.537598,42.940628],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.181152,43.363888],[92.083977,43.384995],[91.984756,43.383057],[91.856781,43.408417],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.450195,43.353497],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.34816,42.973423],[90.276924,42.929867],[90.15081,42.893951],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.338676,42.922264],[89.231216,42.965038],[89.183983,42.947632]]},type:"Feature",properties:{destinationid:"650400",id:344,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587395,36.193325],[103.433876,36.176792],[103.384201,36.143925],[103.355095,36.141521],[103.33345,36.161549],[103.265343,36.177979],[103.21833,36.172661],[103.117554,36.207817],[103.042801,36.235661],[102.982719,36.288765],[102.859566,36.331532],[102.763458,36.33316],[102.721733,36.359512],[102.693016,36.359444],[102.673927,36.404446],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096092,36.51638],[101.992523,36.512676],[101.940491,36.546028],[101.873131,36.550526],[101.799332,36.585876],[101.756676,36.586643],[101.689354,36.640068],[101.573296,36.630352],[101.464767,36.645027],[101.425949,36.669632],[101.274361,36.681313],[101.244408,36.5952],[101.150459,36.511517],[101.147789,36.473183],[101.111031,36.444019],[101.109093,36.424931],[100.78904,36.352505],[100.74527,36.350399],[100.712685,36.369617],[100.70813,36.352531],[100.643265,36.310349],[100.557152,36.318302],[100.541718,36.293659],[100.557388,36.268024],[100.545456,36.221447],[100.517479,36.173382],[100.451042,36.116459],[100.317024,36.038666],[100.136581,35.964725],[100.119904,35.942406],[99.931961,35.869343],[99.91449,35.850361],[99.928352,35.843975],[99.896362,35.817581],[99.898712,35.797863],[99.85479,35.803589],[99.694756,35.875252],[99.640106,35.809372],[99.567673,35.794388],[99.540436,35.664261],[99.554199,35.613575],[99.527534,35.58408],[99.479309,35.43293],[99.454521,35.402988],[99.363037,35.422523],[99.284439,35.372936],[99.08461,35.342056],[98.978027,35.257786],[98.968971,35.193977],[98.878693,35.11343],[98.798859,35.102081],[98.735306,35.066029],[98.656883,35.064308],[98.430809,34.835846],[98.345093,34.829163],[98.23082,34.884644],[98.153999,34.880844],[98.132355,34.843075],[98.1241,34.777523],[98.135559,34.754734],[97.983315,34.592773],[97.998436,34.555908],[97.980713,34.489895],[97.944572,34.448997],[97.955048,34.384098],[97.931152,34.368305],[97.929611,34.332043],[97.881546,34.275803],[97.782646,34.208641],[97.765724,34.171928],[97.648666,34.127766],[97.581696,34.043503],[97.433487,33.983459],[97.351875,33.972572],[97.27002,33.897354],[97.128326,33.813461],[97.15416,33.784504],[97.19442,33.680943],[97.197678,33.608852],[97.222519,33.589527],[97.217896,33.550434],[97.247665,33.508625],[97.238373,33.475964],[97.282669,33.44297],[97.341301,33.360096],[97.442551,33.31356],[97.473946,33.228466],[97.372551,33.17363],[97.350952,33.129803],[97.296288,33.093834],[97.257904,33.007294],[97.211426,32.989964],[97.048424,33.018936],[97.008728,33.004513]]},type:"Feature",properties:{destinationid:"632700",id:345,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643875,38.213333],[114.506676,38.207626],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.577606,38.009838],[113.510544,38.051674],[113.384987,38.066311],[113.396172,38.048012],[113.359688,37.891396],[113.36969,37.865093],[113.171227,37.874371],[113.089211,37.913761],[113.015869,37.890427],[112.970909,37.900326],[112.938118,37.866634],[112.890251,37.859039],[112.861763,37.794159],[112.80957,37.779396],[112.825058,37.699879],[112.81514,37.659264],[112.723129,37.540283],[112.457344,37.459221],[112.402046,37.456936],[112.358406,37.426346],[112.28595,37.409172],[112.256714,37.2332],[112.229332,37.194134],[112.111588,37.13327],[111.93763,37.004532],[111.929375,36.90556],[111.807312,36.761745],[111.814621,36.518082],[111.75795,36.364861],[111.731247,36.337513],[111.634628,36.320137],[111.518311,36.22295],[111.483688,36.169281],[111.454216,36.067677],[111.346291,35.869617],[111.276924,35.689785],[111.177101,35.64473],[110.801788,35.65081],[110.663704,35.598755],[110.56813,35.595222],[110.517128,35.559059],[110.477318,35.496948],[110.4431,35.391815],[110.414772,35.363499],[110.334206,35.296932],[110.250343,35.293915],[110.192245,35.259804],[110.163292,35.209915],[110.0952,35.16967],[110.0439,35.088676],[110.010643,35.076889],[109.958099,35.016224],[109.897072,35.000187],[109.805298,34.935165],[109.696594,34.929321],[109.475555,34.881626],[109.22242,34.720875],[109.167511,34.611061],[109.119072,34.575298],[109.109833,34.547909],[109.001442,34.568901],[108.827583,34.552479],[108.749771,34.511124],[108.644691,34.482822],[108.544067,34.392712],[108.548775,34.283348],[108.413399,34.250935],[108.251389,34.242275],[108.029198,34.264301],[107.835632,34.263371],[107.761482,34.300835],[107.537407,34.311367],[107.436279,34.344471],[107.302322,34.358467],[107.211655,34.35931],[107.158089,34.342491],[107.099403,34.371338],[107.015503,34.369358],[106.918701,34.39893],[106.759361,34.362022],[106.674004,34.376385],[106.643745,34.343689],[106.50518,34.333061],[106.39695,34.296314],[106.300987,34.322258],[106.143494,34.329868],[106.123146,34.381363],[106.078522,34.398869],[106.080154,34.433144],[106.045464,34.457371],[105.981216,34.452084],[105.877029,34.471512],[105.747574,34.448345],[105.710442,34.467957],[105.650085,34.417828],[105.649803,34.340919],[105.628242,34.321766],[105.559059,34.312454],[105.350616,34.212101],[105.337318,34.191387],[105.312263,34.061714],[105.285423,34.016964],[105.2883,33.972515],[105.323463,33.932652],[105.327423,33.88715],[105.369957,33.846771],[105.387314,33.781345],[105.439102,33.722477],[105.490532,33.701305],[105.492493,33.673988],[105.448128,33.567959],[105.371323,33.516487],[105.368118,33.453671],[105.340881,33.434761],[105.300339,33.444237],[105.234024,33.431099],[105.117844,33.460995],[105.060181,33.503773],[104.987183,33.464596],[104.929413,33.456787],[104.865944,33.406155],[104.906296,33.406425],[104.928894,33.38821]]},type:"Feature",properties:{destinationid:"621200",id:346,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.309639,39.898232],[116.309052,39.884098],[116.212051,39.842579],[116.195847,39.788387],[116.115181,39.734646],[116.077866,39.658249],[116.078247,39.618183],[116.039162,39.57275],[116.044754,39.495964],[116.019218,39.432556],[115.923653,39.300674],[115.875092,39.246861],[115.819374,39.213432],[115.740211,39.113041],[115.688766,38.999279],[115.590446,38.893341],[115.576172,38.835865],[115.543007,38.787655],[115.489319,38.747139],[115.342171,38.730698],[115.23661,38.672756],[115.156647,38.597195],[115.08503,38.572994],[114.990532,38.463135],[114.871872,38.438179],[114.737976,38.348827],[114.667984,38.280186],[114.643059,38.212845],[114.50605,38.207657],[114.448906,38.222752],[114.295929,38.177883],[114.166992,38.184395],[114.098442,38.16],[114.037674,38.114185],[113.939156,38.123322],[113.919998,38.055359],[113.876656,38.070461],[113.783913,38.066944],[113.628304,38.039173],[113.576912,38.009766],[113.510544,38.051674],[113.38903,38.064419],[113.319244,38.100346],[113.190269,38.11673],[113.064835,38.106873],[113.011475,38.056877],[112.926231,38.040329],[112.843437,38.060074],[112.665581,38.00581],[112.580429,38.028141],[112.513687,38.025951],[112.467796,37.959934],[112.4701,37.852242],[112.485466,37.832615],[112.465805,37.776337],[112.477753,37.747036],[112.456276,37.696167],[112.3396,37.631275],[112.262207,37.614113],[112.173195,37.5224],[112.071625,37.50037],[112.028519,37.468964],[111.983788,37.402031],[111.775681,37.298584],[111.717606,37.235806],[111.680374,37.23278],[111.600693,37.265423],[111.580208,37.314926],[111.522232,37.343769],[111.49926,37.422199],[111.297493,37.478222],[111.237236,37.526581],[111.180344,37.523945],[111.129066,37.50098],[111.094025,37.507019],[110.857979,37.408512],[110.707047,37.439053],[110.650894,37.555065],[110.614487,37.577003],[110.180855,37.560368],[110.06765,37.576019],[110.000656,37.627228],[109.915619,37.597977],[109.85186,37.59803],[109.641815,37.553974],[109.591217,37.562004],[109.523323,37.544525],[109.440437,37.566597],[109.321869,37.538536],[109.158318,37.612717],[108.959656,37.603821],[108.837067,37.63443],[108.632812,37.570835],[108.202026,37.518002],[107.999153,37.54398],[107.692345,37.555874],[107.491646,37.738693],[107.426659,37.71764],[107.355263,37.670063],[107.022774,37.636951],[106.836372,37.573635],[106.73111,37.575024],[106.481926,37.523159],[106.249153,37.504524],[106.094154,37.461025],[105.770012,37.469975],[105.671562,37.449463],[105.616501,37.37756],[105.629349,37.308628],[105.686188,37.258369],[105.739571,37.138798],[105.710571,37.105179],[105.510483,37.070934],[105.398628,37.017513],[105.375931,36.989342],[105.28965,36.957607],[105.029297,36.945358],[104.828323,36.906361],[104.803146,36.890533],[104.795952,36.864059],[104.807968,36.78447],[104.797661,36.765556],[104.717255,36.742741],[104.635788,36.688324],[104.586975,36.698704],[104.55629,36.676228],[104.506073,36.674545],[104.466026,36.632244],[104.376465,36.608078],[104.325211,36.563515],[104.153282,36.519726],[104.138428,36.486908],[104.001648,36.368832],[103.953171,36.297676],[103.852798,36.286766],[103.791168,36.236458],[103.692917,36.299385],[103.635117,36.303795],[103.593819,36.287014],[103.587395,36.193325],[103.433876,36.176792],[103.384201,36.143925],[103.355095,36.141521],[103.33345,36.161549],[103.265343,36.177979],[103.21833,36.172661],[103.117554,36.207817],[103.042801,36.235661],[102.982719,36.288765],[102.859566,36.331532],[102.763458,36.33316],[102.721733,36.359512],[102.693016,36.359444],[102.673927,36.404446],[102.561256,36.441448],[102.316811,36.484306],[102.231606,36.478123],[102.096092,36.51638],[101.993668,36.512428],[101.941063,36.54583],[101.871872,36.55085],[101.741402,36.600391],[101.724747,36.561958],[101.66864,36.547276],[101.632492,36.518284],[101.582878,36.40612],[101.536118,36.376801],[101.519508,36.31057],[101.547798,36.291332],[101.559174,36.209908],[101.589958,36.170521],[101.575172,36.156113],[101.582764,36.132877],[101.515465,36.11459],[101.460915,36.07695],[101.435104,36.031624],[101.36795,36.014019],[101.352692,35.977177],[101.317055,35.965652],[101.330086,35.855133],[101.315254,35.806164],[101.295822,35.810417],[101.29837,35.78941],[101.213928,35.769306],[101.148384,35.784222],[101.118462,35.808861],[101.109894,35.774078],[101.06041,35.773785],[101.105148,35.664921],[101.080139,35.585785],[101.108459,35.503483],[101.038261,35.47599],[100.963699,35.408279],[100.899925,35.306831],[100.80555,35.25248],[100.724579,35.144333],[100.770821,35.083866],[100.817482,35.064152],[100.829643,35.010616],[100.857666,34.991089],[100.88649,34.936493],[100.889526,34.902473],[100.826157,34.860168],[100.810211,34.730202],[100.749428,34.710892],[100.720695,34.724415],[100.700142,34.68684],[100.676239,34.691223],[100.685516,34.676544],[100.648643,34.68507],[100.631592,34.658234],[100.572159,34.630638],[100.555008,34.597591],[100.55825,34.551277],[100.410316,34.527756],[100.402534,34.471359],[100.386963,34.481777],[100.337021,34.450264],[100.271606,34.453285],[100.242348,34.473339]]},type:"Feature",properties:{destinationid:"632600",id:347,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.517403,41.992466],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.029099,41.855553],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.342926,42.442467],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.224586,42.51915],[94.168839,42.545822],[93.958397,42.721741],[93.61171,42.906116],[93.537346,42.836361],[93.513351,42.833572]]},type:"Feature",properties:{destinationid:"652200",id:348,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.517403,41.992466],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.537598,42.940628],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.145775,43.377148],[91.984756,43.383057],[91.858284,43.40847],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.450615,43.353603],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.551712,43.081867],[88.530159,43.088741],[88.45649,43.21896],[88.3573,43.270023],[88.357872,43.308018],[88.333221,43.330078],[88.232658,43.351566],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.958199,43.548328],[87.874199,43.565914],[87.756454,43.619705],[87.58387,43.636585],[87.572472,43.680054],[87.52845,43.684776],[87.478149,43.742172],[87.501236,43.796364],[87.468483,43.86171],[87.440079,43.887325],[87.269638,43.946609],[87.30365,44.014248]]},type:"Feature",properties:{destinationid:"652300",id:349,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.519279,41.992065],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.862679,43.408367],[91.741333,43.387409],[91.711029,43.368168],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.538208,43.084557],[88.603127,42.876499],[88.594353,42.833248],[88.611404,42.802856],[88.610641,42.754433],[88.570068,42.611141],[88.538124,42.581421],[88.533928,42.529324],[88.517448,42.520039],[88.52536,42.471024],[88.542633,42.457245],[88.523819,42.397831],[88.361984,42.283737],[88.190506,42.246071],[87.899689,42.273983],[87.917618,42.233566],[87.745361,42.217056],[87.371117,42.227016],[86.962112,42.298786],[86.779884,42.301956],[86.68824,42.257473],[86.64856,42.147839],[86.559135,42.086937],[86.464783,41.955467],[86.400635,41.919048],[86.288055,41.819401],[86.240181,41.815197],[86.222885,41.78186],[86.15007,41.786152],[86.151077,41.768925]]},type:"Feature",properties:{destinationid:"652800",id:350,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.517403,41.992466],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.862679,43.408367],[91.741333,43.387409],[91.711029,43.368168],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.34816,42.973423],[90.276924,42.929867],[90.153419,42.89439],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.335197,42.92263],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.532837,43.086712],[88.456757,43.218658],[88.360779,43.266186],[88.348587,43.28825],[88.357681,43.308422],[88.314636,43.343632],[88.233322,43.351315],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.950768,43.551899],[87.874748,43.56572],[87.754311,43.620201],[87.585091,43.635803],[87.572472,43.680054],[87.52845,43.684776],[87.478416,43.741673],[87.501083,43.797302],[87.443344,43.885502],[87.182442,43.969723],[87.09507,44.031033],[86.951691,44.08939],[86.842224,44.160183],[86.661476,44.192684],[86.504211,44.197575],[86.438301,44.219528],[86.373894,44.214363],[86.133362,44.276516],[86.008919,44.24815],[85.907135,44.255272],[85.711586,44.299797],[85.620003,44.301231],[85.557419,44.338585],[85.265396,44.334763],[85.172638,44.364445],[85.07711,44.361755],[84.962601,44.391319],[84.810974,44.404579],[84.548676,44.380894],[84.4963,44.403107],[84.383125,44.374573],[84.150635,44.354897],[84.099464,44.366272],[84.035156,44.416061],[83.961433,44.44183],[83.857613,44.46386],[83.646255,44.474422],[83.612366,44.517502],[83.530983,44.55056],[83.423698,44.54607],[83.240799,44.612274],[83.088089,44.617466],[82.957687,44.649006],[82.925621,44.597897],[82.785629,44.561352],[82.760391,44.539371],[82.669914,44.547787],[82.590408,44.520561],[82.353508,44.525272],[82.265198,44.542252],[82.166542,44.60685],[82.082069,44.6306],[82.094154,44.740547],[82.05703,44.796272],[82.074417,44.90337]]},type:"Feature",properties:{destinationid:"652700",id:351,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.519279,41.992065],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.858284,43.40847],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.538208,43.084557],[88.603127,42.876499],[88.594353,42.833248],[88.611404,42.802856],[88.610641,42.754433],[88.570068,42.611141],[88.538124,42.581421],[88.533928,42.529324],[88.517448,42.520039],[88.52536,42.471024],[88.542633,42.457245],[88.523819,42.397831],[88.362534,42.284046],[88.190506,42.246071],[87.899689,42.273983],[87.917618,42.233566],[87.745361,42.217056],[87.371117,42.227016],[86.962112,42.298786],[86.777451,42.301388],[86.68824,42.257473],[86.64856,42.147839],[86.559135,42.086937],[86.468033,41.958378],[86.400635,41.919048],[86.288055,41.819401],[86.239403,41.814705],[86.222885,41.78186],[86.142166,41.786316],[86.034309,41.833065],[85.735184,41.855026],[85.49855,41.918022],[85.292221,41.994106],[85.140327,41.993877],[85.110756,42.023232],[85.067833,42.036987],[84.880936,42.010845],[84.641792,42.014004],[84.540001,41.980812],[84.376541,41.989494],[84.16819,41.948715],[84.129044,41.934258],[84.014091,41.835968],[83.835686,41.828785],[83.746864,41.800594],[83.164833,41.743267],[83.058899,41.786701],[82.954147,41.787209],[82.913635,41.76849],[82.863884,41.706764],[82.821121,41.687126],[82.764389,41.675747],[82.614677,41.682121],[82.506454,41.63205],[82.3657,41.594311],[82.235123,41.530621],[82.078171,41.527653],[81.624763,41.398102],[81.083733,41.391251],[80.915031,41.436634],[80.40123,41.338505],[80.34166,41.243973],[80.214409,41.172806],[80.21125,41.103706],[80.188942,41.069656],[79.904694,40.757988],[79.807419,40.685566],[79.73951,40.643681],[79.554855,40.574963],[79.365234,40.548965],[79.315521,40.517578],[79.289909,40.462009],[79.166176,40.392048],[79.036171,40.286625],[78.870323,40.193466],[78.761963,40.096535],[78.585838,40.027004],[78.440376,39.945553],[78.139908,39.904636],[78.035927,39.930862],[77.951721,39.930908],[77.844078,39.905483],[77.717407,39.836178],[77.543152,39.814079],[77.208527,39.811596],[77.034981,39.839554],[76.931473,39.837101],[76.808281,39.863049],[76.720375,39.858971],[76.58976,39.818096],[76.442871,39.809864],[76.18782,39.738583],[76.172844,39.713413]]},type:"Feature",properties:{destinationid:"653000",id:352,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.519279,41.992065],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.861923,43.408413],[91.741333,43.387409],[91.711029,43.368168],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.538208,43.084557],[88.603127,42.876499],[88.594353,42.833248],[88.611404,42.802856],[88.610641,42.754433],[88.570068,42.611141],[88.538124,42.581421],[88.533928,42.529324],[88.517448,42.520039],[88.52536,42.471024],[88.542633,42.457245],[88.523819,42.397831],[88.362534,42.284046],[88.190506,42.246071],[87.899689,42.273983],[87.917618,42.233566],[87.745361,42.217056],[87.371117,42.227016],[86.962112,42.298786],[86.777451,42.301388],[86.68824,42.257473],[86.64856,42.147839],[86.559135,42.086937],[86.468033,41.958378],[86.400635,41.919048],[86.288055,41.819401],[86.239403,41.814705],[86.222885,41.78186],[86.142166,41.786316],[86.034309,41.833065],[85.735184,41.855026],[85.49855,41.918022],[85.292221,41.994106],[85.140327,41.993877],[85.110756,42.023232],[85.066132,42.037182],[84.880936,42.010845],[84.638588,42.013721],[84.536995,41.980461],[84.375008,41.989361],[84.137398,41.938961],[84.014091,41.835968],[83.835686,41.828785],[83.746864,41.800594],[83.164833,41.743267],[83.058899,41.786701],[82.954147,41.787209],[82.913635,41.76849],[82.863884,41.706764],[82.821121,41.687126],[82.764389,41.675747],[82.614677,41.682121],[82.506454,41.63205],[82.3657,41.594311],[82.235123,41.530621],[82.078171,41.527653],[81.624763,41.398102],[81.084412,41.391216],[80.925758,41.436356],[80.794144,41.419983],[80.393616,41.335808],[80.342293,41.244564],[80.248245,41.196495],[80.265198,41.170532]]},type:"Feature",properties:{destinationid:"652900",id:353,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.519279,41.992065],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.858284,43.40847],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.538208,43.084557],[88.603127,42.876499],[88.594353,42.833248],[88.611404,42.802856],[88.610641,42.754433],[88.570068,42.611141],[88.538124,42.581421],[88.533928,42.529324],[88.517448,42.520039],[88.52536,42.471024],[88.542633,42.457245],[88.523819,42.397831],[88.362534,42.284046],[88.190506,42.246071],[87.899689,42.273983],[87.917618,42.233566],[87.745361,42.217056],[87.371117,42.227016],[86.962112,42.298786],[86.777451,42.301388],[86.68824,42.257473],[86.64856,42.147839],[86.559135,42.086937],[86.468033,41.958378],[86.400635,41.919048],[86.288055,41.819401],[86.239403,41.814705],[86.222885,41.78186],[86.142166,41.786316],[86.034309,41.833065],[85.735184,41.855026],[85.49855,41.918022],[85.292221,41.994106],[85.140327,41.993877],[85.110756,42.023232],[85.067833,42.036987],[84.880936,42.010845],[84.641792,42.014004],[84.540001,41.980812],[84.376541,41.989494],[84.16819,41.948715],[84.129044,41.934258],[84.014091,41.835968],[83.835686,41.828785],[83.746864,41.800594],[83.164833,41.743267],[83.058899,41.786701],[82.954147,41.787209],[82.913635,41.76849],[82.863884,41.706764],[82.821121,41.687126],[82.764389,41.675747],[82.614677,41.682121],[82.506454,41.63205],[82.3657,41.594311],[82.235123,41.530621],[82.078171,41.527653],[81.624763,41.398102],[81.083733,41.391251],[80.915031,41.436634],[80.400429,41.338314],[80.34166,41.243973],[80.214409,41.172806],[80.21125,41.103706],[80.188942,41.069656],[79.904694,40.757988],[79.807419,40.685566],[79.73951,40.643681],[79.554855,40.574963],[79.365234,40.548965],[79.315521,40.517578],[79.289909,40.462009],[79.166176,40.392048],[79.036171,40.286625],[78.870323,40.193466],[78.761963,40.096535],[78.585838,40.027004],[78.441895,39.946167],[78.139908,39.904636],[78.035927,39.930862],[77.951721,39.930908],[77.844078,39.905483],[77.717407,39.836178],[77.54496,39.814175],[77.207695,39.811646],[76.798187,39.863537],[76.708542,39.857098],[76.544098,39.811008],[76.450287,39.811573],[76.188332,39.736935],[76.115112,39.696602],[75.978821,39.654915],[75.9459,39.616062],[75.98571,39.585503],[76.002304,39.492519],[75.989532,39.46767]]},type:"Feature",properties:{destinationid:"653100",id:354,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.517403,41.992466],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.862679,43.408367],[91.741333,43.387409],[91.711029,43.368168],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.34816,42.973423],[90.276924,42.929867],[90.153419,42.89439],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.335197,42.92263],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.53347,43.086426],[88.456757,43.218658],[88.360779,43.266186],[88.348587,43.28825],[88.357681,43.308422],[88.314354,43.343803],[88.233322,43.351315],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.950768,43.551899],[87.874748,43.56572],[87.754311,43.620201],[87.584167,43.636372],[87.568932,43.668049],[87.608543,43.783951],[87.59877,43.870659],[87.617668,43.94841],[87.522186,43.952454],[87.520149,44.01442],[87.495895,44.025192],[87.510277,44.0882],[87.48658,44.113903],[87.526054,44.167431]]},type:"Feature",properties:{destinationid:"659004",id:356,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.517403,41.992466],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.862679,43.408367],[91.741333,43.387409],[91.711029,43.368168],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.34816,42.973423],[90.276924,42.929867],[90.153419,42.89439],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.335197,42.92263],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.532837,43.086712],[88.456757,43.218658],[88.360779,43.266186],[88.348587,43.28825],[88.357681,43.308422],[88.314636,43.343632],[88.233322,43.351315],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.950768,43.551899],[87.874748,43.56572],[87.754311,43.620201],[87.585091,43.635803],[87.572472,43.680054],[87.52845,43.684776],[87.478416,43.741673],[87.501083,43.797302],[87.443344,43.885502],[87.182442,43.969723],[87.09507,44.031033],[86.951691,44.08939],[86.849861,44.157585],[86.663902,44.192406],[86.504211,44.197575],[86.438301,44.219528],[86.372169,44.214653],[86.119743,44.277454],[86.122368,44.30125],[86.041313,44.305885]]},type:"Feature",properties:{destinationid:"659001",id:357,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707985,40.374752],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.510971,41.99361],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.864418,43.408237],[91.741814,43.387535],[91.711029,43.368168],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.551712,43.081867],[88.530159,43.088741],[88.45649,43.21896],[88.360779,43.266186],[88.348587,43.28825],[88.357681,43.308422],[88.314636,43.343632],[88.233322,43.351315],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.950768,43.551899],[87.874748,43.56572],[87.754311,43.620201],[87.585091,43.635803],[87.572472,43.680054],[87.52845,43.684776],[87.478416,43.741673],[87.501083,43.797302],[87.443344,43.885502],[87.182442,43.969723],[87.09507,44.031033],[86.951691,44.08939],[86.84771,44.158447],[86.661476,44.192684],[86.504211,44.197575],[86.438301,44.219528],[86.373894,44.214363],[86.133362,44.276516],[86.008919,44.24815],[85.907135,44.255272],[85.711586,44.299797],[85.620003,44.301231],[85.555847,44.338799],[85.265396,44.334763],[85.172638,44.364445],[85.079765,44.361465],[84.961037,44.391567],[84.835884,44.399696],[84.896004,44.489494],[84.905983,44.621395],[84.853172,44.874947],[84.748764,44.95528],[84.709198,45.0452],[84.70491,45.092079],[84.800323,45.338142],[84.778931,45.353134],[84.746941,45.442085],[84.784363,45.513004],[84.784836,45.574593],[84.824829,45.625458],[84.937096,45.66814],[84.952713,45.729729],[84.87307,45.79248],[84.731186,45.843243],[84.694633,45.870293],[84.608383,45.969574],[84.591911,46.019485],[84.603523,46.057713],[84.55088,46.105408],[84.315628,46.194168],[83.967491,46.24844],[83.934143,46.290024],[83.867317,46.325268],[83.71582,46.351128],[83.619003,46.411865],[83.518776,46.426315],[83.390556,46.471054],[83.129593,46.62096],[82.943687,46.66515],[82.943581,46.696663],[82.985138,46.74567]]},type:"Feature",properties:{destinationid:"654200",id:358,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.519279,41.992065],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.855789,43.408363],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.538208,43.084557],[88.603127,42.876499],[88.594353,42.833248],[88.611404,42.802856],[88.610641,42.754433],[88.570068,42.611141],[88.538124,42.581421],[88.533928,42.529324],[88.517448,42.520039],[88.52536,42.471024],[88.542633,42.457245],[88.523819,42.397831],[88.362534,42.284046],[88.190506,42.246071],[87.899689,42.273983],[87.917618,42.233566],[87.745361,42.217056],[87.371117,42.227016],[86.962112,42.298786],[86.777451,42.301388],[86.68824,42.257473],[86.64856,42.147839],[86.559135,42.086937],[86.468033,41.958378],[86.400635,41.919048],[86.288055,41.819401],[86.239403,41.814705],[86.222885,41.78186],[86.142166,41.786316],[86.034309,41.833065],[85.735184,41.855026],[85.49855,41.918022],[85.292221,41.994106],[85.140327,41.993877],[85.109413,42.024006],[85.061836,42.037399],[84.881966,42.010902],[84.638588,42.013721],[84.536995,41.980461],[84.367821,41.988388],[84.136215,41.938454],[84.01786,41.836777],[83.834366,41.828617],[83.693848,41.793964],[83.164001,41.743244],[83.05249,41.787666],[82.957306,41.787689],[82.91954,41.772633],[82.904762,41.759338],[82.908897,41.703537],[82.890892,41.660755],[82.905006,41.5909],[82.892944,41.515335],[82.820602,41.422359],[82.741966,41.20433],[82.598732,41.153736],[82.491852,41.157207],[82.455864,41.143387],[82.421837,41.086578],[82.328705,41.049675],[82.28495,41.012436],[82.251114,40.943439],[82.157463,40.888172],[82.136368,40.837563],[81.995171,40.67696],[81.699043,40.58527],[81.618362,40.574894],[81.463272,40.487396],[81.358154,40.477867],[81.122925,40.34819],[81.091736,40.310459],[81.028214,40.204765],[80.983963,40.083748],[80.967873,39.917908],[80.986816,39.471161],[80.96376,39.421333],[80.972527,39.373077],[80.938499,39.300644],[80.958534,39.07375],[80.928162,38.907867],[80.990692,38.74688],[80.992981,38.661572],[80.973892,38.615162],[80.988564,38.519608],[80.966606,38.442093],[80.938469,38.401009],[80.845398,38.333511],[80.759392,38.207195],[80.647041,38.144535],[80.616127,38.096134],[80.618607,37.98727],[80.531136,37.842731],[80.513557,37.778854],[80.395164,37.645569],[80.36982,37.55983],[80.018082,37.378078],[79.972,37.326088],[79.961861,37.217354],[79.980217,37.181129],[79.977722,37.125854],[79.963081,37.09753],[79.925865,37.110687]]},type:"Feature",properties:{destinationid:"653200",id:359,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.513741,41.99316],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.537598,42.940628],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.149689,43.376438],[91.984756,43.383057],[91.858284,43.40847],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.450615,43.353603],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.34816,42.973423],[90.276924,42.929867],[90.15081,42.893951],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.335197,42.92263],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.532837,43.086712],[88.456757,43.218658],[88.360779,43.266186],[88.348587,43.28825],[88.357681,43.308422],[88.314636,43.343632],[88.233322,43.351315],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.950768,43.551899],[87.874748,43.56572],[87.754311,43.620201],[87.585091,43.635803],[87.572472,43.680054],[87.52845,43.684776],[87.478416,43.741673],[87.501083,43.797302],[87.443344,43.885502],[87.182442,43.969723],[87.09507,44.031033],[86.951691,44.08939],[86.842224,44.160183],[86.661476,44.192684],[86.504211,44.197575],[86.438301,44.219528],[86.373894,44.214363],[86.133362,44.276516],[86.008919,44.24815],[85.907135,44.255272],[85.711586,44.299797],[85.620003,44.301231],[85.557419,44.338585],[85.265396,44.334763],[85.172638,44.364445],[85.07711,44.361755],[84.962601,44.391319],[84.810974,44.404579],[84.548676,44.380894],[84.4963,44.403107],[84.383125,44.374573],[84.150635,44.354897],[84.099464,44.366272],[84.035156,44.416061],[83.961433,44.44183],[83.857613,44.46386],[83.646255,44.474422],[83.612366,44.517502],[83.530983,44.55056],[83.423698,44.54607],[83.240799,44.612274],[83.088089,44.617466],[82.95858,44.648926],[82.925621,44.597897],[82.785629,44.561352],[82.763718,44.540241],[82.669914,44.547787],[82.590408,44.520561],[82.356483,44.524933],[82.271141,44.540535],[82.165192,44.607468],[82.074074,44.630161],[81.455719,44.611599],[81.376747,44.591343],[81.328735,44.535748],[81.130348,44.481163],[81.161842,44.461124],[81.138336,44.472557],[81.056557,44.434555],[80.869431,44.256752],[80.785698,44.21563],[80.781403,44.177891],[80.814774,44.102135],[80.838326,44.078777],[80.892464,44.06551],[80.935776,44.007912],[81.080803,43.966194],[81.209129,43.977448],[81.31752,43.921947]]},type:"Feature",properties:{destinationid:"654000",id:361,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.519279,41.992065],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.860168,43.40847],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.538208,43.084557],[88.603127,42.876499],[88.594353,42.833248],[88.611404,42.802856],[88.610641,42.754433],[88.570068,42.611141],[88.538124,42.581421],[88.533928,42.529324],[88.517448,42.520039],[88.52536,42.471024],[88.542633,42.457245],[88.523819,42.397831],[88.362534,42.284046],[88.190506,42.246071],[87.899689,42.273983],[87.917618,42.233566],[87.745361,42.217056],[87.371117,42.227016],[86.962112,42.298786],[86.777451,42.301388],[86.68824,42.257473],[86.64856,42.147839],[86.559135,42.086937],[86.468033,41.958378],[86.400635,41.919048],[86.288055,41.819401],[86.239403,41.814705],[86.222885,41.78186],[86.142166,41.786316],[86.034309,41.833065],[85.735184,41.855026],[85.49855,41.918022],[85.292221,41.994106],[85.140327,41.993877],[85.109413,42.024006],[85.061836,42.037399],[84.881966,42.010902],[84.638588,42.013721],[84.536995,41.980461],[84.367821,41.988388],[84.136215,41.938454],[84.01786,41.836777],[83.834366,41.828617],[83.690826,41.793598],[83.164001,41.743244],[83.058899,41.786701],[82.951378,41.786568],[82.904762,41.759338],[82.890366,41.507458],[82.820602,41.422359],[82.741966,41.20433],[82.598732,41.153736],[82.491852,41.157207],[82.455864,41.143387],[82.421837,41.086578],[82.328705,41.049675],[82.28495,41.012436],[82.251114,40.943439],[82.157463,40.888172],[82.136368,40.837563],[81.993179,40.676025],[81.699043,40.58527],[81.618362,40.574894],[81.461372,40.486919],[81.342674,40.470284],[81.302116,40.514534],[81.305626,40.5382],[81.286613,40.541828]]},type:"Feature",properties:{destinationid:"659002",id:362,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.517403,41.992466],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.537598,42.940628],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.145775,43.377148],[91.984756,43.383057],[91.858284,43.40847],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.450615,43.353603],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.551712,43.081867],[88.530159,43.088741],[88.45649,43.21896],[88.360779,43.266186],[88.348587,43.28825],[88.357681,43.308422],[88.314636,43.343632],[88.233322,43.351315],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.950768,43.551899],[87.874748,43.56572],[87.754311,43.620201],[87.585091,43.635803],[87.572472,43.680054],[87.52845,43.684776],[87.478416,43.741673],[87.501083,43.797302],[87.443344,43.885502],[87.182442,43.969723],[87.09507,44.031033],[86.951691,44.08939],[86.84771,44.158447],[86.661476,44.192684],[86.504211,44.197575],[86.438301,44.219528],[86.373894,44.214363],[86.133362,44.276516],[86.008919,44.24815],[85.907135,44.255272],[85.711586,44.299797],[85.620003,44.301231],[85.555847,44.338799],[85.265396,44.334763],[85.172638,44.364445],[85.079765,44.361465],[84.962601,44.391319],[84.835182,44.400276],[84.896004,44.489494],[84.905983,44.621395],[84.852859,44.875679],[84.748764,44.95528],[84.704842,45.090813],[84.800301,45.338017],[84.778931,45.353134],[84.746925,45.443729],[84.776001,45.487293],[84.783829,45.571289],[84.804352,45.605671],[84.945877,45.674622],[85.173233,45.741146],[85.257164,45.823792],[85.298744,45.910118],[85.358925,45.972698],[85.580475,46.055355],[85.626526,46.105633],[85.627441,46.154041],[85.679695,46.184372],[85.830704,46.214924],[85.895752,46.247936],[85.943283,46.356533],[86.030411,46.446369],[86.056519,46.657681],[86.213295,46.745029],[86.372963,46.863583],[86.55481,46.943913],[86.830048,47.0084],[87.045639,47.040527],[87.342171,47.009209],[87.412933,47.052433],[87.56041,47.063667],[87.67057,47.135551],[87.733971,47.222237],[87.882027,47.265984],[87.987724,47.376942],[88.007874,47.425186],[88.019203,47.53693],[88.094879,47.582027],[88.150688,47.69165],[88.178818,47.759998],[88.131523,47.817631],[88.139572,47.848354]]},type:"Feature",properties:{destinationid:"654300",id:364,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.519279,41.992065],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.858284,43.40847],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.538208,43.084557],[88.603127,42.876499],[88.594353,42.833248],[88.611404,42.802856],[88.610641,42.754433],[88.570068,42.611141],[88.538124,42.581421],[88.533928,42.529324],[88.517448,42.520039],[88.52536,42.471024],[88.542633,42.457245],[88.523819,42.397831],[88.362534,42.284046],[88.190506,42.246071],[87.899689,42.273983],[87.917618,42.233566],[87.745361,42.217056],[87.371117,42.227016],[86.962112,42.298786],[86.777451,42.301388],[86.68824,42.257473],[86.64856,42.147839],[86.559135,42.086937],[86.468033,41.958378],[86.400635,41.919048],[86.288055,41.819401],[86.239403,41.814705],[86.222885,41.78186],[86.142166,41.786316],[86.034309,41.833065],[85.735184,41.855026],[85.49855,41.918022],[85.292221,41.994106],[85.140327,41.993877],[85.110756,42.023232],[85.067833,42.036987],[84.880936,42.010845],[84.641792,42.014004],[84.540001,41.980812],[84.376541,41.989494],[84.16819,41.948715],[84.129044,41.934258],[84.014091,41.835968],[83.835686,41.828785],[83.746864,41.800594],[83.164833,41.743267],[83.058899,41.786701],[82.954147,41.787209],[82.913635,41.76849],[82.863884,41.706764],[82.821121,41.687126],[82.764389,41.675747],[82.614677,41.682121],[82.506454,41.63205],[82.3657,41.594311],[82.235123,41.530621],[82.078171,41.527653],[81.624763,41.398102],[81.083733,41.391251],[80.915031,41.436634],[80.399315,41.338013],[80.34166,41.243973],[80.214409,41.172806],[80.21125,41.103706],[80.189835,41.070736],[79.897461,40.751797],[79.745468,40.646645],[79.616768,40.595612],[79.365234,40.548965],[79.315521,40.517578],[79.289429,40.461655],[78.81617,40.154743],[78.836952,40.12925],[78.834808,40.087963],[78.855751,40.049423],[78.892273,40.013733],[79.027931,39.978592],[79.083786,39.90131],[79.091545,39.87088],[79.07798,39.867741]]},type:"Feature",properties:{destinationid:"659003",id:367,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.517403,41.992466],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.537598,42.940628],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.145775,43.377148],[91.984756,43.383057],[91.858284,43.40847],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.450615,43.353603],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.551712,43.081867],[88.530159,43.088741],[88.45649,43.21896],[88.360779,43.266186],[88.348587,43.28825],[88.357681,43.308422],[88.314636,43.343632],[88.233322,43.351315],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.950768,43.551899],[87.874748,43.56572],[87.754311,43.620201],[87.585091,43.635803],[87.572472,43.680054],[87.52845,43.684776],[87.478416,43.741673],[87.501083,43.797302],[87.443344,43.885502],[87.182442,43.969723],[87.09507,44.031033],[86.951691,44.08939],[86.84771,44.158447],[86.661476,44.192684],[86.504211,44.197575],[86.438301,44.219528],[86.373894,44.214363],[86.133362,44.276516],[86.008919,44.24815],[85.907135,44.255272],[85.711586,44.299797],[85.620003,44.301231],[85.555847,44.338799],[85.265396,44.334763],[85.172638,44.364445],[85.079765,44.361465],[84.962601,44.391319],[84.835068,44.400387],[84.896004,44.489494],[84.905983,44.621395],[84.852859,44.875679],[84.748764,44.95528],[84.704842,45.090813],[84.800247,45.337765],[84.778694,45.353607],[84.746971,45.444489],[84.784363,45.513004],[84.785179,45.575459],[84.820694,45.622261],[85.173233,45.741146],[85.257164,45.823792],[85.298744,45.910118],[85.358925,45.972698],[85.580475,46.055355],[85.626526,46.105633],[85.627441,46.154041],[85.679695,46.184372],[85.830704,46.214924],[85.895752,46.247936],[85.943283,46.356533],[86.030411,46.446369],[86.056519,46.657681],[86.213295,46.745029],[86.371651,46.86285],[86.55481,46.943913],[86.830048,47.0084],[87.045639,47.040527],[87.342171,47.009209],[87.412933,47.052433],[87.56414,47.064831],[87.67057,47.135551],[87.733971,47.222237],[87.876678,47.262905],[87.951271,47.327854],[87.824936,47.353104]]},type:"Feature",properties:{destinationid:"659005",id:368,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.519279,41.992065],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.862679,43.408367],[91.741333,43.387409],[91.711029,43.368168],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.144012,42.89312],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.337288,42.922379],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.538597,43.084667],[88.603127,42.876499],[88.594353,42.833248],[88.611404,42.802856],[88.610641,42.754433],[88.570068,42.611141],[88.538124,42.581421],[88.533928,42.529324],[88.517448,42.520039],[88.52536,42.471024],[88.542633,42.457245],[88.523819,42.397831],[88.360275,42.282883],[88.190506,42.246071],[87.899689,42.273983],[87.917618,42.233566],[87.745361,42.217056],[87.371117,42.227016],[87.221886,42.244972],[87.112961,42.279476],[86.789963,42.303844],[86.688904,42.258202],[86.64856,42.147839],[86.559135,42.086937],[86.466545,41.956989],[86.400635,41.919048],[86.288055,41.819401],[86.239403,41.814705],[86.223846,41.782135],[86.142166,41.786316],[86.034309,41.833065],[85.737305,41.854591],[85.519051,41.913631],[85.500969,41.827232]]},type:"Feature",properties:{destinationid:"659006",id:370,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.517403,41.992466],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.532997,42.942425],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.155624,43.375011],[91.984756,43.383057],[91.862679,43.408367],[91.741333,43.387409],[91.711029,43.368168],[91.65139,43.39011],[91.448364,43.352982],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.34816,42.973423],[90.276924,42.929867],[90.153419,42.89439],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.335197,42.92263],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.532837,43.086712],[88.456757,43.218658],[88.360779,43.266186],[88.348587,43.28825],[88.357681,43.308422],[88.314636,43.343632],[88.233322,43.351315],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.950768,43.551899],[87.874748,43.56572],[87.754311,43.620201],[87.585091,43.635803],[87.572472,43.680054],[87.52845,43.684776],[87.478416,43.741673],[87.501083,43.797302],[87.443344,43.885502],[87.182442,43.969723],[87.09507,44.031033],[86.951691,44.08939],[86.842224,44.160183],[86.661476,44.192684],[86.504211,44.197575],[86.438301,44.219528],[86.373894,44.214363],[86.133362,44.276516],[86.008919,44.24815],[85.907135,44.255272],[85.711586,44.299797],[85.620003,44.301231],[85.557419,44.338585],[85.265396,44.334763],[85.172638,44.364445],[85.07711,44.361755],[84.962601,44.391319],[84.810974,44.404579],[84.548676,44.380894],[84.4963,44.403107],[84.383125,44.374573],[84.147324,44.355335],[84.099464,44.366272],[84.035156,44.416061],[83.964607,44.440975],[83.857613,44.46386],[83.648247,44.473904],[83.612366,44.517502],[83.533928,44.549698],[83.396416,44.551601],[83.238701,44.612694],[83.088089,44.617466],[82.955719,44.649014],[82.925621,44.597897],[82.896118,44.588657],[82.896004,44.604179],[82.881935,44.604511],[82.856194,44.592026],[82.797974,44.706875],[82.798294,44.758556],[82.659966,44.762825],[82.596359,44.8316],[82.556969,44.834366],[82.524445,44.803764],[82.430992,44.830681],[82.354584,44.827888],[82.353661,44.840923]]},type:"Feature",properties:{destinationid:"659007",id:378,originid:"110000"}},{geometry:{type:"LineString",coordinates:[[116.405281,39.904991],[116.405846,39.933411],[116.379616,39.951641],[116.376846,39.992676],[116.269745,40.122547],[116.217247,40.221401],[116.086594,40.278603],[116.004944,40.358452],[115.885979,40.35899],[115.754639,40.322262],[115.635674,40.346516],[115.597855,40.38237],[115.510933,40.370502],[115.387627,40.39307],[115.227509,40.446999],[115.213318,40.498508],[115.188782,40.520256],[115.001122,40.561237],[114.875412,40.608387],[114.861389,40.641788],[114.811813,40.675945],[114.798897,40.722736],[114.769722,40.731987],[114.619736,40.74728],[114.392197,40.698803],[114.196915,40.69017],[114.121735,40.762249],[113.93576,40.839931],[113.792236,40.872272],[113.694778,40.927147],[113.60112,40.941948],[113.437866,40.936653],[113.398727,40.95895],[113.284676,40.971424],[113.079819,40.965569],[112.989212,40.979115],[112.82222,40.878933],[112.638184,40.857765],[112.537529,40.889366],[112.459419,40.958153],[112.317749,40.988308],[112.231041,40.962685],[112.092377,40.882908],[111.968666,40.901745],[111.697891,40.886986],[111.596489,40.846828],[111.449265,40.756962],[111.106094,40.730293],[110.73613,40.601238],[110.533432,40.606583],[110.420097,40.572506],[110.267509,40.554832],[110.057022,40.598419],[109.965179,40.691669],[109.81424,40.717201],[109.409492,40.631634],[109.234375,40.656246],[108.867882,40.637028],[108.713081,40.694893],[108.686691,40.741177],[108.641296,40.774662],[108.554932,40.786598],[108.38401,40.880615],[108.299057,40.890617],[108.245132,40.914204],[107.948845,40.934052],[107.796104,40.90427],[107.664474,40.90596],[107.542221,40.873058],[107.425491,40.865494],[107.387535,40.843765],[107.321136,40.85796],[107.219803,40.91246],[107.128334,40.930828],[106.813751,40.852463],[106.716057,40.812035],[106.644142,40.760502],[106.512115,40.731171],[106.301834,40.495445],[106.16507,40.402119],[105.707504,40.374809],[105.528824,40.431587],[105.303192,40.456409],[105.258957,40.485939],[105.126389,40.510506],[105.076233,40.541523],[104.985924,40.650345],[104.704025,40.703785],[104.629082,40.73135],[104.547318,40.781612],[104.477501,40.868603],[104.393158,40.914188],[104.376244,40.947659],[104.323761,40.983253],[104.271156,41.0923],[104.282043,41.172985],[104.26667,41.196651],[104.114525,41.280819],[103.877647,41.315289],[103.747185,41.364807],[103.649887,41.42168],[103.401268,41.50679],[103.332237,41.541153],[103.084526,41.744869],[102.767838,41.856636],[102.690674,41.927399],[102.513741,41.99316],[102.416412,41.993038],[102.277412,41.952209],[102.080894,41.998001],[101.542557,42.026779],[101.502136,41.99688],[101.397758,41.985241],[101.217369,41.887012],[101.088486,41.866913],[100.943001,41.889072],[100.570366,41.84201],[100.095505,41.852135],[99.806503,41.882263],[99.663963,41.881165],[99.397644,41.929455],[99.125084,41.907764],[98.901131,41.936668],[98.811539,41.970284],[98.477928,42.012497],[98.205383,41.998459],[98.073021,42.017292],[97.875465,41.965378],[97.630615,41.958214],[97.147568,41.863934],[97.021515,41.856426],[96.775322,41.941868],[96.544403,41.996155],[96.449486,42.011814],[96.230095,42.010395],[96.175407,42.048992],[96.09697,42.06152],[96.065704,42.109924],[95.797096,42.157608],[95.640266,42.266262],[95.47213,42.349926],[95.396156,42.421928],[95.337395,42.443878],[95.094238,42.467339],[94.729683,42.463295],[94.390198,42.513439],[94.222855,42.519596],[94.168839,42.545822],[93.958397,42.721741],[93.537598,42.940628],[93.420738,42.981564],[93.267387,42.979092],[92.78157,43.139603],[92.557243,43.251377],[92.322777,43.257977],[92.149689,43.376438],[91.984756,43.383057],[91.858284,43.40847],[91.741333,43.387409],[91.712021,43.368301],[91.65139,43.39011],[91.450615,43.353603],[91.11158,43.204285],[90.939957,43.16433],[90.72509,43.042645],[90.484329,43.009644],[90.34816,42.973423],[90.276924,42.929867],[90.15081,42.893951],[89.997025,42.884453],[89.922028,42.907299],[89.839455,42.902779],[89.606949,42.94249],[89.550598,42.916168],[89.335197,42.92263],[89.088905,43.009144],[88.889908,43.019173],[88.770721,43.06443],[88.532837,43.086712],[88.456757,43.218658],[88.360779,43.266186],[88.348587,43.28825],[88.357681,43.308422],[88.314636,43.343632],[88.233322,43.351315],[88.21653,43.37265],[88.098389,43.423065],[88.045914,43.473858],[88.005013,43.49123],[87.950768,43.551899],[87.874748,43.56572],[87.754311,43.620201],[87.585091,43.635803],[87.572472,43.680054],[87.52845,43.684776],[87.478416,43.741673],[87.501083,43.797302],[87.443344,43.885502],[87.182442,43.969723],[87.09507,44.031033],[86.951691,44.08939],[86.842224,44.160183],[86.661476,44.192684],[86.504211,44.197575],[86.438301,44.219528],[86.373894,44.214363],[86.133362,44.276516],[86.008919,44.24815],[85.907135,44.255272],[85.711586,44.299797],[85.620003,44.301231],[85.557419,44.338585],[85.265396,44.334763],[85.172638,44.364445],[85.07711,44.361755],[84.962601,44.391319],[84.810974,44.404579],[84.548676,44.380894],[84.4963,44.403107],[84.383125,44.374573],[84.150635,44.354897],[84.099464,44.366272],[84.035156,44.416061],[83.961433,44.44183],[83.857613,44.46386],[83.646255,44.474422],[83.612366,44.517502],[83.530983,44.55056],[83.423698,44.54607],[83.240799,44.612274],[83.088089,44.617466],[82.95858,44.648926],[82.925621,44.597897],[82.785629,44.561352],[82.763718,44.540241],[82.669914,44.547787],[82.590408,44.520561],[82.356483,44.524933],[82.271141,44.540535],[82.165192,44.607468],[82.069763,44.630463],[81.926056,44.634983],[81.608643,44.610554],[81.554054,44.619534],[81.382774,44.594677],[81.329956,44.536266],[81.131058,44.481514],[81.161537,44.460663],[81.138336,44.472557],[81.056557,44.434555],[80.975967,44.344902],[80.816666,44.221283],[80.692947,44.185955],[80.447937,44.166714],[80.477875,44.029182],[80.530754,44.013531],[80.532715,43.97438],[80.559341,43.967926],[80.562263,43.909023],[80.603218,43.881683],[80.640266,43.881279],[80.647362,43.849228],[80.703911,43.828857],[80.716003,43.800114],[80.757904,43.800396],[80.7603,43.758835],[80.675896,43.737732],[80.635666,43.683159]]},type:"Feature",properties:{destinationid:"659008",id:383,originid:"110000"}}]},a.exports});;
Cube("datav:/com/map3d-earth-thunder/0.0.19/shader/vert.glsl",[],function(a){return a.exports="#ifdef GL_ES\n  precision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec2 vUv;\n\nattribute vec3 plane_position;\nattribute vec3 sphere_position;\n\nuniform float u_proj_type;\nuniform float u_ease_index;\n\nvec3 real_position() {\n  if(u_proj_type == 0.){\n    return mix(plane_position, sphere_position, u_ease_index);\n  } else if(u_proj_type == 1.){\n     return mix(sphere_position, plane_position, u_ease_index);\n  } else {\n    return vec3(0);\n  }\n}\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(real_position(), 1.0);\n}",a.exports});;
Cube("datav:/com/map3d-earth-thunder/0.0.19/shader/frag.glsl",[],function(a){return a.exports="\n#ifdef GL_ES\n  precision highp float;\n#define GLSLIFY 1\n#endif\n\nuniform vec3 uColor;\nuniform float uTimeCounter;\nuniform float uTrailLength;\nuniform float uOpacityFactor;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\n\nfloat calculateTimeContrlOpacity(float timeCounter, vec2 vUv){\n  float uvGap = uTrailLength;\n  float uvTail = timeCounter - uvGap;\n\n  if((vUv.x < timeCounter) && (vUv.x > uvTail)) {\n    float opacity = (1.0 - (timeCounter - vUv.x) / uvGap);\n    opacity *= opacity;\n    opacity /= 1.3;\n\n    return opacity;\n  } else {\n    return 0.0;\n  }\n}\n\nvoid main() {\n  float currentOpacity = calculateTimeContrlOpacity(uTimeCounter, vUv);\n  gl_FragColor = vec4(uColor, currentOpacity * uOpacityFactor);  \n}",a.exports});;
Cube("datav:/com/map3d-earth-thunder/0.0.19",["datav:/npm/eventemitter3/2.0.3"],function(a,b,c){function d(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function e(a,b){if(!a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return b&&("object"===typeof b||"function"===typeof b)?b:a}function f(a,b){if("function"!==typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function, not "+typeof b);a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),b&&(Object.setPrototypeOf?Object.setPrototypeOf(a,b):a.__proto__=b)}var g=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),h=null,j=null,i=c("datav:/npm/eventemitter3/2.0.3"),k=c("datav:/com/map3d-earth-thunder/0.0.19/beijing-road-300"),l=function(a){function b(a,c){d(this,b);var f=e(this,(b.__proto__||Object.getPrototypeOf(b)).call(this));return f.options=Object.assign({visible:!0,speed:9e-3,level:3,minRadius:0.01,maxRadius:0.2,radiusSegments:3,closed:!1,intervalFreq:0.9,lineLength:0.9,height:3,opacityFactor:1,trailColor:"#FFFD49",lightness:1},c||{}),f.tubeTrailGroup=[],f}return f(b,a),g(b,[{key:"addTo",value:function(a){return a?void(h=a.THREE,j=a.Utils,this.map=a,this.scene=a.scene,this.initEvent()):console.log("thunder layer needs map layer")}},{key:"initEvent",value:function(){this.map.on("animationFrame",this.animation.bind(this)),this.map.on("projChanged",this.updatePostions.bind(this))}},{key:"render",value:function(a){var b=this;if(!a)return console.log("trail layer no data");if(Array.isArray(a)&&!a.length)return this.clean(),console.log("trail layer no data");this._data=a&&a.features&&Array.isArray(a.features)&&0<a.features.length?a:k,this.clean();var c=new Worker((window.URL||window.webkitURL).createObjectURL(new Blob(["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nconst a=require('geostats'),b={type:'Jenks',level:5};class c{constructor(c){this.options=Object.assign(b,c||{}),this.classify=new a,this.classify.silent=!0,this.seriesArray=null}setData(a){a&&a.length&&Array.isArray(a)||console.error('classify.setData needs ds argument'),this.ds=a;let b=this.options.type;'Jenks'===b?a.length<=this.options.level&&(this.options.level=a.length-1):a.length<=this.options.level&&(this.options.level=a.length),this.classify.setSerie(a),this.setClassify()}setPattern(a){a&&a.length&&Array.isArray(a)||console.error('classify.setPattern needs pattern argument'),this.pattern=a}getPattern(a){let b=this.getIndex(a),c=this.options.level;return b>=this.pattern.length?this.pattern[this.pattern.length-1]:this.pattern[b]}getIndex(a){let b=0,c=this.seriesArray.length;for(let d=0;d<c;d++){if(a===this.seriesArray[c-1]){b=1===c?c-1:c-2;break}if(this.seriesArray[d]<=a&&a<this.seriesArray[d+1]){b=d;break}}return b}setClassify(){let a=this.options,b=a.type,c=a.level;switch(b){case'EqInterval':this.seriesArray=this.classify.getEqInterval(c);break;case'StdDeviation':this.seriesArray=this.classify.getStdDeviation(c);break;case'Arithmetic':this.seriesArray=this.classify.getArithmeticProgression(c);break;case'Geometric':this.seriesArray=this.classify.getGeometricProgression(c);break;case'Quantile':this.seriesArray=this.classify.getQuantile(c);break;case'Jenks':this.seriesArray=this.classify.getJenks(c);break;case'UniqueValues':this.seriesArray=this.classify.getUniqueValues(c);break;default:this.seriesArray=this.classify.getJenks(c);}}setLevel(a){this.options.level=a,this.ds&&this.setData(this.ds)}setPrecision(a){this.classify.setPrecisiond(a)}getEqInterval(){this.options.type='EqInterval',this.setClassify()}getStdDeviation(){this.options.type='StdDeviation',this.setClassify()}getArithmeticProgression(){this.options.type='Arithmetic',this.setClassify()}getGeometricProgression(){this.options.type='Geometric',this.setClassify()}getQuantile(){this.options.type='Quantile',this.setClassify()}getJenks(){this.options.type='Jenks',this.setClassify()}getUniqueValues(){this.options.type='UniqueValues',this.setClassify()}}module.exports=c;\n},{\"geostats\":2}],2:[function(require,module,exports){\n(function(l){\"object\"===typeof exports?module.exports=l():\"function\"===typeof define&&define.amd?define(l):geostats=l()})(function(){var l=function(f){return\"number\"===typeof f&&parseFloat(f)==parseInt(f,10)&&!isNaN(f)};Array.prototype.indexOf||(Array.prototype.indexOf=function(f,a){if(void 0===this||null===this)throw new TypeError('\"this\" is null or not defined');var b=this.length>>>0;a=+a||0;Infinity===Math.abs(a)&&(a=0);0>a&&(a+=b,0>a&&(a=0));for(;a<b;a++)if(this[a]===f)return a;return-1});return function(f){this.objectID=\n\"\";this.legendSeparator=this.separator=\" - \";this.method=\"\";this.precision=0;this.precisionflag=\"auto\";this.roundlength=2;this.silent=this.debug=this.is_uniqueValues=!1;this.bounds=[];this.ranges=[];this.inner_ranges=null;this.colors=[];this.counter=[];this.stat_cov=this.stat_stddev=this.stat_variance=this.stat_pop=this.stat_min=this.stat_max=this.stat_sum=this.stat_median=this.stat_mean=this.stat_sorted=null;this.log=function(a,b){1!=this.debug&&null==b||console.log(this.objectID+\"(object id) :: \"+\na)};this.setBounds=function(a){this.log(\"Setting bounds (\"+a.length+\") : \"+a.join());this.bounds=[];this.bounds=a};this.setSerie=function(a){this.log(\"Setting serie (\"+a.length+\") : \"+a.join());this.serie=[];this.serie=a;this.resetStatistics();this.setPrecision()};this.setColors=function(a){this.log(\"Setting color ramp (\"+a.length+\") : \"+a.join());this.colors=a};this.doCount=function(){if(!this._nodata()){var a=this.sorted();this.counter=[];for(i=0;i<this.bounds.length-1;i++)this.counter[i]=0;for(j=\n0;j<a.length;j++){var b=this.getClass(a[j]);this.counter[b]++}}};this.setPrecision=function(a){\"undefined\"!==typeof a&&(this.precisionflag=\"manual\",this.precision=a);if(\"auto\"==this.precisionflag)for(a=0;a<this.serie.length;a++){var b=isNaN(this.serie[a]+\"\")||-1==(this.serie[a]+\"\").toString().indexOf(\".\")?0:(this.serie[a]+\"\").split(\".\")[1].length;b>this.precision&&(this.precision=b)}this.log(\"Calling setPrecision(). Mode : \"+this.precisionflag+\" - Decimals : \"+this.precision);this.serie=this.decimalFormat(this.serie)};\nthis.decimalFormat=function(a){for(var b=[],c=0;c<a.length;c++){var d=a[c];!isNaN(parseFloat(d))&&isFinite(d)?b[c]=parseFloat(a[c].toFixed(this.precision)):b[c]=a[c]}return b};this.setRanges=function(){this.ranges=[];for(i=0;i<this.bounds.length-1;i++)this.ranges[i]=this.bounds[i]+this.separator+this.bounds[i+1]};this.min=function(){if(!this._nodata())return this.stat_min=Math.min.apply(null,this.serie)};this.max=function(){return this.stat_max=Math.max.apply(null,this.serie)};this.sum=function(){if(!this._nodata()){if(null==\nthis.stat_sum)for(i=this.stat_sum=0;i<this.pop();i++)this.stat_sum+=parseFloat(this.serie[i]);return this.stat_sum}};this.pop=function(){if(!this._nodata())return null==this.stat_pop&&(this.stat_pop=this.serie.length),this.stat_pop};this.mean=function(){if(!this._nodata())return null==this.stat_mean&&(this.stat_mean=parseFloat(this.sum()/this.pop())),this.stat_mean};this.median=function(){if(!this._nodata()){if(null==this.stat_median){this.stat_median=0;var a=this.sorted();this.stat_median=a.length%\n2?parseFloat(a[Math.ceil(a.length/2)-1]):(parseFloat(a[a.length/2-1])+parseFloat(a[a.length/2]))/2}return this.stat_median}};this.variance=function(){round=\"undefined\"===typeof round?!0:!1;if(!this._nodata()){if(null==this.stat_variance){for(var a=0,b=0;b<this.pop();b++)a+=Math.pow(this.serie[b]-this.mean(),2);this.stat_variance=a/this.pop();1==round&&(this.stat_variance=Math.round(this.stat_variance*Math.pow(10,this.roundlength))/Math.pow(10,this.roundlength))}return this.stat_variance}};this.stddev=\nfunction(a){a=\"undefined\"===typeof a?!0:!1;if(!this._nodata())return null==this.stat_stddev&&(this.stat_stddev=Math.sqrt(this.variance()),1==a&&(this.stat_stddev=Math.round(this.stat_stddev*Math.pow(10,this.roundlength))/Math.pow(10,this.roundlength))),this.stat_stddev};this.cov=function(a){a=\"undefined\"===typeof a?!0:!1;if(!this._nodata())return null==this.stat_cov&&(this.stat_cov=this.stddev()/this.mean(),1==a&&(this.stat_cov=Math.round(this.stat_cov*Math.pow(10,this.roundlength))/Math.pow(10,this.roundlength))),\nthis.stat_cov};this.resetStatistics=function(){this.stat_cov=this.stat_stddev=this.stat_variance=this.stat_pop=this.stat_min=this.stat_max=this.stat_sum=this.stat_median=this.stat_mean=this.stat_sorted=null};this._nodata=function(){return 0==this.serie.length?(this.silent?this.log(\"[silent mode] Error. You should first enter a serie!\",!0):alert(\"Error. You should first enter a serie!\"),1):0};this._hasNegativeValue=function(){for(i=0;i<this.serie.length;i++)if(0>this.serie[i])return!0;return!1};this._hasZeroValue=\nfunction(){for(i=0;i<this.serie.length;i++)if(0===parseFloat(this.serie[i]))return!0;return!1};this.sorted=function(){null==this.stat_sorted&&(this.stat_sorted=0==this.is_uniqueValues?this.serie.sort(function(a,b){return a-b}):this.serie.sort(function(a,b){var c=a.toString().toLowerCase(),d=b.toString().toLowerCase();return c<d?-1:c>d?1:0}));return this.stat_sorted};this.info=function(){if(!this._nodata()){var a;a=\"\"+(\"Population : \"+this.pop()+\" - [Min : \"+this.min()+\" | Max : \"+this.max()+\"]\\n\");\na+=\"Mean : \"+this.mean()+\" - Median : \"+this.median()+\"\\n\";return a+=\"Variance : \"+this.variance()+\" - Standard deviation : \"+this.stddev()+\" - Coefficient of variation : \"+this.cov()+\"\\n\"}};this.setClassManually=function(a){if(!this._nodata())if(a[0]!==this.min()||a[a.length-1]!==this.max())if(this.silent)this.log(\"[silent mode] \"+t(\"Given bounds may not be correct! please check your input.\\nMin value : \"+this.min()+\" / Max value : \"+this.max()),!0);else{a=alert;var b=\"Given bounds may not be correct! please check your input.\\nMin value : \"+\nthis.min()+\" / Max value : \"+this.max();a(b)}else return this.setBounds(a),this.setRanges(),this.method=\"manual classification (\"+(a.length-1)+\" classes)\",this.bounds};this.getClassEqInterval=function(a,b,c){if(!this._nodata()){b=\"undefined\"===typeof b?this.min():b;c=\"undefined\"===typeof c?this.max():c;var d=[],e=b;b=(c-b)/a;for(i=0;i<=a;i++)d[i]=e,e+=b;d[a]=c;this.setBounds(d);this.setRanges();this.method=\"eq. intervals (\"+a+\" classes)\";return this.bounds}};this.getQuantiles=function(a){for(var b=\nthis.sorted(),c=[],d=this.pop()/a,e=1;e<a;e++)c.push(b[Math.round(e*d+.49)-1]);return c};this.getClassQuantile=function(a){if(!this._nodata()){var b=this.sorted(),c=this.getQuantiles(a);c.unshift(b[0]);c[b.length-1]!==b[b.length-1]&&c.push(b[b.length-1]);this.setBounds(c);this.setRanges();this.method=\"quantile (\"+a+\" classes)\";return this.bounds}};this.getClassStdDeviation=function(a,b){if(!this._nodata()){this.max();this.min();var c=[];if(1==a%2){var d=Math.floor(a/2),e=d+1;c[d]=this.mean()-this.stddev()/\n2;c[e]=this.mean()+this.stddev()/2;i=d-1}else e=a/2,c[e]=this.mean(),i=e-1;for(;0<i;i--)d=c[i+1]-this.stddev(),c[i]=d;for(i=e+1;i<a;i++)d=c[i-1]+this.stddev(),c[i]=d;c[0]=\"undefined\"===typeof b?c[1]-this.stddev():this.min();c[a]=\"undefined\"===typeof b?c[a-1]+this.stddev():this.max();this.setBounds(c);this.setRanges();this.method=\"std deviation (\"+a+\" classes)\";return this.bounds}};this.getClassGeometricProgression=function(a){if(!this._nodata())if(this._hasNegativeValue()||this._hasZeroValue())this.silent?\nthis.log(\"[silent mode] geometric progression can't be applied with a serie containing negative or zero values.\",!0):alert(\"geometric progression can't be applied with a serie containing negative or zero values.\");else{var b=[],c=this.min(),d=this.max(),c=Math.log(c)/Math.LN10,d=(Math.log(d)/Math.LN10-c)/a;for(i=0;i<a;i++)b[i]=0==i?c:b[i-1]+d;b=b.map(function(a){return Math.pow(10,a)});b.push(this.max());this.setBounds(b);this.setRanges();this.method=\"geometric progression (\"+a+\" classes)\";return this.bounds}};\nthis.getClassArithmeticProgression=function(a){if(!this._nodata()){var b=0;for(i=1;i<=a;i++)b+=i;var c=[],d=this.min(),b=(this.max()-d)/b;for(i=0;i<=a;i++)c[i]=0==i?d:c[i-1]+i*b;this.setBounds(c);this.setRanges();this.method=\"arithmetic progression (\"+a+\" classes)\";return this.bounds}};this.getClassJenks=function(a){if(!this._nodata()){dataList=this.sorted();for(var b=[],c=0,d=dataList.length+1;c<d;c++){for(var e=[],k=0,h=a+1;k<h;k++)e.push(0);b.push(e)}c=[];d=0;for(e=dataList.length+1;d<e;d++){for(var k=\n[],h=0,f=a+1;h<f;h++)k.push(0);c.push(k)}d=1;for(e=a+1;d<e;d++){b[0][d]=1;c[0][d]=0;for(var g=1,k=dataList.length+1;g<k;g++)c[g][d]=Infinity;g=0}d=2;for(e=dataList.length+1;d<e;d++){for(var f=h=k=0,l=1,r=d+1;l<r;l++){var p=d-l+1,g=parseFloat(dataList[p-1]),h=h+g*g,k=k+g,f=f+1,g=h-k*k/f,q=p-1;if(0!=q)for(var m=2,u=a+1;m<u;m++)c[d][m]>=g+c[q][m-1]&&(b[d][m]=p,c[d][m]=g+c[q][m-1])}b[d][1]=1;c[d][1]=g}g=dataList.length;c=[];for(d=0;d<=a;d++)c.push(0);c[a]=parseFloat(dataList[dataList.length-1]);c[0]=\nparseFloat(dataList[0]);for(d=a;2<=d;)e=parseInt(b[g][d]-2),c[d-1]=dataList[e],g=parseInt(b[g][d]-1),--d;c[0]==c[1]&&(c[0]=0);this.setBounds(c);this.setRanges();this.method=\"Jenks (\"+a+\" classes)\";return this.bounds}};this.getClassUniqueValues=function(){if(!this._nodata()){this.is_uniqueValues=!0;var a=this.sorted(),b=[];for(i=0;i<this.pop();i++)-1===b.indexOf(a[i])&&b.push(a[i]);this.bounds=b;this.method=\"unique values\";return b}};this.getClass=function(a){for(i=0;i<this.bounds.length;i++)if(1==\nthis.is_uniqueValues){if(a==this.bounds[i])return i}else if(parseFloat(a)<=this.bounds[i+1])return i;return\"Unable to get value's class.\"};this.getRanges=function(){return this.ranges};this.getRangeNum=function(a){var b,c;for(c=0;c<this.ranges.length;c++)if(b=this.ranges[c].split(/ - /),a<=parseFloat(b[1]))return c};this.getInnerRanges=function(){if(null!=this.inner_ranges)return this.inner_ranges;var a=[],b=this.sorted(),c=1;for(i=0;i<b.length;i++){if(0==i)var d=b[i];parseFloat(b[i])>parseFloat(this.bounds[c])&&\n(a[c-1]=\"\"+d+this.separator+b[i-1],d=b[i],c++);if(c==this.bounds.length-1)return a[c-1]=\"\"+d+this.separator+b[b.length-1],this.inner_ranges=a}};this.getSortedlist=function(){return this.sorted().join(\", \")};this.getHtmlLegend=function(a,b,c,d,e,f){var h=\"\",n=[];this.doCount();ccolors=null!=a?a:this.colors;lg=null!=b?b:\"Legend\";getcounter=null!=c?!0:!1;fn=null!=d?d:function(a){return a};null==e&&(e=\"default\");if(\"discontinuous\"==e&&(this.getInnerRanges(),-1!==this.counter.indexOf(0))){this.silent?\nthis.log(\"[silent mode] Geostats cannot apply 'discontinuous' mode to the getHtmlLegend() method because some classes are not populated.\\nPlease switch to 'default' or 'distinct' modes. Exit!\",!0):alert(\"Geostats cannot apply 'discontinuous' mode to the getHtmlLegend() method because some classes are not populated.\\nPlease switch to 'default' or 'distinct' modes. Exit!\");return}\"DESC\"!==f&&(f=\"ASC\");if(ccolors.length<this.ranges.length)this.silent?this.log(\"[silent mode] The number of colors should fit the number of ranges. Exit!\",\n!0):alert(\"The number of colors should fit the number of ranges. Exit!\");else{if(0==this.is_uniqueValues)for(i=0;i<this.ranges.length;i++)!0===getcounter&&(h=' <span class=\"geostats-legend-counter\">('+this.counter[i]+\")</span>\"),b=this.ranges[i].split(this.separator),a=parseFloat(b[0]).toFixed(this.precision),b=parseFloat(b[1]).toFixed(this.precision),\"distinct\"==e&&0!=i&&(l(a)?(a=parseInt(a)+1,\"manual\"==this.precisionflag&&0!=this.precision&&(a=parseFloat(a).toFixed(this.precision))):(a=parseFloat(a)+\n1/Math.pow(10,this.precision),a=parseFloat(a).toFixed(this.precision))),\"discontinuous\"==e&&(b=this.inner_ranges[i].split(this.separator),a=parseFloat(b[0]).toFixed(this.precision),b=parseFloat(b[1]).toFixed(this.precision)),a=fn(a)+this.legendSeparator+fn(b),a='<div><div class=\"geostats-legend-block\" style=\"background-color:'+ccolors[i]+'\"></div> '+a+h+\"</div>\",n.push(a);else for(i=0;i<this.bounds.length;i++)!0===getcounter&&(h=' <span class=\"geostats-legend-counter\">('+this.counter[i]+\")</span>\"),\na=fn(this.bounds[i]),a='<div><div class=\"geostats-legend-block\" style=\"background-color:'+ccolors[i]+'\"></div> '+a+h+\"</div>\",n.push(a);\"DESC\"===f&&n.reverse();e='<div class=\"geostats-legend\"><div class=\"geostats-legend-title\">'+lg+\"</div>\";for(i=0;i<n.length;i++)e+=n[i];return e+\"</div>\"}};this.objectID=(new Date).getUTCMilliseconds();this.log(\"Creating new geostats object\");\"undefined\"!==typeof f&&0<f.length?(this.serie=f,this.setPrecision(),this.log(\"Setting serie (\"+f.length+\") : \"+f.join())):\nthis.serie=[];this.getJenks=this.getClassJenks;this.getGeometricProgression=this.getClassGeometricProgression;this.getEqInterval=this.getClassEqInterval;this.getQuantile=this.getClassQuantile;this.getStdDeviation=this.getClassStdDeviation;this.getUniqueValues=this.getClassUniqueValues;this.getArithmeticProgression=this.getClassArithmeticProgression}});\n\n},{}],3:[function(require,module,exports){\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.THREE = global.THREE || {})));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\t( function () {\n\n\t\t\tObject.assign = function ( target ) {\n\n\t\t\t\t'use strict';\n\n\t\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t\t}\n\n\t\t\t\tvar output = Object( target );\n\n\t\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\n\t\t\t};\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return false;\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tvar REVISION = '88';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RGB_S3TC_DXT1_Format = 2001;\n\tvar RGBA_S3TC_DXT1_Format = 2002;\n\tvar RGBA_S3TC_DXT3_Format = 2003;\n\tvar RGBA_S3TC_DXT5_Format = 2004;\n\tvar RGB_PVRTC_4BPPV1_Format = 2100;\n\tvar RGB_PVRTC_2BPPV1_Format = 2101;\n\tvar RGBA_PVRTC_4BPPV1_Format = 2102;\n\tvar RGBA_PVRTC_2BPPV1_Format = 2103;\n\tvar RGB_ETC1_Format = 2151;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _Math = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\t\t\t// Replaced .join with string concatenation (@takahirox)\n\n\t\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\t\tvar rnd = 0, r;\n\n\t\t\treturn function generateUUID() {\n\n\t\t\t\tvar uuid = '';\n\n\t\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n\t\t\t\t\t\tuuid += '-';\n\n\t\t\t\t\t} else if ( i === 14 ) {\n\n\t\t\t\t\t\tuuid += '4';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\t\tuuid += chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn uuid;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * _Math.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * _Math.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min = new Vector2();\n\t\t\tvar max = new Vector2();\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tmin.set( minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function extractRotation( m ) {\n\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar me = m.elements;\n\n\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = q._x, y = q._y, z = q._z, w = q._w;\n\t\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\t\tte[ 4 ] = xy - wz;\n\t\t\tte[ 8 ] = xz + wy;\n\n\t\t\tte[ 1 ] = xy + wz;\n\t\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\t\tte[ 9 ] = yz - wx;\n\n\t\t\tte[ 2 ] = xz - wy;\n\t\t\tte[ 6 ] = yz + wx;\n\t\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function () {\n\n\t\t\tvar x = new Vector3();\n\t\t\tvar y = new Vector3();\n\t\t\tvar z = new Vector3();\n\n\t\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tz.subVectors( eye, target );\n\n\t\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t\tz.z = 1;\n\n\t\t\t\t}\n\n\t\t\t\tz.normalize();\n\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\t\t// up and z are parallel\n\n\t\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t\tz.x += 0.0001;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz.z += 0.0001;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tz.normalize();\n\t\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t\t}\n\n\t\t\t\tx.normalize();\n\t\t\t\ty.crossVectors( z, x );\n\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn attribute;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 12 ] = v.x;\n\t\t\tte[ 13 ] = v.y;\n\t\t\tte[ 14 ] = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\t\tthis.scale( scale );\n\t\t\tthis.setPosition( position );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function () {\n\n\t\t\tvar vector = new Vector3();\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t\t// if determine is negative, we need to invert one scale\n\t\t\t\tvar det = this.determinant();\n\t\t\t\tif ( det < 0 ) sx = - sx;\n\n\t\t\t\tposition.x = te[ 12 ];\n\t\t\t\tposition.y = te[ 13 ];\n\t\t\t\tposition.z = te[ 14 ];\n\n\t\t\t\t// scale the rotation part\n\t\t\t\tmatrix.copy( this );\n\n\t\t\t\tvar invSX = 1 / sx;\n\t\t\t\tvar invSY = 1 / sy;\n\t\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\t\tscale.x = sx;\n\t\t\t\tscale.y = sy;\n\t\t\t\tscale.z = sz;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function () {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar r;\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\t\tif ( r < EPS ) {\n\n\t\t\t\t\tr = 0;\n\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t\t}\n\n\t\t\t\tthis._x = v1.x;\n\t\t\t\tthis._y = v1.y;\n\t\t\t\tthis._z = v1.z;\n\t\t\t\tthis._w = r;\n\n\t\t\t\treturn this.normalize();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tinverse: function () {\n\n\t\t\treturn this.conjugate().normalize();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) return this;\n\t\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function applyEuler( euler ) {\n\n\t\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyAxisAngle: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function project( camera ) {\n\n\t\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tunproject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function unproject( camera ) {\n\n\t\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min = new Vector3();\n\t\t\tvar max = new Vector3();\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( vector ) {\n\n\t\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n\t\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\t\treturn this.sub( v1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\treflect: function () {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function reflect( normal ) {\n\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\tthis.x = c.radius * Math.sin( c.theta );\n\t\t\tthis.y = c.y;\n\t\t\tthis.z = c.radius * Math.cos( c.theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn attribute;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Texture.prototype, EventDispatcher.prototype, {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tfunction getDataURL( image ) {\n\n\t\t\t\tvar canvas;\n\n\t\t\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\t\tcanvas = image;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\t\tcanvas.width = image.width;\n\t\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\n\t\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) return;\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new Vector4();\n\t\t\t\t\tmax = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tObject.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t */\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t\tthis.activeMipMapLevel = 0;\n\n\t}\n\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [renderer] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'renderer' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (renderer factorizations):\n\t *\n\t * .upload( gl, seq, values, renderer )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (renderer factorizations):\n\t *\n\t * .setValue( gl, name, value )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .set( gl, obj, prop )\n\t *\n\t * \t\tsets uniform from object and property with same name than uniform\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Base for inner nodes (including the root) ---\n\n\tfunction UniformContainer() {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( renderer, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValue1f( gl, v ) {\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t}\n\n\tfunction setValue1i( gl, v ) {\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValue2fv( gl, v ) {\n\n\t\tif ( v.x === undefined ) {\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t} else {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t}\n\n\t}\n\n\tfunction setValue3fv( gl, v ) {\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t} else {\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValue4fv( gl, v ) {\n\n\t\tif ( v.x === undefined ) {\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t} else {\n\n\t\t\t gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValue2fm( gl, v ) {\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n\t}\n\n\tfunction setValue3fm( gl, v ) {\n\n\t\tif ( v.elements === undefined ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t} else {\n\n\t\t\tmat3array.set( v.elements );\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t}\n\n\t}\n\n\tfunction setValue4fm( gl, v ) {\n\n\t\tif ( v.elements === undefined ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t} else {\n\n\t\t\tmat4array.set( v.elements );\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, renderer ) {\n\n\t\tvar unit = renderer.allocTextureUnit();\n\t\tgl.uniform1i( this.addr, unit );\n\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, renderer ) {\n\n\t\tvar unit = renderer.allocTextureUnit();\n\t\tgl.uniform1i( this.addr, unit );\n\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValue2iv( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValue3iv( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValue4iv( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\n\tfunction setValue1fv( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\tfunction setValue1iv( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2a( gl, v ) {\n\n\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n\t}\n\n\tfunction setValueV3a( gl, v ) {\n\n\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n\t}\n\n\tfunction setValueV4a( gl, v ) {\n\n\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2a( gl, v ) {\n\n\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n\t}\n\n\tfunction setValueM3a( gl, v ) {\n\n\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n\t}\n\n\tfunction setValueM4a( gl, v ) {\n\n\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1a( gl, v, renderer ) {\n\n\t\tvar n = v.length,\n\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6a( gl, v, renderer ) {\n\n\t\tvar n = v.length,\n\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tUniformContainer.call( this ); // mix-in\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value ) {\n\n\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t// are not allowed in structured uniforms.\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ] );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\tfor ( ; ; ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program, renderer ) {\n\n\t\tUniformContainer.call( this );\n\n\t\tthis.renderer = renderer;\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\tpath = info.name,\n\t\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function () {\n\n\t\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\t\tif ( t < 0 ) t += 1;\n\t\t\t\tif ( t > 1 ) t -= 1;\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\t\tif ( s === 0 ) {\n\n\t\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) return;\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\t// color keywords\n\t\t\t\tvar hex = ColorKeywords[ style ];\n\n\t\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t\t// red\n\t\t\t\t\tthis.setHex( hex );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// unknown color\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function () {\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tthis.r = r * r;\n\t\t\tthis.g = g * g;\n\t\t\tthis.b = b * b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function () {\n\n\t\t\tthis.r = Math.sqrt( this.r );\n\t\t\tthis.g = Math.sqrt( this.g );\n\t\t\tthis.b = Math.sqrt( this.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( optionalTarget ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\thsl.h = hue;\n\t\t\thsl.s = saturation;\n\t\t\thsl.l = lightness;\n\n\t\t\treturn hsl;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tvar hsl = this.getHSL();\n\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tvar UniformsUtils = {\n\n\t\tmerge: function ( uniforms ) {\n\n\t\t\tvar merged = {};\n\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn merged;\n\n\t\t},\n\n\t\tclone: function ( uniforms_src ) {\n\n\t\t\tvar uniforms_dst = {};\n\n\t\t\tfor ( var u in uniforms_src ) {\n\n\t\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\n\t\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n\t\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n\t\t\t\t\t\tparameter_src.isTexture ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uniforms_dst;\n\n\t\t}\n\n\t};\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n\tvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n\tvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat theta = acos( dot( N, V ) );\\n\\tvec2 uv = vec2(\\n\\t\\tsqrt( saturate( roughness ) ),\\n\\t\\tsaturate( theta / ( 0.5 * PI ) ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\\n\\tfloat b = 3.45068 + (4.18814 + y) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\\n\\treturn result;\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n#endif\\n\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\n\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n\tvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n\tvar fog_vertex = \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltcMat;\\tuniform sampler2D ltcMag;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tfloat norm = texture2D( ltcMag, uv ).a;\\n\\t\\tvec4 t = texture2D( ltcMat, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3(   1,   0, t.y ),\\n\\t\\t\\tvec3(   0, t.z,   0 ),\\n\\t\\t\\tvec3( t.w,   0, t.x )\\n\\t\\t);\\n\\t\\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n\tvar lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n\tvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n\tvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n\tvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n\tvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\n\";\n\n\tvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\n\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n\tvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\\n\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n\tvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars: lights_pars,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_template: lights_template,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment: normal_fragment,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: {\n\t\t\t\ttCube: { value: null },\n\t\t\t\ttFlip: { value: - 1 },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t},\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearCoat: { value: 0 },\n\t\t\t\tclearCoatRoughness: { value: 0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction WebGLFlareRenderer( renderer, gl, state, textures, capabilities ) {\n\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar shader, program, attributes, uniforms;\n\n\t\tvar tempTexture, occlusionTexture;\n\n\t\tfunction init() {\n\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 1, - 1, 0, 0,\n\t\t\t\t  1, - 1, 1, 0,\n\t\t\t\t  1, 1, 1, 1,\n\t\t\t\t- 1, 1, 0, 1\n\t\t\t] );\n\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\n\t\t\t// buffers\n\n\t\t\tvertexBuffer = gl.createBuffer();\n\t\t\telementBuffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t\t// textures\n\n\t\t\ttempTexture = gl.createTexture();\n\t\t\tocclusionTexture = gl.createTexture();\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\t\tshader = {\n\n\t\t\t\tvertexShader: [\n\n\t\t\t\t\t'uniform lowp int renderType;',\n\n\t\t\t\t\t'uniform vec3 screenPosition;',\n\t\t\t\t\t'uniform vec2 scale;',\n\t\t\t\t\t'uniform float rotation;',\n\n\t\t\t\t\t'uniform sampler2D occlusionMap;',\n\n\t\t\t\t\t'attribute vec2 position;',\n\t\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t\t'varying vec2 vUV;',\n\t\t\t\t\t'varying float vVisibility;',\n\n\t\t\t\t\t'void main() {',\n\n\t\t\t\t\t'\tvUV = uv;',\n\n\t\t\t\t\t'\tvec2 pos = position;',\n\n\t\t\t\t\t'\tif ( renderType == 2 ) {',\n\n\t\t\t\t\t'\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',\n\t\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',\n\t\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',\n\t\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',\n\t\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',\n\t\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',\n\t\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',\n\t\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',\n\t\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',\n\n\t\t\t\t\t'\t\tvVisibility =        visibility.r / 9.0;',\n\t\t\t\t\t'\t\tvVisibility *= 1.0 - visibility.g / 9.0;',\n\t\t\t\t\t'\t\tvVisibility *=       visibility.b / 9.0;',\n\t\t\t\t\t'\t\tvVisibility *= 1.0 - visibility.a / 9.0;',\n\n\t\t\t\t\t'\t\tpos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;',\n\t\t\t\t\t'\t\tpos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;',\n\n\t\t\t\t\t'\t}',\n\n\t\t\t\t\t'\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',\n\n\t\t\t\t\t'}'\n\n\t\t\t\t].join( '\\n' ),\n\n\t\t\t\tfragmentShader: [\n\n\t\t\t\t\t'uniform lowp int renderType;',\n\n\t\t\t\t\t'uniform sampler2D map;',\n\t\t\t\t\t'uniform float opacity;',\n\t\t\t\t\t'uniform vec3 color;',\n\n\t\t\t\t\t'varying vec2 vUV;',\n\t\t\t\t\t'varying float vVisibility;',\n\n\t\t\t\t\t'void main() {',\n\n\t\t\t\t\t// pink square\n\n\t\t\t\t\t'\tif ( renderType == 0 ) {',\n\n\t\t\t\t\t'\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );',\n\n\t\t\t\t\t// restore\n\n\t\t\t\t\t'\t} else if ( renderType == 1 ) {',\n\n\t\t\t\t\t'\t\tgl_FragColor = texture2D( map, vUV );',\n\n\t\t\t\t\t// flare\n\n\t\t\t\t\t'\t} else {',\n\n\t\t\t\t\t'\t\tvec4 texture = texture2D( map, vUV );',\n\t\t\t\t\t'\t\ttexture.a *= opacity * vVisibility;',\n\t\t\t\t\t'\t\tgl_FragColor = texture;',\n\t\t\t\t\t'\t\tgl_FragColor.rgb *= color;',\n\n\t\t\t\t\t'\t}',\n\n\t\t\t\t\t'}'\n\n\t\t\t\t].join( '\\n' )\n\n\t\t\t};\n\n\t\t\tprogram = createProgram( shader );\n\n\t\t\tattributes = {\n\t\t\t\tvertex: gl.getAttribLocation( program, 'position' ),\n\t\t\t\tuv: gl.getAttribLocation( program, 'uv' )\n\t\t\t};\n\n\t\t\tuniforms = {\n\t\t\t\trenderType: gl.getUniformLocation( program, 'renderType' ),\n\t\t\t\tmap: gl.getUniformLocation( program, 'map' ),\n\t\t\t\tocclusionMap: gl.getUniformLocation( program, 'occlusionMap' ),\n\t\t\t\topacity: gl.getUniformLocation( program, 'opacity' ),\n\t\t\t\tcolor: gl.getUniformLocation( program, 'color' ),\n\t\t\t\tscale: gl.getUniformLocation( program, 'scale' ),\n\t\t\t\trotation: gl.getUniformLocation( program, 'rotation' ),\n\t\t\t\tscreenPosition: gl.getUniformLocation( program, 'screenPosition' )\n\t\t\t};\n\n\t\t}\n\n\t\t/*\n\t\t * Render lens flares\n\t\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t\t *         reads these back and calculates occlusion.\n\t\t */\n\n\t\tthis.render = function ( flares, scene, camera, viewport ) {\n\n\t\t\tif ( flares.length === 0 ) return;\n\n\t\t\tvar tempPosition = new Vector3();\n\n\t\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\t\thalfViewportHeight = viewport.w * 0.5;\n\n\t\t\tvar size = 16 / viewport.w,\n\t\t\t\tscale = new Vector2( size * invAspect, size );\n\n\t\t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n\t\t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\n\t\t\tvar validArea = new Box2();\n\n\t\t\tvalidArea.min.set( viewport.x, viewport.y );\n\t\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tinit();\n\n\t\t\t}\n\n\t\t\tstate.useProgram( program );\n\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.vertex );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t// loop through all lens flares to update their occlusion and positions\n\t\t\t// setup gl and common used attribs/uniforms\n\n\t\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.buffers.depth.setMask( false );\n\n\t\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\t\tsize = 16 / viewport.w;\n\t\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t\t// calc object screen position\n\n\t\t\t\tvar flare = flares[ i ];\n\n\t\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\t\ttempPosition.applyMatrix4( camera.projectionMatrix );\n\n\t\t\t\t// setup arrays for gl programs\n\n\t\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t\t// screen cull\n\n\t\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n\t\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t\t// render pink quad\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t\t// restore graphics\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t\t// update object positions\n\n\t\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// render flares\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n\t\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\n\t\t\t\t\t\t\ttextures.setTexture2D( sprite.texture, 1 );\n\n\t\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore gl\n\n\t\t\tstate.enable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\t\tstate.buffers.depth.setMask( true );\n\n\t\t\tstate.reset();\n\n\t\t};\n\n\t\tfunction createProgram( shader ) {\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\t\tvar prefix = 'precision ' + capabilities.precision + ' float;\\n';\n\n\t\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\t\tgl.compileShader( fragmentShader );\n\t\t\tgl.compileShader( vertexShader );\n\n\t\t\tgl.attachShader( program, fragmentShader );\n\t\t\tgl.attachShader( program, vertexShader );\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction WebGLSpriteRenderer( renderer, gl, state, textures, capabilities ) {\n\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar program, attributes, uniforms;\n\n\t\tvar texture;\n\n\t\t// decompose matrixWorld\n\n\t\tvar spritePosition = new Vector3();\n\t\tvar spriteRotation = new Quaternion();\n\t\tvar spriteScale = new Vector3();\n\n\t\tfunction init() {\n\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0,\n\t\t\t\t  0.5, - 0.5, 1, 0,\n\t\t\t\t  0.5, 0.5, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 1\n\t\t\t] );\n\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\n\t\t\tvertexBuffer = gl.createBuffer();\n\t\t\telementBuffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t\tprogram = createProgram();\n\n\t\t\tattributes = {\n\t\t\t\tposition: gl.getAttribLocation( program, 'position' ),\n\t\t\t\tuv: gl.getAttribLocation( program, 'uv' )\n\t\t\t};\n\n\t\t\tuniforms = {\n\t\t\t\tuvOffset: gl.getUniformLocation( program, 'uvOffset' ),\n\t\t\t\tuvScale: gl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\t\trotation: gl.getUniformLocation( program, 'rotation' ),\n\t\t\t\tscale: gl.getUniformLocation( program, 'scale' ),\n\n\t\t\t\tcolor: gl.getUniformLocation( program, 'color' ),\n\t\t\t\tmap: gl.getUniformLocation( program, 'map' ),\n\t\t\t\topacity: gl.getUniformLocation( program, 'opacity' ),\n\n\t\t\t\tmodelViewMatrix: gl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\t\tprojectionMatrix: gl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\t\tfogType: gl.getUniformLocation( program, 'fogType' ),\n\t\t\t\tfogDensity: gl.getUniformLocation( program, 'fogDensity' ),\n\t\t\t\tfogNear: gl.getUniformLocation( program, 'fogNear' ),\n\t\t\t\tfogFar: gl.getUniformLocation( program, 'fogFar' ),\n\t\t\t\tfogColor: gl.getUniformLocation( program, 'fogColor' ),\n\t\t\t\tfogDepth: gl.getUniformLocation( program, 'fogDepth' ),\n\n\t\t\t\talphaTest: gl.getUniformLocation( program, 'alphaTest' )\n\t\t\t};\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = 8;\n\t\t\tcanvas.height = 8;\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.fillStyle = 'white';\n\t\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\t\ttexture = new CanvasTexture( canvas );\n\n\t\t}\n\n\t\tthis.render = function ( sprites, scene, camera ) {\n\n\t\t\tif ( sprites.length === 0 ) return;\n\n\t\t\t// setup gl\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tinit();\n\n\t\t\t}\n\n\t\t\tstate.useProgram( program );\n\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.BLEND );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\t\tvar oldFogType = 0;\n\t\t\tvar sceneFogType = 0;\n\t\t\tvar fog = scene.fog;\n\n\t\t\tif ( fog ) {\n\n\t\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\t\tif ( fog.isFog ) {\n\n\t\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\t\toldFogType = 1;\n\t\t\t\t\tsceneFogType = 1;\n\n\t\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\t\toldFogType = 2;\n\t\t\t\t\tsceneFogType = 2;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\t\toldFogType = 0;\n\t\t\t\tsceneFogType = 0;\n\n\t\t\t}\n\n\n\t\t\t// update positions and sort\n\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\t\tvar sprite = sprites[ i ];\n\n\t\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t\t}\n\n\t\t\tsprites.sort( painterSortStable );\n\n\t\t\t// render all sprites\n\n\t\t\tvar scale = [];\n\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\t\tvar sprite = sprites[ i ];\n\t\t\t\tvar material = sprite.material;\n\n\t\t\t\tif ( material.visible === false ) continue;\n\n\t\t\t\tsprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\t\tvar fogType = 0;\n\n\t\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\t\tfogType = sceneFogType;\n\n\t\t\t\t}\n\n\t\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\t\toldFogType = fogType;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.map !== null ) {\n\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t\t}\n\n\t\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\t\t\t\tstate.buffers.depth.setTest( material.depthTest );\n\t\t\t\tstate.buffers.depth.setMask( material.depthWrite );\n\t\t\t\tstate.buffers.color.setMask( material.colorWrite );\n\n\t\t\t\ttextures.setTexture2D( material.map || texture, 0 );\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\tsprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t\t}\n\n\t\t\t// restore gl\n\n\t\t\tstate.enable( gl.CULL_FACE );\n\n\t\t\tstate.reset();\n\n\t\t};\n\n\t\tfunction createProgram() {\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t\t'precision ' + capabilities.precision + ' float;',\n\n\t\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform float rotation;',\n\t\t\t\t'uniform vec2 scale;',\n\t\t\t\t'uniform vec2 uvOffset;',\n\t\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t\t'attribute vec2 position;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'varying vec2 vUV;',\n\t\t\t\t'varying float fogDepth;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t'\tvec2 alignedPosition = position * scale;',\n\n\t\t\t\t'\tvec2 rotatedPosition;',\n\t\t\t\t'\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t'\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t'\tvec4 mvPosition;',\n\n\t\t\t\t'\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t'\tmvPosition.xy += rotatedPosition;',\n\n\t\t\t\t'\tgl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t\t'\tfogDepth = - mvPosition.z;',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ) );\n\n\t\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t\t'precision ' + capabilities.precision + ' float;',\n\n\t\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t\t'uniform vec3 color;',\n\t\t\t\t'uniform sampler2D map;',\n\t\t\t\t'uniform float opacity;',\n\n\t\t\t\t'uniform int fogType;',\n\t\t\t\t'uniform vec3 fogColor;',\n\t\t\t\t'uniform float fogDensity;',\n\t\t\t\t'uniform float fogNear;',\n\t\t\t\t'uniform float fogFar;',\n\t\t\t\t'uniform float alphaTest;',\n\n\t\t\t\t'varying vec2 vUV;',\n\t\t\t\t'varying float fogDepth;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t'\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t'\tif ( gl_FragColor.a < alphaTest ) discard;',\n\n\t\t\t\t'\tif ( fogType > 0 ) {',\n\n\t\t\t\t'\t\tfloat fogFactor = 0.0;',\n\n\t\t\t\t'\t\tif ( fogType == 1 ) {',\n\n\t\t\t\t'\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n\n\t\t\t\t'\t\t} else {',\n\n\t\t\t\t'\t\t\tconst float LOG2 = 1.442695;',\n\t\t\t\t'\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );',\n\t\t\t\t'\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t'\t\t}',\n\n\t\t\t\t'\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );',\n\n\t\t\t\t'\t}',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ) );\n\n\t\t\tgl.compileShader( vertexShader );\n\t\t\tgl.compileShader( fragmentShader );\n\n\t\t\tgl.attachShader( program, vertexShader );\n\t\t\tgl.attachShader( program, fragmentShader );\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction painterSortStable( a, b ) {\n\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else {\n\n\t\t\t\treturn b.id - a.id;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\t\tthis.lights = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\t\tthis.visible = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tObject.assign( Material.prototype, EventDispatcher.prototype, {\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) return;\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\t\tif ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\t\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\n\t\t\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\n\n\t\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\t\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\t\tif ( this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\t\tif ( this.morphTargets === true ) data.morphTargets = true;\n\t\t\tif ( this.skinning === true ) data.skinning = true;\n\n\t\t\tif ( this.visible === false ) data.visible = false;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.lights = source.lights;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.overdraw = source.overdraw;\n\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function () {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tvar scope, i, l;\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\tfunction traverse( node ) {\n\n\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn function expandByObject( object ) {\n\n\t\t\t\tscope = this;\n\n\t\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\t\tobject.traverse( traverse );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: ( function () {\n\n\t\t\tvar closestPoint = new Vector3();\n\n\t\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetBoundingSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function getBoundingSphere( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Sphere();\n\n\t\t\t\tthis.getCenter( result.center );\n\n\t\t\t\tresult.radius = this.getSize( v1 ).length() * 0.5;\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar points = [\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3()\n\t\t\t];\n\n\t\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t\t// transform of empty box is an empty box.\n\t\t\t\tif ( this.isEmpty() ) return this;\n\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\t\tthis.setFromPoints( points );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function () {\n\n\t\t\tvar box = new Box3();\n\n\t\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\t\tvar center = this.center;\n\n\t\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n\t\t\t\t}\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tresult.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\tresult.sub( this.center ).normalize();\n\t\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\t\tvar box = optionalTarget || new Box3();\n\n\t\t\tbox.set( this.center, this.center );\n\t\t\tbox.expandByScalar( this.radius );\n\n\t\t\treturn box;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn result.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectLine( line, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tvar direction = line.delta( v1 );\n\n\t\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t\t// line is coplanar, return origin\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar m1 = new Matrix3();\n\n\t\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\n\t\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsObject( object ) {\n\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSprite: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function () {\n\n\t\t\tvar p1 = new Vector3(),\n\t\t\t\tp2 = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\tvar planes = this.planes;\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum(),\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),\n\n\t\t\t_lookTarget = new Vector3(),\n\t\t\t_lightPositionWorld = new Vector3(),\n\n\t\t\t_MorphingFlag = 1,\n\t\t\t_SkinningFlag = 2,\n\n\t\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t\t_materialCache = {};\n\n\t\tvar cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tvar cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t\tvar cube2DViewPorts = [\n\t\t\tnew Vector4(), new Vector4(), new Vector4(),\n\t\t\tnew Vector4(), new Vector4(), new Vector4()\n\t\t];\n\n\t\t// init\n\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\t\tvar depthMaterial = new MeshDepthMaterial( {\n\n\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning\n\n\t\t\t} );\n\n\t\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\t\t//\n\n\t\t\tvar distanceMaterial = new MeshDistanceMaterial( {\n\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning\n\n\t\t\t} );\n\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t\t}\n\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.renderReverseSided = true;\n\t\tthis.renderSingleSided = true;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\t\tif ( lights.length === 0 ) return;\n\n\t\t\t// TODO Clean up (needed in case of contextlost)\n\t\t\tvar _gl = _renderer.context;\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.disable( _gl.BLEND );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tvar faceCount;\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\t\t\t\tvar isPointLight = light && light.isPointLight;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t\t// following orientation:\n\t\t\t\t\t//\n\t\t\t\t\t//  xzXZ\n\t\t\t\t\t//   y Y\n\t\t\t\t\t//\n\t\t\t\t\t// X - Positive x direction\n\t\t\t\t\t// x - Negative x direction\n\t\t\t\t\t// Y - Positive y direction\n\t\t\t\t\t// y - Negative y direction\n\t\t\t\t\t// Z - Positive z direction\n\t\t\t\t\t// z - Negative z direction\n\n\t\t\t\t\t// positive X\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative X\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Z\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative Z\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Y\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t\t// negative Y\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.isSpotLightShadow ) {\n\n\t\t\t\t\tshadow.update( light );\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowMap = shadow.map;\n\t\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\tfaceCount = 6;\n\n\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t\t// equal to inverse of the light's position\n\n\t\t\t\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaceCount = 1;\n\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\t// compute shadow matrix\n\n\t\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t\t);\n\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t\t// run a single pass if not\n\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t\trenderObject( scene, camera, shadowCamera, isPointLight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t};\n\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar materialVariants = _depthMaterials;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( ! customMaterial ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\t\tif ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.isSkinnedMesh && material.skinning === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n\t\t\t\tvar variantIndex = 0;\n\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tvar side = material.side;\n\n\t\t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\n\t\t\t\tside = FrontSide;\n\n\t\t\t}\n\n\t\t\tif ( scope.renderReverseSided ) {\n\n\t\t\t\tif ( side === FrontSide ) side = BackSide;\n\t\t\t\telse if ( side === BackSide ) side = FrontSide;\n\n\t\t\t}\n\n\t\t\tresult.side = side;\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( isPointLight && result.isMeshDistanceMaterial ) {\n\n\t\t\t\tresult.referencePosition.copy( lightPositionWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl ) {\n\n\t\tvar buffers = {};\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = gl.FLOAT;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = gl.FLOAT;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = gl.SHORT;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = gl.INT;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = gl.BYTE;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( attribute.dynamic === false ) {\n\n\t\t\t\tgl.bufferData( bufferType, array, gl.STATIC_DRAW );\n\n\t\t\t} else if ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else if ( updateRange.count === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\treturn buffers[ attribute.uuid ];\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\tvar data = buffers[ attribute.uuid ];\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tdelete buffers[ attribute.uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\tvar data = buffers[ attribute.uuid ];\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers[ attribute.uuid ] = createBuffer( attribute, bufferType );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = _Math.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function () {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\tvar q = new Quaternion();\n\n\t\t\treturn function reorder( newOrder ) {\n\n\t\t\t\tq.setFromEuler( this );\n\n\t\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tvar object3DId = 0;\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation.onChange( onRotationChange );\n\t\tquaternion.onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject.assign( Object3D.prototype, EventDispatcher.prototype, {\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function () {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar q1 = new Quaternion();\n\n\t\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateOnWorldAxis: function () {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\tvar q1 = new Quaternion();\n\n\t\t\treturn function rotateOnWorldAxis( axis, angle ) {\n\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\t\tthis.quaternion.premultiply( q1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateOnAxis: function () {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function translateX( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function translateY( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function translateZ( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function () {\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function worldToLocal( vector ) {\n\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\t// This method does not support objects with rotated and/or translated parent(s)\n\n\t\t\tvar m1 = new Matrix4();\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function lookAt( x, y, z ) {\n\n\t\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t\tvector.copy( x );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( x, y, z );\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.isCamera ) {\n\n\t\t\t\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\t\t}\n\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\t\tthis.children.push( object );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) return this;\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar scale = new Vector3();\n\n\t\t\treturn function getWorldQuaternion( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Quaternion();\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldRotation: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldRotation( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Euler();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldScale: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldScale( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldDirection: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) return;\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) object.name = this.name;\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\t\tif ( this.visible === false ) object.visible = false;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.geometry !== undefined ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\t\tif ( images.length > 0 ) output.images = images;\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) recursive = true;\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar geometryId = 0; // Geometry uses even numbers as Id\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: geometryId += 2 } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( Geometry.prototype, EventDispatcher.prototype, {\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj = new Object3D();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\t\tvar tempNormals = [];\n\t\t\tvar tempUVs = [];\n\t\t\tvar tempUVs2 = [];\n\n\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tvar offset = this.boundingBox.getCenter().negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn offset;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar d = 0;\n\t\t\tvar vertices = this.vertices;\n\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tif ( i > 0 ) {\n\n\t\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\t\tif ( uv === undefined ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tuvs1.push( uvCopy );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.uuid = _Math.generateUUID();\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.onUploadCallback = function () {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\t\tthis.array = array;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyIndicesArray: function ( indices ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tvar index = indices[ i ];\n\n\t\t\t\tarray[ offset ++ ] = index.a;\n\t\t\t\tarray[ offset ++ ] = index.b;\n\t\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.indices = [];\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) return - Infinity;\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t}\n\n\tObject.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj = new Object3D();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tvar offset = this.boundingBox.getCenter().negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn offset;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\t\tvar TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;\n\t\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tvar box = new Box3();\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function computeBoundingSphere() {\n\n\t\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t\t}\n\n\t\t\t\tvar position = this.attributes.position;\n\n\t\t\t\tif ( position ) {\n\n\t\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t\tbox.setFromBufferAttribute( position );\n\t\t\t\t\tbox.getCenter( center );\n\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t\tvector.x = position.getX( i );\n\t\t\t\t\t\tvector.y = position.getY( i );\n\t\t\t\t\t\tvector.z = position.getZ( i );\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function normalizeNormals() {\n\n\t\t\t\tvar normals = this.attributes.normal;\n\n\t\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t\tvector.x = normals.getX( i );\n\t\t\t\t\tvector.y = normals.getY( i );\n\t\t\t\t\tvector.z = normals.getZ( i );\n\n\t\t\t\t\tvector.normalize();\n\n\t\t\t\t\tnormals.setXYZ( i, vector.x, vector.y, vector.z );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: array\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: attribute.normalized\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tBoxGeometry.prototype = Object.create( Geometry.prototype );\n\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t// BoxBufferGeometry\n\n\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'BoxBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tvar scope = this;\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\t\tdepth = depth || 1;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar numberOfVertices = 0;\n\t\tvar groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tvar segmentWidth = width / gridX;\n\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\tvar widthHalf = width / 2;\n\t\t\tvar heightHalf = height / 2;\n\t\t\tvar depthHalf = depth / 2;\n\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\tvar vertexCounter = 0;\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar ix, iy;\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( source.uniforms );\n\n\t\tthis.defines = source.defines;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = this.uniforms;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function recast( t ) {\n\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\tresult.subVectors( point, this.origin );\n\t\t\tvar directionDistance = result.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn result.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t\t// point behind the ray\n\n\t\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t\t}\n\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\t\treturn v1.distanceToSquared( point );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdistanceSqToSegment: function () {\n\n\t\t\tvar segCenter = new Vector3();\n\t\t\tvar segDir = new Vector3();\n\t\t\tvar diff = new Vector3();\n\n\t\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t\t// defined by v0 and v1\n\t\t\t\t// It can also set two optional targets :\n\t\t\t\t// - The closest point on the ray\n\t\t\t\t// - The closest point on the segment\n\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\t\tvar c = diff.lengthSq();\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\t\tif ( det > 0 ) {\n\n\t\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\t\textDet = segExtent * det;\n\n\t\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t\t}\n\n\t\t\t\treturn sqrDist;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\t\tvar tca = v1.dot( this.direction );\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\t\tvar t0 = tca - thc;\n\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\t\tvar t1 = tca + thc;\n\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t\t// test to see if t0 is behind the ray:\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, optionalTarget );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, optionalTarget ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) return null;\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t\t},\n\n\t\tintersectsBox: ( function () {\n\n\t\t\tvar v = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectTriangle: function () {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\tvar diff = new Vector3();\n\t\t\tvar edge1 = new Vector3();\n\t\t\tvar edge2 = new Vector3();\n\t\t\tvar normal = new Vector3();\n\n\t\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t\tedge1.subVectors( b, a );\n\t\t\t\tedge2.subVectors( c, a );\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\t\tvar sign;\n\n\t\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\t\tsign = 1;\n\n\t\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\t\tsign = - 1;\n\t\t\t\t\tDdN = - DdN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tdiff.subVectors( this.origin, a );\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t\t// b1 < 0, no intersection\n\t\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t\t// b2 < 0, no intersection\n\t\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// b1+b2 > 1, no intersection\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Line intersects triangle, check if ray does.\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t\t// t < 0, no intersection\n\t\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Ray intersects triangle.\n\t\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function () {\n\n\t\t\tvar startP = new Vector3();\n\t\t\tvar startEnd = new Vector3();\n\n\t\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\t\tstartP.subVectors( point, this.start );\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\t\tif ( clampToLine ) {\n\n\t\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t\t}\n\n\t\t\t\treturn t;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tnormal: function () {\n\n\t\t\tvar v0 = new Vector3();\n\n\t\t\treturn function normal( a, b, c, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tresult.subVectors( c, b );\n\t\t\t\tv0.subVectors( a, b );\n\t\t\t\tresult.cross( v0 );\n\n\t\t\t\tvar resultLengthSq = result.lengthSq();\n\t\t\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn result.set( 0, 0, 0 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tbarycoordFromPoint: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n\t\t\t\tv0.subVectors( c, a );\n\t\t\t\tv1.subVectors( b, a );\n\t\t\t\tv2.subVectors( point, a );\n\n\t\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\t\tvar dot12 = v1.dot( v2 );\n\n\t\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\t// collinear or singular triangle\n\t\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t\t\t}\n\n\t\t\t\tvar invDenom = 1 / denom;\n\t\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t\t// barycentric coordinates must always sum to 1\n\t\t\t\treturn result.set( 1 - u - v, v, u );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function containsPoint( point, a, b, c ) {\n\n\t\t\t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\t\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t\t\t};\n\n\t\t}()\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarea: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function area() {\n\n\t\t\t\tv0.subVectors( this.c, this.b );\n\t\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmidpoint: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tnormal: function ( optionalTarget ) {\n\n\t\t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t\t},\n\n\t\tplane: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Plane();\n\n\t\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tclosestPointToPoint: function () {\n\n\t\t\tvar plane = new Plane();\n\t\t\tvar edgeList = [ new Line3(), new Line3(), new Line3() ];\n\t\t\tvar projectedPoint = new Vector3();\n\t\t\tvar closestPoint = new Vector3();\n\n\t\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\tvar minDistance = Infinity;\n\n\t\t\t\t// project the point onto the plane of the triangle\n\n\t\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t\t// check if the projection lies within the triangle\n\n\t\t\t\tif ( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t\t// if so, this is the closest point\n\n\t\t\t\t\tresult.copy( projectedPoint );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n\t\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\t\tfor ( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\t\tif ( distance < minDistance ) {\n\n\t\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\t\tresult.copy( closestPoint );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.drawMode = TrianglesDrawMode;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tsetDrawMode: function ( value ) {\n\n\t\t\tthis.drawMode = value;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.drawMode = source.drawMode;\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphTargets[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\tvar vA = new Vector3();\n\t\t\tvar vB = new Vector3();\n\t\t\tvar vC = new Vector3();\n\n\t\t\tvar tempA = new Vector3();\n\t\t\tvar tempB = new Vector3();\n\t\t\tvar tempC = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tvar barycoord = new Vector3();\n\n\t\t\tvar intersectionPoint = new Vector3();\n\t\t\tvar intersectionPointWorld = new Vector3();\n\n\t\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\t\treturn uv1.clone();\n\n\t\t\t}\n\n\t\t\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\t\tvar intersect;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t\t\t}\n\n\t\t\t\tif ( intersect === null ) return null;\n\n\t\t\t\tintersectionPointWorld.copy( point );\n\t\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\t\treturn {\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\t\tobject: object\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\n\n\t\t\t\tvA.fromBufferAttribute( position, a );\n\t\t\t\tvB.fromBufferAttribute( position, b );\n\t\t\t\tvC.fromBufferAttribute( position, c );\n\n\t\t\t\tvar intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uv ) {\n\n\t\t\t\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\t\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\t\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n\t\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t\t}\n\n\t\t\t\treturn intersection;\n\n\t\t\t}\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar material = this.material;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\tif ( material === undefined ) return;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\t// Check boundingBox before continuing\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t\t}\n\n\t\t\t\tvar intersection;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar a, b, c;\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\t\tvar i, l;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\t\tfor ( i = 0, l = index.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\t\tfor ( i = 0, l = position.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar uvs;\n\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, geometries, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeCamera, planeMesh;\n\t\tvar boxMesh;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && background.isCubeTexture ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tuniforms: ShaderLib.cube.uniforms,\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: true,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.removeAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.removeAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tgeometries.update( boxMesh.geometry );\n\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.tCube.value = background;\n\n\t\t\t\trenderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeCamera === undefined ) {\n\n\t\t\t\t\tplaneCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t\t\t\t);\n\n\t\t\t\t\tgeometries.update( planeMesh.geometry );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.map = background;\n\n\t\t\t\t// TODO Push this to renderList\n\n\t\t\t\trenderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program && b.program && a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t\trenderItemsIndex ++;\n\n\t\t}\n\n\t\tfunction sort() {\n\n\t\t\tif ( opaque.length > 1 ) opaque.sort( painterSortStable );\n\t\t\tif ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = {};\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar hash = scene.id + ',' + camera.id;\n\t\t\tvar list = lists[ hash ];\n\n\t\t\tif ( list === undefined ) {\n\n\t\t\t\t// console.log( 'THREE.WebGLRenderLists:', hash );\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists[ hash ] = list;\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = {};\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\tvar length = objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\t// Remove current morphAttributes\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\t\tif ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\tif ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\t// Add morphAttributes\n\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence ) {\n\n\t\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tif ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\t\t\t\t\t\tif ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t}\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\t\telse if ( mode === gl.POINTS ) infoRender.points += count;\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\textension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\t\telse if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, infoRender ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\t\telse if ( mode === gl.POINTS ) infoRender.points += count;\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\tif ( position.isInterleavedBufferAttribute ) {\n\n\t\t\t\tcount = position.data.count;\n\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\textension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );\n\n\t\t\t}\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\t\telse if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, infoMemory ) {\n\n\t\tvar geometries = {};\n\t\tvar wireframeAttributes = {};\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tdelete geometries[ geometry.id ];\n\n\t\t\t// TODO Remove duplicate code\n\n\t\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\tdelete wireframeAttributes[ geometry.id ];\n\n\t\t\t}\n\n\t\t\tattribute = wireframeAttributes[ buffergeometry.id ];\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\tdelete wireframeAttributes[ buffergeometry.id ];\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfoMemory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry ) return buffergeometry;\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\t\tinfoMemory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\t\tif ( attribute ) return attribute;\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\t// console.time( 'wireframe' );\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryAttributes.position.array;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// console.timeEnd( 'wireframe' );\n\n\t\t\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\n\t\t\tattributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\twireframeAttributes[ geometry.id ] = attribute;\n\n\t\t\treturn attribute;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar state = {\n\n\t\t\thash: '',\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\n\t\t};\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\t// (a) intensity controls irradiance of entire light\n\t\t\t\t\tuniforms.color\n\t\t\t\t\t\t.copy( color )\n\t\t\t\t\t\t.multiplyScalar( intensity / ( light.width * light.height ) );\n\n\t\t\t\t\t// (b) intensity controls the radiance per light area\n\t\t\t\t\t// uniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t// TODO (sam-g-steel) why aren't we using join\n\t\t\tstate.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( geometries, infoRender ) {\n\n\t\tvar updateList = {};\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = infoRender.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction clear() {\n\n\t\t\tupdateList = {};\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tclear: clear\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t}\n\n\tfunction parseIncludes( string ) {\n\n\t\tvar pattern = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n\t\tfunction replace( match, include ) {\n\n\t\t\tvar replace = ShaderChunk[ include ];\n\n\t\t\tif ( replace === undefined ) {\n\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t}\n\n\t\t\treturn parseIncludes( replace );\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction unrollLoops( string ) {\n\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\tvar unroll = '';\n\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t}\n\n\t\t\treturn unroll;\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction WebGLProgram( renderer, extensions, code, material, shader, parameters ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = shader.vertexShader;\n\t\tvar fragmentShader = shader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customExtensions = generateExtensions( material.extensions, parameters, extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\t\t\t'#define UNION_CLIPPING_PLANES ' + ( parameters.numClippingPlanes - parameters.numClipIntersection ),\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\tparameters.envMap && extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = parseIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\n\t\tfragmentShader = parseIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n\t\tif ( ! material.isShaderMaterial ) {\n\n\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program, renderer );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'phong',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\"\n\t\t];\n\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\t\tencoding = GammaEncoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\t\t\tvar precision = capabilities.precision;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tshaderID: shaderID,\n\n\t\t\t\tprecision: precision,\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexColors: material.vertexColors,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\tarray.push( material.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( material.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\t\tarray.push( renderer.gammaOutput );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( material, shader, parameters, code ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar programInfo = programs[ p ];\n\n\t\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\t\tprogram = programInfo;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, extensions, code, material, shader, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, infoMemory ) {\n\n\t\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof window.WebGL2RenderingContext );\n\n\t\t//\n\n\t\tfunction clampToMaxSize( image, maxSize ) {\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t\t// premultiplied alpha.\n\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction makePowerOfTwo( image ) {\n\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = _Math.floorPowerOfTwo( image.width );\n\t\t\t\tcanvas.height = _Math.floorPowerOfTwo( image.height );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {\n\n\t\t\treturn texture.generateMipmaps && isPowerOfTwo &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n\t\t\t\treturn _gl.NEAREST;\n\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tinfoMemory.textures --;\n\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfoMemory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t\t} else {\n\n\t\t\t\t// 2D texture\n\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\t// remove all webgl properties\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) return;\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image.length === 6 ) {\n\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t\tinfoMemory.textures ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\t\tvar cubeImage = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfoMemory.textures ++;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\t\timage = makePowerOfTwo( image );\n\n\t\t\t}\n\n\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tif ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfoMemory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\t_gl.generateMipmap( target );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = {};\n\n\t\tfunction get( object ) {\n\n\t\t\tvar uuid = object.uuid;\n\t\t\tvar map = properties[ uuid ];\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties[ uuid ] = map;\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tdelete properties[ object.uuid ];\n\n\t\t}\n\n\t\tfunction clear() {\n\n\t\t\tproperties = {};\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tclear: clear\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, utils ) {\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar capabilities = {};\n\n\t\tvar compressedTextureFormats = null;\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\t\tvar version = parseFloat( /^WebGL\\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );\n\t\tvar lineWidthAvailable = parseFloat( version ) >= 1.0;\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( gl.DEPTH_TEST );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( gl.CULL_FACE );\n\n\t\tenable( gl.BLEND );\n\t\tsetBlending( NormalBlending );\n\n\t\t//\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tcapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tcapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getCompressedTextureFormats() {\n\n\t\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\t\tcompressedTextureFormats = [];\n\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn compressedTextureFormats;\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending !== NoBlending ) {\n\n\t\t\t\tenable( gl.BLEND );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.BLEND );\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\n\t\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\n\t\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\n\t\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendEquation = null;\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t} else {\n\n\t\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );\n\n\t\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t\t}\n\n\t\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\t\tgl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );\n\n\t\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t}\n\n\t\tfunction setMaterial( material ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( gl.CULL_FACE )\n\t\t\t\t: enable( gl.CULL_FACE );\n\n\t\t\tsetFlipSided( material.side === BackSide );\n\n\t\t\tmaterial.transparent === true\n\t\t\t\t? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t\t\t\t: setBlending( NoBlending );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( gl.CULL_FACE );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.CULL_FACE );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcapabilities = {};\n\n\t\t\tcompressedTextureFormats = null;\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\t\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\treturn {\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan(\n\t\t\t\t\t_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebVRManager( renderer ) {\n\n\t\tvar scope = this;\n\n\t\tvar device = null;\n\t\tvar frameData = null;\n\n\t\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\n\n\t\t\tframeData = new window.VRFrameData();\n\n\t\t}\n\n\t\tvar matrixWorldInverse = new Matrix4();\n\n\t\tvar standingMatrix = new Matrix4();\n\t\tvar standingMatrixInverse = new Matrix4();\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\n\t\tcameraL.layers.enable( 1 );\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\n\t\tcameraR.layers.enable( 2 );\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tvar currentSize, currentPixelRatio;\n\n\t\tfunction onVRDisplayPresentChange() {\n\n\t\t\tif ( device !== null && device.isPresenting ) {\n\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\t\tvar renderWidth = eyeParameters.renderWidth;\n\t\t\t\tvar renderHeight = eyeParameters.renderHeight;\n\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\t\tcurrentSize = renderer.getSize();\n\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\n\n\t\t\t} else if ( scope.enabled ) {\n\n\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( typeof window !== 'undefined' ) {\n\n\t\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.enabled = false;\n\t\tthis.standing = false;\n\n\t\tthis.getDevice = function () {\n\n\t\t\treturn device;\n\n\t\t};\n\n\t\tthis.setDevice = function ( value ) {\n\n\t\t\tif ( value !== undefined ) device = value;\n\n\t\t};\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tif ( device === null ) return camera;\n\n\t\t\tdevice.depthNear = camera.near;\n\t\t\tdevice.depthFar = camera.far;\n\n\t\t\tdevice.getFrameData( frameData );\n\n\t\t\t//\n\n\t\t\tvar pose = frameData.pose;\n\n\t\t\tif ( pose.position !== null ) {\n\n\t\t\t\tcamera.position.fromArray( pose.position );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.position.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( pose.orientation !== null ) {\n\n\t\t\t\tcamera.quaternion.fromArray( pose.orientation );\n\n\t\t\t}\n\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tvar stageParameters = device.stageParameters;\n\n\t\t\tif ( this.standing && stageParameters ) {\n\n\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\n\t\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\n\n\t\t\t\tcamera.matrixWorld.multiply( standingMatrix );\n\t\t\t\tcamera.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t\t}\n\n\t\t\tif ( device.isPresenting === false ) return camera;\n\n\t\t\t//\n\n\t\t\tcameraL.near = camera.near;\n\t\t\tcameraR.near = camera.near;\n\n\t\t\tcameraL.far = camera.far;\n\t\t\tcameraR.far = camera.far;\n\n\t\t\tcameraVR.matrixWorld.copy( camera.matrixWorld );\n\t\t\tcameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );\n\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\t\tif ( this.standing && stageParameters ) {\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\t\t// HACK @mrdoob\n\t\t\t// https://github.com/w3c/webvr/issues/203\n\n\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t//\n\n\t\t\tvar layers = device.getLayers();\n\n\t\t\tif ( layers.length ) {\n\n\t\t\t\tvar layer = layers[ 0 ];\n\n\t\t\t\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\n\n\t\t\t\t\tcameraL.bounds.fromArray( layer.leftBounds );\n\n\t\t\t\t}\n\n\t\t\t\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\n\n\t\t\t\t\tcameraR.bounds.fromArray( layer.rightBounds );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\treturn standingMatrix;\n\n\t\t};\n\n\t\tthis.submitFrame = function () {\n\n\t\t\tif ( device && device.isPresenting ) device.submitFrame();\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\tif ( typeof window !== 'undefined' ) {\n\n\t\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions ) {\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === RepeatWrapping ) return gl.REPEAT;\n\t\t\tif ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;\n\t\t\tif ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;\n\n\t\t\tif ( p === NearestFilter ) return gl.NEAREST;\n\t\t\tif ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;\n\t\t\tif ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;\n\n\t\t\tif ( p === LinearFilter ) return gl.LINEAR;\n\t\t\tif ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;\n\t\t\tif ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;\n\n\t\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;\n\n\t\t\tif ( p === ByteType ) return gl.BYTE;\n\t\t\tif ( p === ShortType ) return gl.SHORT;\n\t\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\t\tif ( p === IntType ) return gl.INT;\n\t\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\t\tif ( p === RGBFormat ) return gl.RGB;\n\t\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\t\tif ( p === AddEquation ) return gl.FUNC_ADD;\n\t\t\tif ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;\n\t\t\tif ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;\n\n\t\t\tif ( p === ZeroFactor ) return gl.ZERO;\n\t\t\tif ( p === OneFactor ) return gl.ONE;\n\t\t\tif ( p === SrcColorFactor ) return gl.SRC_COLOR;\n\t\t\tif ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;\n\t\t\tif ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;\n\t\t\tif ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;\n\t\t\tif ( p === DstAlphaFactor ) return gl.DST_ALPHA;\n\t\t\tif ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;\n\n\t\t\tif ( p === DstColorFactor ) return gl.DST_COLOR;\n\t\t\tif ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;\n\t\t\tif ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t}\n\n\t\t\tif ( p === MinEquation || p === MaxEquation ) {\n\n\t\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tvar currentRenderList = null;\n\n\t\tvar spritesArray = [];\n\t\tvar flaresArray = [];\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\t\tthis.context = null;\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.gammaInput = false;\n\t\tthis.gammaOutput = false;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t_isContextLost = false,\n\n\t\t\t// internal state cache\n\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\t\t\t_currentGeometryProgram = '',\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t//\n\n\t\t\t_usedTextureUnits = 0,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3(),\n\n\t\t\t// info\n\n\t\t\t_infoMemory = {\n\t\t\t\tgeometries: 0,\n\t\t\t\ttextures: 0\n\t\t\t},\n\n\t\t\t_infoRender = {\n\n\t\t\t\tframe: 0,\n\t\t\t\tcalls: 0,\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0,\n\t\t\t\tpoints: 0\n\n\t\t\t};\n\n\t\tthis.info = {\n\n\t\t\trender: _infoRender,\n\t\t\tmemory: _infoMemory,\n\t\t\tprograms: null\n\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t\t};\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n\t\t}\n\n\t\tvar extensions, capabilities, state;\n\t\tvar properties, textures, attributes, geometries, objects, lights;\n\t\tvar programCache, renderLists;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tvar flareRenderer, spriteRenderer;\n\n\t\tvar utils;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\textensions.get( 'OES_texture_float' );\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tstate = new WebGLState( _gl, extensions, utils );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, _infoMemory );\n\t\t\tattributes = new WebGLAttributes( _gl );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, _infoMemory );\n\t\t\tobjects = new WebGLObjects( geometries, _infoRender );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\t\tlights = new WebGLLights();\n\t\t\trenderLists = new WebGLRenderLists();\n\n\t\t\tbackground = new WebGLBackground( _this, state, geometries, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t\t\tflareRenderer = new WebGLFlareRenderer( _this, _gl, state, textures, capabilities );\n\t\t\tspriteRenderer = new WebGLSpriteRenderer( _this, _gl, state, textures, capabilities );\n\n\t\t\t_this.info.programs = programCache.programs;\n\n\t\t\t_this.context = _gl;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// vr\n\n\t\tvar vr = new WebVRManager( _this );\n\n\t\tthis.vr = vr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.loseContext();\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.restoreContext();\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) return;\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tvar device = vr.getDevice();\n\n\t\t\tif ( device && device.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = width * _pixelRatio;\n\t\t\t_canvas.height = height * _pixelRatio;\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width * _pixelRatio,\n\t\t\t\theight: _height * _pixelRatio\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = width * pixelRatio;\n\t\t\t_canvas.height = height * pixelRatio;\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\t_viewport.set( x, _height - y - height, width, height );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\t_scissor.set( x, _height - y - height, width, height );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\n\t\t\tvr.dispose();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program, material ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\t\tif ( ! material.isMeshPhongMaterial &&\n\t\t\t\t\t! material.isMeshStandardMaterial &&\n\t\t\t\t\t! material.isMeshNormalMaterial &&\n\t\t\t\t\tmaterial.flatShading === true ) {\n\n\t\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\t\tstate.setMaterial( material );\n\n\t\t\tvar program = setProgram( camera, fog, material, object );\n\t\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = 0;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdataCount = index.count;\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\tdataCount = position.count;\n\n\t\t\t}\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) return;\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t\t}\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tlightsArray.push( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tshadowsArray.push( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar isAnimating = false;\n\t\tvar onAnimationFrame = null;\n\n\t\tfunction start() {\n\n\t\t\tif ( isAnimating ) return;\n\n\t\t\tvar device = vr.getDevice();\n\t\t\t\n\t\t\tif ( device && device.isPresenting ) {\n\n\t\t\t\tdevice.requestAnimationFrame( loop );\n\n\t\t\t} else {\n\n\t\t\t\twindow.requestAnimationFrame( loop );\n\n\t\t\t}\n\n\t\t\tisAnimating = true;\n\n\t\t}\n\n\t\tfunction loop( time ) {\n\n\t\t\tif ( onAnimationFrame !== null ) onAnimationFrame( time );\n\n\t\t\tvar device = vr.getDevice();\n\t\t\t\n\t\t\tif ( device && device.isPresenting ) {\n\n\t\t\t\tdevice.requestAnimationFrame( loop );\n\n\t\t\t} else {\n\n\t\t\t\twindow.requestAnimationFrame( loop );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.animate = function ( callback ) {\n\n\t\t\tonAnimationFrame = callback;\n\t\t\tstart();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost ) return;\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tcamera = vr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t\tspritesArray.length = 0;\n\t\t\tflaresArray.length = 0;\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, _this.sortObjects );\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t\t//\n\n\t\t\t_infoRender.frame ++;\n\t\t\t_infoRender.calls = 0;\n\t\t\t_infoRender.vertices = 0;\n\t\t\t_infoRender.faces = 0;\n\t\t\t_infoRender.points = 0;\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\trenderTarget = null;\n\n\t\t\t}\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\n\n\t\t\t}\n\n\t\t\t// custom renderers\n\n\t\t\tspriteRenderer.render( spritesArray, scene, camera );\n\t\t\tflareRenderer.render( flaresArray, scene, camera, _currentViewport );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tvr.submitFrame();\n\n\t\t\t}\n\n\t\t\t// _gl.finish();\n\n\t\t};\n\n\t\t/*\n\t\t// TODO Duplicated code (Frustum)\n\n\t\tvar _sphere = new Sphere();\n\n\t\tfunction isObjectViewable( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSpriteViewable( sprite ) {\n\n\t\t\t_sphere.center.set( 0, 0, 0 );\n\t\t\t_sphere.radius = 0.7071067811865476;\n\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSphereViewable( sphere ) {\n\n\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\t\tif ( numPlanes === 0 ) return true;\n\n\t\t\tvar planes = _this.clippingPlanes,\n\n\t\t\t\tcenter = sphere.center,\n\t\t\t\tnegRad = - sphere.radius,\n\t\t\t\ti = 0;\n\n\t\t\tdo {\n\n\t\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t\t} while ( ++ i !== numPlanes );\n\n\t\t\treturn true;\n\n\t\t}\n\t\t*/\n\n\t\tfunction projectObject( object, camera, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tlightsArray.push( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tshadowsArray.push( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tspritesArray.push( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isLensFlare ) {\n\n\t\t\t\t\tflaresArray.push( object );\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tvar bounds = camera2.bounds;\n\n\t\t\t\t\t\t\tvar x = bounds.x * _width;\n\t\t\t\t\t\t\tvar y = bounds.y * _height;\n\t\t\t\t\t\t\tvar width = bounds.z * _width;\n\t\t\t\t\t\t\tvar height = bounds.w * _height;\n\n\t\t\t\t\t\t\tstate.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t\t_currentGeometryProgram = '';\n\n\t\t\t\trenderObjectImmediate( object, program, material );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t\t}\n\n\t\tfunction initMaterial( material, fog, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.code !== code ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader );\n\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.lightsHash = lights.state.hash;\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t\t_usedTextureUnits = 0;\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate === false ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate ) {\n\n\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\tmaterial.needsUpdate = false;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Avoid unneeded uniform updates per ArrayCamera's sub-camera\n\n\t\t\t\tif ( _currentCamera !== ( _currentArrayCamera || camera ) ) {\n\n\t\t\t\t\t_currentCamera = ( _currentArrayCamera || camera );\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( material.lights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\t\tm_uniforms.color.value = material.color;\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;\n\t\t\t\tif ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;\n\n\t\t\t\tWebGLUniforms.upload(\n\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t\t}\n\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tvar offset = uvScaleMap.offset;\n\t\t\t\t\tvar repeat = uvScaleMap.repeat;\n\t\t\t\t\tvar rotation = uvScaleMap.rotation;\n\t\t\t\t\tvar center = uvScaleMap.center;\n\n\t\t\t\t\tuvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tif ( material.map.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tvar offset = material.map.offset;\n\t\t\t\t\tvar repeat = material.map.repeat;\n\t\t\t\t\tvar rotation = material.map.rotation;\n\t\t\t\t\tvar center = material.map.center;\n\n\t\t\t\t\tmaterial.map.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value = fog.color;\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value = material.specular;\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\t// GL state setting\n\n\t\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\t\tstate.setCullFace( cullFace );\n\t\t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\n\t\t};\n\n\t\t// Textures\n\n\t\tfunction allocTextureUnit() {\n\n\t\t\tvar textureUnit = _usedTextureUnits;\n\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t\t}\n\n\t\t\t_usedTextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\tthis.allocTextureUnit = allocTextureUnit;\n\n\t\t// this.setTexture2D = setTexture2D;\n\t\tthis.setTexture2D = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTexture = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTexture( texture, slot ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTextureCube = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t\t// backwards compatibility: peel texture.texture\n\t\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t\t// TODO: unify these code paths\n\t\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = null;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tFogExp2.prototype.clone = function () {\n\n\t\treturn new FogExp2( this.color.getHex(), this.density );\n\n\t};\n\n\tFogExp2.prototype.toJSON = function ( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tFog.prototype.clone = function () {\n\n\t\treturn new Fog( this.color.getHex(), this.near, this.far );\n\n\t};\n\n\tFog.prototype.toJSON = function ( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.fog = null;\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction LensFlare( texture, size, distance, blending, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.lensFlares = [];\n\n\t\tthis.positionScreen = new Vector3();\n\t\tthis.customUpdateCallback = undefined;\n\n\t\tif ( texture !== undefined ) {\n\n\t\t\tthis.add( texture, size, distance, blending, color );\n\n\t\t}\n\n\t}\n\n\tLensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LensFlare,\n\n\t\tisLensFlare: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.positionScreen.copy( source.positionScreen );\n\t\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\t\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n\t\t\tif ( size === undefined ) size = - 1;\n\t\t\tif ( distance === undefined ) distance = 0;\n\t\t\tif ( opacity === undefined ) opacity = 1;\n\t\t\tif ( color === undefined ) color = new Color( 0xffffff );\n\t\t\tif ( blending === undefined ) blending = NormalBlending;\n\n\t\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\t\t\tthis.lensFlares.push( {\n\t\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\t\tscale: 1, \t\t// scale\n\t\t\t\trotation: 0, \t\t// rotation\n\t\t\t\topacity: opacity,\t// opacity\n\t\t\t\tcolor: color,\t\t// color\n\t\t\t\tblending: blending\t// blending\n\t\t\t} );\n\n\t\t},\n\n\t\t/*\n\t\t * Update lens flares update positions on all flares based on the screen position\n\t\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t\t */\n\n\t\tupdateLensFlares: function () {\n\n\t\t\tvar f, fl = this.lensFlares.length;\n\t\t\tvar flare;\n\t\t\tvar vecX = - this.positionScreen.x * 2;\n\t\t\tvar vecY = - this.positionScreen.y * 2;\n\n\t\t\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\t\t\tflare = this.lensFlares[ f ];\n\n\t\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *\tuvOffset: new THREE.Vector2(),\n\t *\tuvScale: new THREE.Vector2()\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.map = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.map = source.map;\n\n\t\tthis.rotation = source.rotation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar intersectPoint = new Vector3();\n\t\t\tvar worldPosition = new Vector3();\n\t\t\tvar worldScale = new Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tworldPosition.setFromMatrixPosition( this.matrixWorld );\n\t\t\t\traycaster.ray.closestPointToPoint( worldPosition, intersectPoint );\n\n\t\t\t\tworldScale.setFromMatrixScale( this.matrixWorld );\n\t\t\t\tvar guessSizeSq = worldScale.x * worldScale.y / 4;\n\n\t\t\t\tif ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\tface: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) distance = 0;\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar matrixPosition = new Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tupdate: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar levels = this.levels;\n\n\t\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: ( function () {\n\n\t\t\tvar offsetMatrix = new Matrix4();\n\t\t\tvar identityMatrix = new Matrix4();\n\n\t\t\treturn function update() {\n\n\t\t\t\tvar bones = this.bones;\n\t\t\t\tvar boneInverses = this.boneInverses;\n\t\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t\t// flatten bone matrices to array\n\n\t\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\n\n\t\t\t\t\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t\toffsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\tvar bones = this.initBones();\n\t\tvar skeleton = new Skeleton( bones );\n\n\t\tthis.bind( skeleton, this.matrixWorld );\n\n\t\tthis.normalizeSkinWeights();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tinitBones: function () {\n\n\t\t\tvar bones = [], bone, gbone;\n\t\t\tvar i, il;\n\n\t\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\t\t\t// first, create array of 'Bone' objects from geometry data\n\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t\t// create new 'Bone' object\n\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t\tbones.push( bone );\n\n\t\t\t\t\t// apply values\n\n\t\t\t\t\tbone.name = gbone.name;\n\t\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t\t}\n\n\t\t\t\t// second, create bone hierarchy\n\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\n\n\t\t\t\t\t\t// subsequent bones in the hierarchy\n\n\t\t\t\t\t\tbones[ gbone.parent ].add( bones[ i ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// topmost bone, immediate child of the skinned mesh\n\n\t\t\t\t\t\tthis.add( bones[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// now the bones are part of the scene graph and children of the skinned mesh.\n\t\t\t// let's update the corresponding matrices\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn bones;\n\n\t\t},\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar scale, i;\n\n\t\t\tif ( this.geometry && this.geometry.isGeometry ) {\n\n\t\t\t\tfor ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\t\tscale = 1.0 / sw.manhattanLength();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.geometry && this.geometry.isBufferGeometry ) {\n\n\t\t\t\tvar vec = new Vector4();\n\n\t\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\t\tfor ( i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\t\tscale = 1.0 / vec.manhattanLength();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\t\treturn new LineSegments( geometry, material );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar precision = raycaster.linePrecision;\n\t\t\t\tvar precisionSq = precision * precision;\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar vStart = new Vector3();\n\t\t\t\tvar vEnd = new Vector3();\n\t\t\t\tvar interSegment = new Vector3();\n\t\t\t\tvar interRay = new Vector3();\n\t\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar object = this;\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\t\t\tsphere.radius += threshold;\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\t\tvar position = new Vector3();\n\n\t\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.generateMipmaps = false;\n\n\t\tvar scope = this;\n\n\t\tfunction update() {\n\n\t\t\tvar video = scope.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tscope.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\trequestAnimationFrame( update );\n\n\t\t}\n\n\t\trequestAnimationFrame( update );\n\n\t}\n\n\tVideoTexture.prototype = Object.create( Texture.prototype );\n\tVideoTexture.prototype.constructor = VideoTexture;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tp0 = func( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tp1 = func( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp1 = func( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tp1 = func( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp1 = func( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tappplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction appplyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (\xB11, \xB11, \xB11)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, \xB11/\u03C6, \xB1\u03C6)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (\xB11/\u03C6, \xB1\u03C6, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (\xB1\u03C6, 0, \xB11/\u03C6)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\ttriangulate: ( function () {\n\n\t\t\t/**\n\t\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t\t * See original code and more information here:\n\t\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t\t *\n\t\t\t * ported to actionscript by Zevan Rosser\n\t\t\t * www.actionsnippet.com\n\t\t\t *\n\t\t\t * ported to javascript by Joshua Koo\n\t\t\t * http://www.lab4games.net/zz85/blog\n\t\t\t *\n\t\t\t */\n\n\t\t\tfunction snip( contour, u, v, w, n, verts ) {\n\n\t\t\t\tvar p;\n\t\t\t\tvar ax, ay, bx, by;\n\t\t\t\tvar cx, cy, px, py;\n\n\t\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\t\tay = contour[ verts[ u ] ].y;\n\n\t\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\t\tby = contour[ verts[ v ] ].y;\n\n\t\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\t\tcy = contour[ verts[ w ] ].y;\n\n\t\t\t\tif ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;\n\n\t\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\t\t\taX = cx - bx; aY = cy - by;\n\t\t\t\tbX = ax - cx; bY = ay - cy;\n\t\t\t\tcX = bx - ax; cY = by - ay;\n\n\t\t\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\t\tpy = contour[ verts[ p ] ].y;\n\n\t\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\t\t\tapx = px - ax; apy = py - ay;\n\t\t\t\t\tbpx = px - bx; bpy = py - by;\n\t\t\t\t\tcpx = px - cx; cpy = py - cy;\n\n\t\t\t\t\t// see if p is inside triangle abc\n\n\t\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// takes in an contour array and returns\n\n\t\t\treturn function triangulate( contour, indices ) {\n\n\t\t\t\tvar n = contour.length;\n\n\t\t\t\tif ( n < 3 ) return null;\n\n\t\t\t\tvar result = [],\n\t\t\t\t\tverts = [],\n\t\t\t\t\tvertIndices = [];\n\n\t\t\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\t\t\tvar u, v, w;\n\n\t\t\t\tif ( ShapeUtils.area( contour ) > 0.0 ) {\n\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t\t\t}\n\n\t\t\t\tvar nv = n;\n\n\t\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\t\t\tvar count = 2 * nv; /* error detection */\n\n\t\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t\t//return null;\n\t\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n\t\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\t\t\tu = v; if ( nv <= u ) u = 0; /* previous */\n\t\t\t\t\tv = u + 1; if ( nv <= v ) v = 0; /* new v    */\n\t\t\t\t\tw = v + 1; if ( nv <= w ) w = 0; /* next     */\n\n\t\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t\t\t/* true names of the vertices */\n\n\t\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\t\tc = verts[ w ];\n\n\t\t\t\t\t\t/* output Triangle */\n\n\t\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n\t\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnv --;\n\n\t\t\t\t\t\t/* reset error detection counter */\n\n\t\t\t\t\t\tcount = 2 * nv;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tfunction removeDupEndPts( points ) {\n\n\t\t\t\tvar l = points.length;\n\n\t\t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\t\tpoints.pop();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n\t\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n\t\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n\t\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n\t\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n\t\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x, seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x, seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\n\t\t\t\t\tvar perpSeg2;\n\t\t\t\t\tif ( limit > 0 ) {\n\n\t\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\t\tif ( perpSeg2 === 0 ) {\n\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( perpSeg2 === limit ) {\n\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt2 ];\n\n\t\t\t\t\t}\n\t\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n\t\t\t\t\t// return real intersection point\n\t\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx, y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t\t// they are collinear or degenerate\n\t\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t\t// both segments are points\n\t\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n\t\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\t// they are the same point\n\n\t\t\t\t\t}\n\t\t\t\t\t// segment#1  is a single point\n\t\t\t\t\tif ( seg1Pt ) {\n\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t\t}\n\t\t\t\t\t// segment#2  is a single point\n\t\t\t\t\tif ( seg2Pt ) {\n\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\t\treturn [ inSeg2Pt1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\t\tif ( seg1dx !== 0 ) {\n\n\t\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n\t\t\t\t\t\tif ( seg1maxVal < seg2minVal )\treturn [];\n\t\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg2min ];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( seg1minVal > seg2maxVal )\treturn [];\n\t\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg1min ];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n\t\t\t\t// The order of legs is important\n\n\t\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x, legFromPtY = inLegFromPt.y - inVertex.y;\n\t\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x, legToPtY = inLegToPt.y\t- inVertex.y;\n\t\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x, otherPtY = inOtherPt.y\t- inVertex.y;\n\n\t\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n\t\t\t\t\t// angle != 180 deg.\n\n\t\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\t\tif ( from2toAngle > 0 ) {\n\n\t\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// angle == 180 deg.\n\t\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\t\treturn\t( from2otherAngle > 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\t\tvar hole;\n\n\t\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n\t\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn\ttrue;\n\n\t\t\t\t}\n\n\t\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t\t// checks for intersections with shape edges\n\t\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n\t\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\tvar indepHoles = [];\n\n\t\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t\t// checks for intersections with hole edges\n\t\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n\t\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ] ];\n\t\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n\t\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\t\tshapePt, holePt,\n\t\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tindepHoles.push( h );\n\n\t\t\t\t}\n\n\t\t\t\tvar minShapeIndex = 0;\n\t\t\t\tvar counter = indepHoles.length * 2;\n\t\t\t\twhile ( indepHoles.length > 0 ) {\n\n\t\t\t\t\tcounter --;\n\t\t\t\t\tif ( counter < 0 ) {\n\n\t\t\t\t\t\tconsole.log( 'THREE.ShapeUtils: Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t\t// which can be connected without intersections\n\t\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n\t\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n\t\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\t\tcutKey = shapePt.x + ':' + shapePt.y + ':' + holeIdx;\n\t\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n\t\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n\t\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n\t\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn shape; \t\t\t/* shape with no holes */\n\n\t\t\t}\n\n\n\t\t\tvar i, il, f, face,\n\t\t\t\tkey, index,\n\t\t\t\tallPointsMap = {};\n\n\t\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\t\tvar allpoints = contour.concat();\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n\t\t\t}\n\n\t\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t\t// prepare all points map\n\n\t\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\t\tkey = allpoints[ i ].x + ':' + allpoints[ i ].y;\n\n\t\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Duplicate point', key, i );\n\n\t\t\t\t}\n\n\t\t\t\tallPointsMap[ key ] = i;\n\n\t\t\t}\n\n\t\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\t\tvar triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t\t// check all face vertices against all points map\n\n\t\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\t\tface = triangles[ i ];\n\n\t\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\t\tkey = face[ f ].x + ':' + face[ f ].y;\n\n\t\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn triangles.concat();\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  amount: <int>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline is bevel\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *  frames: <Object> // containing arrays of tangents, normals, binormals\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tif ( typeof ( shapes ) === \"undefined\" ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tthis.addShapeList( shapes, options );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// can't really use automatic vertex normals\n\t\t// as then front and back sides get smoothed too\n\t\t// should do separate smoothing just for sides\n\n\t\t//this.computeVertexNormals();\n\n\t\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.getArrays = function () {\n\n\t\tvar positionAttribute = this.getAttribute( \"position\" );\n\t\tvar verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];\n\n\t\tvar uvAttribute = this.getAttribute( \"uv\" );\n\t\tvar uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];\n\n\t\tvar IndexAttribute = this.index;\n\t\tvar indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];\n\n\t\treturn {\n\t\t\tposition: verticesArray,\n\t\t\tuv: uvArray,\n\t\t\tindex: indicesArray\n\t\t};\n\n\t};\n\n\tExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\t\tvar sl = shapes.length;\n\t\toptions.arrays = this.getArrays();\n\n\t\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\t\tvar shape = shapes[ s ];\n\t\t\tthis.addShape( shape, options );\n\n\t\t}\n\n\t\tthis.setIndex( options.arrays.index );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );\n\n\t};\n\n\tExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {\n\n\t\tvar arrays = options.arrays ? options.arrays : this.getArrays();\n\t\tvar verticesArray = arrays.position;\n\t\tvar indicesArray = arrays.index;\n\t\tvar uvArray = arrays.uv;\n\n\t\tvar placeholder = [];\n\n\n\t\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\t\tvar extrudePath = options.extrudePath;\n\t\tvar extrudePts, extrudeByPath = false;\n\n\t\t// Use default WorldUVGenerator if no UV generators are specified.\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n\t\tvar splineTube, binormal, normal, position2;\n\t\tif ( extrudePath ) {\n\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\textrudeByPath = true;\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t// SETUP TNB variables\n\n\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\tsplineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\tbinormal = new Vector3();\n\t\t\tnormal = new Vector3();\n\t\t\tposition2 = new Vector3();\n\n\t\t}\n\n\t\t// Safeguards if bevels are not enabled\n\n\t\tif ( ! bevelEnabled ) {\n\n\t\t\tbevelSegments = 0;\n\t\t\tbevelThickness = 0;\n\t\t\tbevelSize = 0;\n\n\t\t}\n\n\t\t// Variables initialization\n\n\t\tvar ahole, h, hl; // looping of holes\n\t\tvar scope = this;\n\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\n\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\tif ( reverse ) {\n\n\t\t\tvertices = vertices.reverse();\n\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t/* Vertices */\n\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tvertices = vertices.concat( ahole );\n\n\t\t}\n\n\n\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t}\n\n\t\tvar b, bs, t, z,\n\t\t\tvert, vlen = vertices.length,\n\t\t\tface, flen = faces.length;\n\n\n\t\t// Find directions for point movement\n\n\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t//\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t// check for collinear edges\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t// not collinear\n\n\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t//  but prevent crazy spikes\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t}\n\n\n\t\tvar contourMovements = [];\n\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t}\n\n\t\tvar holesMovements = [],\n\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\toneHoleMovements = [];\n\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t}\n\n\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t}\n\n\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tbs = bevelSize;\n\n\t\t// Back facing vertices\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add stepped vertices...\n\t\t// Including front facing vertices\n\n\t\tvar s;\n\n\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// Add bevel segments planes\n\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/* Faces */\n\n\t\t// Top and bottom faces\n\n\t\tbuildLidFaces();\n\n\t\t// Sides faces\n\n\t\tbuildSideFaces();\n\n\n\t\t/////  Internal functions\n\n\t\tfunction buildLidFaces() {\n\n\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, options.material !== undefined ? options.material : 0 );\n\n\t\t}\n\n\t\t// Create faces for the z-sides of the shape\n\n\t\tfunction buildSideFaces() {\n\n\t\t\tvar start = verticesArray.length / 3;\n\t\t\tvar layeroffset = 0;\n\t\t\tsidewalls( contour, layeroffset );\n\t\t\tlayeroffset += contour.length;\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t//, true\n\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t}\n\n\n\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1 );\n\n\n\t\t}\n\n\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\tvar j, k;\n\t\t\ti = contour.length;\n\n\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\tj = i;\n\t\t\t\tk = i - 1;\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\tvar s = 0,\n\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction v( x, y, z ) {\n\n\t\t\tplaceholder.push( x );\n\t\t\tplaceholder.push( y );\n\t\t\tplaceholder.push( z );\n\n\t\t}\n\n\n\t\tfunction f3( a, b, c ) {\n\n\t\t\taddVertex( a );\n\t\t\taddVertex( b );\n\t\t\taddVertex( c );\n\n\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\taddUV( uvs[ 0 ] );\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 2 ] );\n\n\t\t}\n\n\t\tfunction f4( a, b, c, d ) {\n\n\t\t\taddVertex( a );\n\t\t\taddVertex( b );\n\t\t\taddVertex( d );\n\n\t\t\taddVertex( b );\n\t\t\taddVertex( c );\n\t\t\taddVertex( d );\n\n\n\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\taddUV( uvs[ 0 ] );\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 2 ] );\n\t\t\taddUV( uvs[ 3 ] );\n\n\t\t}\n\n\t\tfunction addVertex( index ) {\n\n\t\t\tindicesArray.push( verticesArray.length / 3 );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t}\n\n\n\t\tfunction addUV( vector2 ) {\n\n\t\t\tuvArray.push( vector2.x );\n\t\t\tuvArray.push( vector2.y );\n\n\t\t}\n\n\t\tif ( ! options.arrays ) {\n\n\t\t\tthis.setIndex( indicesArray );\n\t\t\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );\n\n\t\t}\n\n\t};\n\n\tExtrudeGeometry.WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float> // how far from text outline is bevel\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = thetaStart + thetaLength;\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author astrodud / http://astrodud.isgreat.org/\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t\t// also check if holes are in the opposite direction\n\n\t\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = Object.freeze({\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>,\n\t *  opacity: <float>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.opacity = 1.0;\n\n\t\tthis.lights = true;\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 0.5;\n\t\tthis.metalness = 0.5;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearCoat = 0.0;\n\t\tthis.clearCoatRoughness = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearCoat = source.clearCoat;\n\t\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  gradientMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMeshPhongMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.gradientMap = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = Object.freeze({\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FileLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = window.decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) data = window.atob( data );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = event.target.response;\n\n\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( CompressedTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( DataTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( ImageLoader.prototype, {\n\n\t\tcrossOrigin: 'Anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\timage.addEventListener( 'load', function () {\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, false );\n\n\t\t\t/*\n\t\t\timage.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tif ( onProgress ) onProgress( event );\n\n\t\t\t}, false );\n\t\t\t*/\n\n\t\t\timage.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( CubeTextureLoader.prototype, {\n\n\t\tcrossOrigin: 'Anonymous',\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( TextureLoader.prototype, {\n\n\t\tcrossOrigin: 'Anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar texture = new Texture();\n\t\t\ttexture.image = loader.load( url, function () {\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.matrix = new Matrix4();\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdate: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow( ) {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.position.set( 0, 1, 0 );\n\t\tthis.updateMatrix();\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t\t// TODO (abelnation): distance/decay\n\n\t\t// TODO (abelnation): update method for RectAreaLight to update transform to lookat target\n\n\t\t// TODO (abelnation): shadows\n\n\t}\n\n\t// TODO (abelnation): RectAreaLight update when light shape is changed\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) return; // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) return; // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\tvar KeyframeTrackPrototype;\n\n\tKeyframeTrackPrototype = {\n\n\t\tTimeBufferType: Float32Array,\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrackPrototype:', message );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) -- to;\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else keep = true;\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\tfunction KeyframeTrackConstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'track name is undefined' );\n\n\t\tif ( times === undefined || times.length === 0 ) {\n\n\t\t\tthrow new Error( 'no keyframes in track named ' + name );\n\n\t\t}\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t\tthis.validate();\n\t\tthis.optimize();\n\n\t}\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.apply( this, name, times, values, interpolation );\n\n\t}\n\n\tKeyframeTrack.prototype = KeyframeTrackPrototype;\n\tKeyframeTrackPrototype.constructor = KeyframeTrack;\n\n\t// Static methods:\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\tparse: function ( json ) {\n\n\t\t\tif ( json.type === undefined ) {\n\n\t\t\t\tthrow new Error( 'track type undefined, can not parse' );\n\n\t\t\t}\n\n\t\t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\t\tif ( json.times === undefined ) {\n\n\t\t\t\tvar times = [], values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\t\tjson.times = times;\n\t\t\t\tjson.values = values;\n\n\t\t\t}\n\n\t\t\t// derived classes can define a static parse method\n\t\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\t\treturn trackType.parse( json );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\t_getTrackTypeForValueTypeName: function ( typeName ) {\n\n\t\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\t\tcase 'scalar':\n\t\t\t\tcase 'double':\n\t\t\t\tcase 'float':\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'integer':\n\n\t\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\t\tcase 'vector':\n\t\t\t\tcase 'vector2':\n\t\t\t\tcase 'vector3':\n\t\t\t\tcase 'vector4':\n\n\t\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\t\tcase 'color':\n\n\t\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\t\tcase 'quaternion':\n\n\t\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\t\tcase 'bool':\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\t\tcase 'string':\n\n\t\t\t\t\treturn StringKeyframeTrack;\n\n\t\t\t}\n\n\t\t\tthrow new Error( 'Unsupported typeName: ' + typeName );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t\tthis.optimize();\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.textures = {};\n\n\t}\n\n\tObject.assign( MaterialLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\t\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\n\t\t\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\n\t\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\t\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n\t\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\t\treturn material;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( BufferGeometryLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader() {\n\n\t\tthis.onLoadStart = function () {};\n\t\tthis.onLoadProgress = function () {};\n\t\tthis.onLoadComplete = function () {};\n\n\t}\n\n\tLoader.Handlers = {\n\n\t\thandlers: [],\n\n\t\tadd: function ( regex, loader ) {\n\n\t\t\tthis.handlers.push( regex, loader );\n\n\t\t},\n\n\t\tget: function ( file ) {\n\n\t\t\tvar handlers = this.handlers;\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t};\n\n\tObject.assign( Loader.prototype, {\n\n\t\tcrossOrigin: undefined,\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar parts = url.split( '/' );\n\n\t\t\tif ( parts.length === 1 ) return './';\n\n\t\t\tparts.pop();\n\n\t\t\treturn parts.join( '/' ) + '/';\n\n\t\t},\n\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\t\tvar array = [];\n\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tcreateMaterial: ( function () {\n\n\t\t\tvar BlendingMode = {\n\t\t\t\tNoBlending: NoBlending,\n\t\t\t\tNormalBlending: NormalBlending,\n\t\t\t\tAdditiveBlending: AdditiveBlending,\n\t\t\t\tSubtractiveBlending: SubtractiveBlending,\n\t\t\t\tMultiplyBlending: MultiplyBlending,\n\t\t\t\tCustomBlending: CustomBlending\n\t\t\t};\n\n\t\t\tvar color = new Color();\n\t\t\tvar textureLoader = new TextureLoader();\n\t\t\tvar materialLoader = new MaterialLoader();\n\n\t\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t\t// convert from old material format\n\n\t\t\t\tvar textures = {};\n\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar uuid = _Math.generateUUID();\n\n\t\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\t\treturn uuid;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar json = {\n\t\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t\t};\n\n\t\t\t\tfor ( var name in m ) {\n\n\t\t\t\t\tvar value = m[ name ];\n\n\t\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\t\treturn materialLoader.parse( json );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction JSONLoader( manager ) {\n\n\t\tif ( typeof manager === 'boolean' ) {\n\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\tmanager = undefined;\n\n\t\t}\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.withCredentials = false;\n\n\t}\n\n\tObject.assign( JSONLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\t\tvar type = metadata.type;\n\n\t\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tparse: ( function () {\n\n\t\t\tfunction parseModel( json, geometry ) {\n\n\t\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t\t}\n\n\t\t\t\tvar i, j, fi,\n\n\t\t\t\t\toffset, zLength,\n\n\t\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\t\ttype,\n\t\t\t\t\tisQuad,\n\t\t\t\t\thasMaterial,\n\t\t\t\t\thasFaceVertexUv,\n\t\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\t\tfaces = json.faces,\n\t\t\t\t\tvertices = json.vertices,\n\t\t\t\t\tnormals = json.normals,\n\t\t\t\t\tcolors = json.colors,\n\n\t\t\t\t\tscale = json.scale,\n\n\t\t\t\t\tnUvLayers = 0;\n\n\n\t\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t\t// disregard empty arrays\n\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = vertices.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\tvertex = new Vector3();\n\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = faces.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\ttype = faces[ offset ++ ];\n\n\t\t\t\t\tisQuad = isBitSet( type, 0 );\n\t\t\t\t\thasMaterial = isBitSet( type, 1 );\n\t\t\t\t\thasFaceVertexUv = isBitSet( type, 3 );\n\t\t\t\t\thasFaceNormal = isBitSet( type, 4 );\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\thasFaceColor = isBitSet( type, 6 );\n\t\t\t\t\thasFaceVertexColor = isBitSet( type, 7 );\n\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface = new Face3();\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseSkin( json, geometry ) {\n\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar x = json.skinWeights[ i ];\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar a = json.skinIndices[ i ];\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.bones = json.bones;\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseMorphing( json, geometry ) {\n\n\t\t\t\tvar scale = json.scale;\n\n\t\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseAnimations( json, geometry ) {\n\n\t\t\t\tvar outputAnimations = [];\n\n\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\tvar animations = [];\n\n\t\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\t\tanimations.push( json.animation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t\t}\n\n\t\t\t\t// parse implicit morph animations\n\t\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t\t}\n\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t\t}\n\n\t\t\treturn function ( json, texturePath ) {\n\n\t\t\t\tif ( json.data !== undefined ) {\n\n\t\t\t\t\t// Geometry 4.0 spec\n\t\t\t\t\tjson = json.data;\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.scale !== undefined ) {\n\n\t\t\t\t\tjson.scale = 1.0 / json.scale;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tjson.scale = 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = new Geometry();\n\n\t\t\t\tparseModel( json, geometry );\n\t\t\t\tparseSkin( json, geometry );\n\t\t\t\tparseMorphing( json, geometry );\n\t\t\t\tparseAnimations( json, geometry );\n\n\t\t\t\tgeometry.computeFaceNormals();\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\t\treturn { geometry: geometry };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.texturePath = '';\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.texturePath === '' ) {\n\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t\t}\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url + '. Use THREE.JSONLoader instead.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar geometries = this.parseGeometries( json.geometries );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseGeometries: function ( json ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar geometryLoader = new JSONLoader();\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.texturePath ).geometry;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tarray.push( loader.parse( data.materials[ j ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function parseObject( data, geometries, materials ) {\n\n\t\t\t\tvar object;\n\n\t\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn geometries[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn array;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn materials[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'Scene':\n\n\t\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LOD':\n\n\t\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Line':\n\n\t\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointCloud':\n\t\t\t\t\tcase 'Points':\n\n\t\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Group':\n\n\t\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tobject = new Object3D();\n\n\t\t\t\t}\n\n\t\t\t\tobject.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\t\tif ( data.shadow ) {\n\n\t\t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\t\tvar children = data.children;\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\t\tvar levels = data.levels;\n\n\t\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn object;\n\n\t\t\t};\n\n\t\t}()\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/B\xE9zier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) t1 = 0;\n\t\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 40;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && curve.isLineCurve ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle ||\xA00;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tvar PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = PathPrototype;\n\tPathPrototype.constructor = Path;\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( PathPrototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) return [];\n\n\t\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\t\tfunction createPaths( text ) {\n\n\t\t\t\tvar chars = String( text ).split( '' );\n\t\t\t\tvar scale = size / data.resolution;\n\t\t\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\t\t\tvar offsetX = 0, offsetY = 0;\n\n\t\t\t\tvar paths = [];\n\n\t\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\t\t\tvar char = chars[ i ];\n\n\t\t\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\t\t\toffsetX = 0;\n\t\t\t\t\t\toffsetY -= line_height;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY );\n\t\t\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\t\t\tpaths.push( ret.path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn paths;\n\n\t\t\t}\n\n\t\t\tfunction createPath( c, scale, offsetX, offsetY ) {\n\n\t\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n\t\t\t\tif ( ! glyph ) return;\n\n\t\t\t\tvar path = new ShapePath();\n\n\t\t\t\tvar pts = [];\n\t\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n\t\t\t\tif ( glyph.o ) {\n\n\t\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tQuadraticBezier( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\t\tQuadraticBezier( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tCubicBezier( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\t\tCubicBezier( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( size === undefined ) size = 100;\n\t\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\t\tvar data = this.data;\n\n\t\t\tvar paths = createPaths( text );\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FontLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( context === undefined ) {\n\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( AudioLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar context = AudioContext.getContext();\n\n\t\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: ( function () {\n\n\t\t\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\n\n\t\t\tvar eyeRight = new Matrix4();\n\t\t\tvar eyeLeft = new Matrix4();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\n\n\t\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t\tinstance = this;\n\t\t\t\t\tfocus = camera.focus;\n\t\t\t\t\tfov = camera.fov;\n\t\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\t\tnear = camera.near;\n\t\t\t\t\tfar = camera.far;\n\t\t\t\t\tzoom = camera.zoom;\n\n\t\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\t\teyeSep = this.eyeSep / 2;\n\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t\t// translate xOffset\n\n\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t\t// for left eye\n\n\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t\t// for right eye\n\n\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CubeCamera( near, far, cubeResolution ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar fov = 90, aspect = 1;\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderTarget.activeCubeFace = 0;\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 1;\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 2;\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 3;\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 4;\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderTarget.activeCubeFace = 5;\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar renderTarget = this.renderTarget;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTarget.activeCubeFace = i;\n\t\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.value = value;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\t\t\tvar scale = new Vector3();\n\n\t\t\tvar orientation = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tvar listener = this.context.listener;\n\t\t\t\tvar up = this.up;\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t\tlistener.positionX.setValueAtTime( position.x, this.context.currentTime );\n\t\t\t\t\tlistener.positionY.setValueAtTime( position.y, this.context.currentTime );\n\t\t\t\t\tlistener.positionZ.setValueAtTime( position.z, this.context.currentTime );\n\t\t\t\t\tlistener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );\n\t\t\t\t\tlistener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );\n\t\t\t\t\tlistener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );\n\t\t\t\t\tlistener.upX.setValueAtTime( up.x, this.context.currentTime );\n\t\t\t\t\tlistener.upY.setValueAtTime( up.y, this.context.currentTime );\n\t\t\t\t\tlistener.upZ.setValueAtTime( up.z, this.context.currentTime );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.loop = false;\n\t\tthis.startTime = 0;\n\t\tthis.offset = 0;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) this.play();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function () {\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar source = this.context.createBufferSource();\n\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.playbackRate.setValueAtTime( this.playbackRate, this.startTime );\n\t\t\tthis.startTime = this.context.currentTime;\n\t\t\tsource.start( this.startTime, this.offset );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.offset = 0;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) value = [];\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.value = value;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t\t};\n\n\t\t} )()\n\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param  {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( /[^\\w-]/g, '' );\n\n\t\t},\n\n\t\tparseTrackName: function () {\n\n\t\t\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t\t\t// be matched to parse the rest of the track name.\n\t\t\tvar directoryRe = /((?:[\\w-]+[\\/:])*)/;\n\n\t\t\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\t\t\tvar nodeRe = /([\\w-\\.]+)?/;\n\n\t\t\t// Object on target node, and accessor. Name may contain only word\n\t\t\t// characters. Accessor may contain any character except closing bracket.\n\t\t\tvar objectRe = /(?:\\.([\\w-]+)(?:\\[(.+)\\])?)?/;\n\n\t\t\t// Property and accessor. May contain only word characters. Accessor may\n\t\t\t// contain any non-bracket characters.\n\t\t\tvar propertyRe = /\\.([\\w-]+)(?:\\[(.+)\\])?/;\n\n\t\t\tvar trackRe = new RegExp( ''\n\t\t\t\t+ '^'\n\t\t\t\t+ directoryRe.source\n\t\t\t\t+ nodeRe.source\n\t\t\t\t+ objectRe.source\n\t\t\t\t+ propertyRe.source\n\t\t\t\t+ '$'\n\t\t\t);\n\n\t\t\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\t\t\treturn function ( trackName ) {\n\n\t\t\t\tvar matches = trackRe.exec( trackName );\n\n\t\t\t\tif ( ! matches ) {\n\n\t\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t\t}\n\n\t\t\t\tvar results = {\n\t\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t\t};\n\n\t\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t\t// include '.' characters).\n\t\t\t\t\tif ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t\t}\n\n\t\t\t\treturn results;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar searchSkeleton = function ( skeleton ) {\n\n\t\t\t\t\tfor ( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\t\t\t\tvar bone = skeleton.bones[ i ];\n\n\t\t\t\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\t\t\t\treturn bone;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t * \t-\tInstead pass this object as 'root'.\n\t *\n\t * \t-\tYou can also add and remove objects later when the mixer\n\t * \t\tis running.\n\t *\n\t * Note:\n\t *\n\t *  \tObjects of this class appear as one object to the mixer,\n\t *  \tso cache control of the individual objects must be done\n\t *  \ton the group.\n\t *\n\t * Limitation:\n\t *\n\t * \t- \tThe animated properties must be compatible among the\n\t * \t\tall objects in the group.\n\t *\n\t *  -\tA single property can either be controlled through a\n\t *  \ttarget group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = [];\t\t\t\t\t// inside: string\n\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ],\n\t\t\t\t\tknownObject = undefined;\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\t\tthis.paused = false;\t\t\t\t// true -> zero effective time scale\n\t\tthis.enabled = true;\t\t\t\t// false -> zero effective weight\n\n\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0;\t\t\t// restart clip\n\t\t\tthis._loopCount = - 1;\t// forget previous loops\n\t\t\tthis._startTime = null;\t// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\n\t\t\tif ( deltaTime === 0 ) return time;\n\n\t\t\tvar duration = this._clip.duration,\n\n\t\t\t\tloop = this.loop,\n\t\t\t\tloopCount = this._loopCount;\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else break handle_stop;\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending < 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 0 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\tthis.time = time;\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.time = time;\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tObject.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tremove_empty_map: {\n\n\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) return null;\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.onUploadCallback = function () {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\t\tthis.array = array;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n\t\tBufferAttribute.call( this, array, itemSize );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The poles (phi) are at the positive and negative y axis.\n\t * The equator starts at positive z.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( vec3 ) {\n\n\t\t\tthis.radius = vec3.length();\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( vec3 ) {\n\n\t\t\tthis.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z );\n\t\t\tthis.y = vec3.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length * 3;\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n\tVertexNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\t\tvar faces = objGeometry.faces;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar vector2 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tthis.light.updateMatrixWorld();\n\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\tvar boneMatrix = new Matrix4();\n\t\tvar matrixWorldInv = new Matrix4();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tvar bones = this.bones;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tmatrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\t\tvar bone = bones[ i ];\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\t\tposition.setXYZ( j, vector.x, vector.y, vector.z );\n\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\t\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\n\n\t\t\t\t\tj += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction RectAreaLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );\n\n\t\tthis.line = new Line( geometry, material );\n\t\tthis.add( this.line );\n\n\n\t\tthis.update();\n\n\t}\n\n\tRectAreaLightHelper.prototype = Object.create( Object3D.prototype );\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\n\tRectAreaLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tRectAreaLightHelper.prototype.update = function () {\n\n\t\t// calculate new dimensions of the helper\n\n\t\tvar hx = this.light.width * 0.5;\n\t\tvar hy = this.light.height * 0.5;\n\n\t\tvar position = this.line.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\t// update vertices\n\n\t\tarray[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;\n\t\tarray[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;\n\t\tarray[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;\n\t\tarray[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;\n\t\tarray[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;\n\n\t\tposition.needsUpdate = true;\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.line.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.line.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = VertexColors;\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\tvar color1 = new Color();\n\t\tvar color2 = new Color();\n\n\t\treturn function update() {\n\n\t\t\tvar mesh = this.children[ 0 ];\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t\tcolor1.copy( this.light.color );\n\t\t\t\tcolor2.copy( this.light.groundColor );\n\n\t\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\t\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\n\n\t\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.create( LineSegments.prototype );\n\tGridHelper.prototype.constructor = GridHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t\t// FaceNormalsHelper only supports THREE.Geometry\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.update();\n\n\t}\n\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n\tFaceNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t\t.divideScalar( 3 )\n\t\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar v3 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t\tv3.subVectors( v2, v1 );\n\n\t\t\tthis.lightPlane.lookAt( v3 );\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt( v3 );\n\t\t\tthis.targetLine.scale.z = v3.length();\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry, pointMap;\n\n\t\tvar vector = new Vector3();\n\t\tvar camera = new Camera();\n\n\t\tfunction setPoint( point, x, y, z ) {\n\n\t\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\t\tvar points = pointMap[ point ];\n\n\t\t\tif ( points !== undefined ) {\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\t\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function update() {\n\n\t\t\tgeometry = this.geometry;\n\t\t\tpointMap = this.pointMap;\n\n\t\t\tvar w = 1, h = 1;\n\n\t\t\t// we need just camera projection matrix\n\t\t\t// world matrix must be identity\n\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t\t// center / target\n\n\t\t\tsetPoint( 'c', 0, 0, - 1 );\n\t\t\tsetPoint( 't', 0, 0, 1 );\n\n\t\t\t// near\n\n\t\t\tsetPoint( 'n1', - w, - h, - 1 );\n\t\t\tsetPoint( 'n2', w, - h, - 1 );\n\t\t\tsetPoint( 'n3', - w, h, - 1 );\n\t\t\tsetPoint( 'n4', w, h, - 1 );\n\n\t\t\t// far\n\n\t\t\tsetPoint( 'f1', - w, - h, 1 );\n\t\t\tsetPoint( 'f2', w, - h, 1 );\n\t\t\tsetPoint( 'f3', - w, h, 1 );\n\t\t\tsetPoint( 'f4', w, h, 1 );\n\n\t\t\t// up\n\n\t\t\tsetPoint( 'u1', w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( 'u2', - w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( 'u3', 0, h * 2, - 1 );\n\n\t\t\t// cross\n\n\t\t\tsetPoint( 'cf1', - w, 0, 1 );\n\t\t\tsetPoint( 'cf2', w, 0, 1 );\n\t\t\tsetPoint( 'cf3', 0, - h, 1 );\n\t\t\tsetPoint( 'cf4', 0, h, 1 );\n\n\t\t\tsetPoint( 'cn1', - w, 0, - 1 );\n\t\t\tsetPoint( 'cn2', w, 0, - 1 );\n\t\t\tsetPoint( 'cn3', 0, - h, - 1 );\n\t\t\tsetPoint( 'cn4', 0, h, - 1 );\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = ( function () {\n\n\t\tvar box = new Box3();\n\n\t\treturn function update( object ) {\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t\t}\n\n\t\t\tif ( this.object !== undefined ) {\n\n\t\t\t\tbox.setFromObject( this.object );\n\n\t\t\t}\n\n\t\t\tif ( box.isEmpty() ) return;\n\n\t\t\tvar min = box.min;\n\t\t\tvar max = box.max;\n\n\t\t\t/*\n\t\t\t  5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\n\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\n\t\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\tthis.geometry.computeBoundingSphere();\n\n\t\t};\n\n\t} )();\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, hex ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar lineGeometry;\n\tvar coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tif ( lineGeometry === undefined ) {\n\n\t\t\tlineGeometry = new BufferGeometry();\n\t\t\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = ( function () {\n\n\t\tvar axis = new Vector3();\n\t\tvar radians;\n\n\t\treturn function setDirection( dir ) {\n\n\t\t\t// dir is assumed to be normalized\n\n\t\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\t\tradians = Math.acos( dir.y );\n\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.copy( color );\n\t\tthis.cone.material.color.copy( color );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly();\n\tvar py = new CubicPoly();\n\tvar pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\t\tvar group = new Group();\n\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t},\n\n\t\tdetach: function ( child, parent, scene ) {\n\n\t\t\tchild.applyMatrix( parent.matrixWorld );\n\t\t\tparent.remove( child );\n\t\t\tscene.add( child );\n\n\t\t},\n\n\t\tattach: function ( child, scene, parent ) {\n\n\t\t\tchild.applyMatrix( new Matrix4().getInverse( parent.matrixWorld ) );\n\n\t\t\tscene.remove( child );\n\t\t\tparent.add( child );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\n\tvar LinePieces = 1;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) materials = [];\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( _Math, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn _Math.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn _Math.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function getPosition() {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t\t};\n\n\t\t}(),\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tGeometry.prototype.computeTangents = function () {\n\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t};\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.cullFace;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\t\tthis.shadowMap.cullFace = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n\n\t\t\t},\n\t\t\tset: function ( cullFace ) {\n\n\t\t\t\tvar value = ( cullFace !== CullFaceBack );\n\t\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\t\tthis.renderReverseSided = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tAudio.prototype.load = function ( file ) {\n\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\tvar scope = this;\n\t\tvar audioLoader = new AudioLoader();\n\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\tscope.setBuffer( buffer );\n\n\t\t} );\n\t\treturn this;\n\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tvar ImageUtils = {\n\n\t\tcrossOrigin: undefined,\n\n\t\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\t\tvar loader = new TextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\t\tvar loader = new CubeTextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tloadCompressedTexture: function () {\n\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t\t},\n\n\t\tloadCompressedTextureCube: function () {\n\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction Projector() {\n\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\t\tthis.projectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\n\t\t};\n\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\n\t\t};\n\n\t\tthis.pickingRay = function () {\n\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t\t};\n\n\t}\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\t\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tthis.clear = function () {};\n\t\tthis.render = function () {};\n\t\tthis.setClearColor = function () {};\n\t\tthis.setSize = function () {};\n\n\t}\n\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.ShaderLib = ShaderLib;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.FogExp2 = FogExp2;\n\texports.Fog = Fog;\n\texports.Scene = Scene;\n\texports.LensFlare = LensFlare;\n\texports.Sprite = Sprite;\n\texports.LOD = LOD;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.Skeleton = Skeleton;\n\texports.Bone = Bone;\n\texports.Mesh = Mesh;\n\texports.LineSegments = LineSegments;\n\texports.LineLoop = LineLoop;\n\texports.Line = Line;\n\texports.Points = Points;\n\texports.Group = Group;\n\texports.VideoTexture = VideoTexture;\n\texports.DataTexture = DataTexture;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CubeTexture = CubeTexture;\n\texports.CanvasTexture = CanvasTexture;\n\texports.DepthTexture = DepthTexture;\n\texports.Texture = Texture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.TextureLoader = TextureLoader;\n\texports.ObjectLoader = ObjectLoader;\n\texports.MaterialLoader = MaterialLoader;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.LoadingManager = LoadingManager;\n\texports.JSONLoader = JSONLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.FontLoader = FontLoader;\n\texports.FileLoader = FileLoader;\n\texports.Loader = Loader;\n\texports.Cache = Cache;\n\texports.AudioLoader = AudioLoader;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.SpotLight = SpotLight;\n\texports.PointLight = PointLight;\n\texports.RectAreaLight = RectAreaLight;\n\texports.HemisphereLight = HemisphereLight;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DirectionalLight = DirectionalLight;\n\texports.AmbientLight = AmbientLight;\n\texports.LightShadow = LightShadow;\n\texports.Light = Light;\n\texports.StereoCamera = StereoCamera;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.CubeCamera = CubeCamera;\n\texports.ArrayCamera = ArrayCamera;\n\texports.Camera = Camera;\n\texports.AudioListener = AudioListener;\n\texports.PositionalAudio = PositionalAudio;\n\texports.AudioContext = AudioContext;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.Audio = Audio;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.PropertyMixer = PropertyMixer;\n\texports.PropertyBinding = PropertyBinding;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.AnimationUtils = AnimationUtils;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationClip = AnimationClip;\n\texports.Uniform = Uniform;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.BufferGeometry = BufferGeometry;\n\texports.Geometry = Geometry;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.Face3 = Face3;\n\texports.Object3D = Object3D;\n\texports.Raycaster = Raycaster;\n\texports.Layers = Layers;\n\texports.EventDispatcher = EventDispatcher;\n\texports.Clock = Clock;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.Interpolant = Interpolant;\n\texports.Triangle = Triangle;\n\texports.Math = _Math;\n\texports.Spherical = Spherical;\n\texports.Cylindrical = Cylindrical;\n\texports.Plane = Plane;\n\texports.Frustum = Frustum;\n\texports.Sphere = Sphere;\n\texports.Ray = Ray;\n\texports.Matrix4 = Matrix4;\n\texports.Matrix3 = Matrix3;\n\texports.Box3 = Box3;\n\texports.Box2 = Box2;\n\texports.Line3 = Line3;\n\texports.Euler = Euler;\n\texports.Vector4 = Vector4;\n\texports.Vector3 = Vector3;\n\texports.Vector2 = Vector2;\n\texports.Quaternion = Quaternion;\n\texports.Color = Color;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.VertexNormalsHelper = VertexNormalsHelper;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.PointLightHelper = PointLightHelper;\n\texports.RectAreaLightHelper = RectAreaLightHelper;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.GridHelper = GridHelper;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.FaceNormalsHelper = FaceNormalsHelper;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.CameraHelper = CameraHelper;\n\texports.BoxHelper = BoxHelper;\n\texports.Box3Helper = Box3Helper;\n\texports.PlaneHelper = PlaneHelper;\n\texports.ArrowHelper = ArrowHelper;\n\texports.AxesHelper = AxesHelper;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.LineCurve3 = LineCurve3;\n\texports.ArcCurve = ArcCurve;\n\texports.EllipseCurve = EllipseCurve;\n\texports.SplineCurve = SplineCurve;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.LineCurve = LineCurve;\n\texports.Shape = Shape;\n\texports.Path = Path;\n\texports.ShapePath = ShapePath;\n\texports.Font = Font;\n\texports.CurvePath = CurvePath;\n\texports.Curve = Curve;\n\texports.ShapeUtils = ShapeUtils;\n\texports.SceneUtils = SceneUtils;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.PointsMaterial = PointsMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.Material = Material;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.BufferAttribute = BufferAttribute;\n\texports.REVISION = REVISION;\n\texports.MOUSE = MOUSE;\n\texports.CullFaceNone = CullFaceNone;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.FrontSide = FrontSide;\n\texports.BackSide = BackSide;\n\texports.DoubleSide = DoubleSide;\n\texports.FlatShading = FlatShading;\n\texports.SmoothShading = SmoothShading;\n\texports.NoColors = NoColors;\n\texports.FaceColors = FaceColors;\n\texports.VertexColors = VertexColors;\n\texports.NoBlending = NoBlending;\n\texports.NormalBlending = NormalBlending;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.CustomBlending = CustomBlending;\n\texports.AddEquation = AddEquation;\n\texports.SubtractEquation = SubtractEquation;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.MinEquation = MinEquation;\n\texports.MaxEquation = MaxEquation;\n\texports.ZeroFactor = ZeroFactor;\n\texports.OneFactor = OneFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.NeverDepth = NeverDepth;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.EqualDepth = EqualDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterDepth = GreaterDepth;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.MixOperation = MixOperation;\n\texports.AddOperation = AddOperation;\n\texports.NoToneMapping = NoToneMapping;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.UVMapping = UVMapping;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.ByteType = ByteType;\n\texports.ShortType = ShortType;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.IntType = IntType;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.FloatType = FloatType;\n\texports.HalfFloatType = HalfFloatType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.AlphaFormat = AlphaFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBAFormat = RGBAFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.RGBEFormat = RGBEFormat;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LoopPingPong = LoopPingPong;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.LinearEncoding = LinearEncoding;\n\texports.sRGBEncoding = sRGBEncoding;\n\texports.GammaEncoding = GammaEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.CubeGeometry = BoxGeometry;\n\texports.Face4 = Face4;\n\texports.LineStrip = LineStrip;\n\texports.LinePieces = LinePieces;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MultiMaterial = MultiMaterial;\n\texports.PointCloud = PointCloud;\n\texports.Particle = Particle;\n\texports.ParticleSystem = ParticleSystem;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Vertex = Vertex;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.Spline = Spline;\n\texports.AxisHelper = AxisHelper;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.EdgesHelper = EdgesHelper;\n\texports.WireframeHelper = WireframeHelper;\n\texports.XHRLoader = XHRLoader;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.GeometryUtils = GeometryUtils;\n\texports.ImageUtils = ImageUtils;\n\texports.Projector = Projector;\n\texports.CanvasRenderer = CanvasRenderer;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n},{}],4:[function(require,module,exports){\nlet THREE = require('three');\nconst geostats = require('geostats');\nconst GeoClassify = require('geoclassify');\nconst sphereRadius = 200;\n\nclass Generator {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n    this.rawArray = [];\n    this.trailRadiusArray = [];\n    this.resultTrailGroup = [];\n\n    this.geoclassify = new GeoClassify({\n      type: 'Jenks',\n      level: this.options.level\n    })\n  }\n\n  setData(ds) {\n    this.data = ds;\n    this.processing();\n    this.render();\n  }\n\n  getValue(d) {\n    if (d.properties === undefined || d.properties.value === undefined) return 1;\n    return d.properties.value;\n  }\n\n  processing() {\n    let ds = this.data;\n    let options = this.options\n    let level = options.level;\n    for (let i = 0; i < ds.features.length; i++) {\n      let d = ds.features[i];\n      if (!d.geometry || !d.geometry.coordinates) continue;\n      let v = this.getValue(d);\n      if (isNaN(v)) continue;\n      this.rawArray.push(v);\n    }\n\n    this.initTrailRadiusSeries(this.options);\n\n    this.geoclassify.setLevel(this.options.level);\n    this.geoclassify.setData(this.rawArray);\n    this.geoclassify.setPattern(this.trailRadiusArray);\n  }\n\n  initTrailRadiusSeries() {\n    let options = this.options;\n    let trailRadiusSeries = options.trailRadiusSeries;\n\n    trailRadiusSeries.forEach(series => {\n      this.trailRadiusArray.push(series.levelSize)\n    })\n  }\n\n  ll2sphere(lng, lat, radius = 200) {\n    const phi = (90 - lat) * (Math.PI / 180);\n    const theta = (lng >= 0 ? lng : 360 + lng) * (Math.PI / 180);\n\n    const x = ((radius) * Math.sin(phi) * Math.sin(theta));\n    const y = ((radius) * Math.cos(phi));\n    const z = ((radius) * Math.sin(phi) * Math.cos(theta));\n\n    return {\n      x,\n      y,\n      z\n    };\n  }\n\n  ll2plane(lng, lat, _z = 200, scale = 2.0) {\n    let x = lng * scale;\n    let y = lat * scale;\n    let z = _z;\n\n    return {\n      x,\n      y,\n      z\n    };\n  }\n\n  render() {\n    let ds = this.data;\n    let options = this.options;\n    let sRadius = sphereRadius + options.height;\n\n    let features = ds.features;\n    for (let i = 0; i < features.length; i++) {\n      let spherePathArray = [];\n      let planePathArray = [];\n\n      if (!features[i].geometry || !features[i].geometry.coordinates) continue;\n      let path = features[i].geometry.coordinates;\n\n      for (let j = 0; j < path.length; j++) {\n        let p = path[j];\n        let sphere = this.ll2sphere(p[0], p[1], sRadius);\n        let plane = this.ll2plane(p[0], p[1], sRadius);\n        [].push.apply(spherePathArray, [sphere.x, sphere.y, sphere.z]);\n        [].push.apply(planePathArray, [plane.x, plane.y, plane.z]);\n      }\n\n      // \u6839\u636E\u6743\u91CD\u503C\u83B7\u53D6\u4E0D\u540C\u8F68\u8FF9\u7C97\u7EC6\u7A0B\u5EA6\n      let v = this.getValue(features[i]);\n      let tubeSize = this.geoclassify.getPattern(v);\n      let geometry = this.createTrail({\n        spherePath: spherePathArray,\n        planePath: planePathArray\n      }, tubeSize);\n\n      // \u7ED9\u6BCF\u6761tube\u7ED1\u5B9Aid\u3001\u8D77\u6B62\u70B9\u4F4D\u7F6E\n      let o = {\n        tubeGeometry: geometry,\n        tubeSize: tubeSize\n      }\n      this.resultTrailGroup.push(o);\n    }\n  }\n\n  createTrail(path, size) {\n    const {\n      spherePath,\n      planePath\n    } = path;\n    let options = this.options;\n    let radius = options.radius;\n    let closed = options.closed;\n    let radiusSegments = options.radiusSegments;\n\n    let sphereVectors = [];\n    let planeVectors = [];\n    for (let i = 0, j = Math.floor(spherePath.length / 3); i < j; i++) {\n      sphereVectors.push(new THREE.Vector3(spherePath[i * 3 + 0], spherePath[i * 3 + 1], spherePath[i * 3 + 2]));\n      planeVectors.push(new THREE.Vector3(planePath[i * 3 + 0], planePath[i * 3 + 1], planePath[i * 3 + 2]));\n    }\n\n    let sphereCurvePath = new THREE.CatmullRomCurve3(sphereVectors);\n    let shpereGeometry = new THREE.TubeBufferGeometry(\n      sphereCurvePath,\n      sphereCurvePath.points.length * 5, // curvePath.curve.length * 1,\n      size,\n      radiusSegments,\n      closed\n    )\n\n    let planeCurvePath = new THREE.CatmullRomCurve3(planeVectors);\n    let planeGeometry = new THREE.TubeBufferGeometry(\n      planeCurvePath,\n      planeCurvePath.points.length * 5, // curvePath.curve.length * 1,\n      size,\n      radiusSegments,\n      closed\n    )\n\n    let result = {};\n    result.normal = shpereGeometry.attributes.normal.array;\n    result.spherePositions = shpereGeometry.attributes.position.array;\n    result.uv = shpereGeometry.attributes.uv.array;\n    result.index = shpereGeometry.index.array;\n    result.planePositions = planeGeometry.attributes.position.array;\n\n    return result;\n  }\n\n  getData() {\n    return this.resultTrailGroup;\n  }\n}\n\nmodule.exports = Generator;\n},{\"geoclassify\":1,\"geostats\":2,\"three\":3}],5:[function(require,module,exports){\nconst PathGenerator = require('./path-generator');\n\n// \u54CD\u5E94\u6765\u81EA\u7236\u7EBF\u7A0B(parent thread)\u7684\u6D88\u606F\nself.onmessage = function (event) {\n  // receive data\n  let ds = event.data.ds;\n  let options = event.data.options;\n\n  let pathGenerator = new PathGenerator(options);\n\n  try {\n    pathGenerator.setData(ds);\n\n    // \u5C06\u6570\u636E\u53D1\u9001\u5230\u7236\u7EBF\u7A0B(parent thread)\n    self.postMessage({\n      data: pathGenerator.getData()\n    });\n    self.close();\n\n  } catch (error) {\n    self.console.log('error in trail webworks ', error);\n\n    self.postMessage({\n      data: []\n    });\n    self.close();\n  }\n};\n\n},{\"./path-generator\":4}]},{},[5]);\n"],{type:"text/javascript"})));c.postMessage({ds:this._data,options:JSON.parse(JSON.stringify(this.options))}),c.onmessage=function(a){for(var c=a.data.data,e=0;e<c.length;e++){var f=c[e],d=b.createTrail(f.tubeGeometry);b.scene.add(d),b.tubeTrailGroup.push(d)}b.checkVisible()}}},{key:"createTrail",value:function(a){var b=new h.BufferGeometry;b.setIndex(new h.BufferAttribute(new Uint32Array(a.index),1)),b.addAttribute("sphere_position",new h.BufferAttribute(a.spherePositions,3).setDynamic(!0)),b.addAttribute("plane_position",new h.BufferAttribute(a.planePositions,3).setDynamic(!0)),b.addAttribute("uv",new h.BufferAttribute(new Float32Array(a.uv),2).setDynamic(!0)),b.computeBoundingSphere(),b.computeBoundingBox();var c=new h.Mesh(b,this.getMaterial());return c.renderOrder=3e3+Math.round(2e3*Math.random()),c}},{key:"getMaterial",value:function(){var a=this.options,b=a.lineLength,d=a.opacityFactor,e=j.Chroma(a.trailColor).gl();return new h.ShaderMaterial({uniforms:{uColor:{type:"vec3",value:new h.Vector3(e[0],e[1],e[2])},uTrailLength:{type:"f",value:b},uTimeCounter:{type:"f",value:-Math.random()},uOpacityFactor:{type:"f",value:d},u_ease_index:{value:1},u_proj_type:{value:this.map.projType}},vertexShader:c("datav:/com/map3d-earth-thunder/0.0.19/shader/vert.glsl"),fragmentShader:c("datav:/com/map3d-earth-thunder/0.0.19/shader/frag.glsl"),side:h.DoubleSide,blending:h.AdditiveBlending,depthTest:!0,depthWrite:!0,transparent:!0})}},{key:"animation",value:function(){if(this.options.visible){var a=this.options,b=a.speed,c=a.intervalFreq+1,d=this.tubeTrailGroup;if(d.length)for(var e,f=0;f<d.length;f++)e=d[f],e.material.uniforms.uTimeCounter.value+=b,e.material.uniforms.uTimeCounter.value>c+4*b&&(e.material.uniforms.uTimeCounter.value=0)}}},{key:"updatePostions",value:function(a){var b=a.projType,c=a.index,d=this.tubeTrailGroup;if(d.length)for(var e,f=0;f<d.length;f++)e=d[f],e.material.uniforms.u_ease_index.value=c,e.material.uniforms.u_proj_type.value=b}},{key:"updateOptions",value:function(a){var b=this.options.speed,c=this.options.lineLength,d=this.options.intervalFreq,e=this.options.opacityFactor,f=j.Chroma(this.options.trailColor).gl();this.options=j.mergeOptions(this.options,a||{});var g=j.Chroma(a.trailColor).gl();b!==a.speed||c!==a.lineLength||d!==a.intervalFreq||e!==a.opacityFactor||f[0]!==g[0]||f[1]!==g[1]||f[2]!==g[2]?this.updateTrails():this.render(this._data),this.checkVisible()}},{key:"checkVisible",value:function(){var a=this.options;a.visible?this.show():this.hide()}},{key:"hide",value:function(){var a=this.tubeTrailGroup;if(a.length)for(var b,c=0;c<a.length;c++)b=a[c],b.visible=!1}},{key:"show",value:function(){var a=this.tubeTrailGroup;if(a.length)for(var b,c=0;c<a.length;c++)b=a[c],b.visible=!0}},{key:"updateTrails",value:function(){var a=this.options,b=j.Chroma(a.trailColor).gl(),c=this.tubeTrailGroup;if(c.length)for(var d,e=0;e<c.length;e++)d=c[e],d.material.uniforms.uTrailLength.value=a.lineLength,d.material.uniforms.uOpacityFactor.value=a.opacityFactor,d.material.uniforms.uColor.value=new h.Vector3(b[0],b[1],b[2]),d.material.needsUpdate=!0}},{key:"clean",value:function(){var a=this.tubeTrailGroup;if(a.length)for(var b,c=0;c<a.length;c++)b=a[c],this.scene.remove(b),b&&b.dispose&&b.dispose(),b.geometry&&b.geometry.dispose&&b.geometry.dispose(),b.material&&b.material.dispose&&b.material.dispose();this.tubeTrailGroup=[]}},{key:"remove",value:function(){this.map.off("animationFrame",this.animation),this.map.off("projChanged",this.updatePostions),this.clean(),this._data=null}}]),b}(i);return a.exports=l,a.exports});