// env=undefined => env=publish 
Cube("datav:/com/datav-expo-glowploy/0.0.1/shader/circle.frag.glsl",[],function(a){return a.exports="#define GLSLIFY 1\nvarying vec2 vUv;\nuniform vec3 u_color;\nuniform float u_opacity;\nuniform float u_time_count;\n\nvoid main() {\n  vec2 uvCenter = vec2(0.5, 0.5);\n  float uvDist = distance(vUv, uvCenter);\n  \n  float uvOpacity = 1.0;\n  float innerHoleAppear = u_time_count - 0.25;\n\n  if (uvDist > u_time_count) {\n    uvOpacity = 0.0;\n  } else if(uvDist < innerHoleAppear) {\n    uvOpacity = 0.0;\n  } else {\n    uvOpacity = pow((uvDist / u_time_count), 3.0);\n  }\n\n  uvOpacity *= u_opacity;\n  \n  gl_FragColor = vec4(u_color, uvOpacity);\n}\n",a.exports});;
Cube("datav:/com/datav-expo-glowploy/0.0.1/shader/circle.vert.glsl",[],function(a){return a.exports="#define GLSLIFY 1\nvarying vec2 vUv;\nvoid main() {  \n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",a.exports});;
Cube("datav:/com/datav-expo-glowploy/0.0.1/shader/rect.vert.glsl",[],function(a){return a.exports="#define GLSLIFY 1\nvarying vec2 vUv;\nvoid main() {  \n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",a.exports});;
Cube("datav:/com/datav-expo-glowploy/0.0.1/shader/rect.frag.glsl",[],function(a){return a.exports="#define GLSLIFY 1\nuniform vec3 u_color;\nuniform float u_opacity;\nuniform float u_time_count;\nvarying vec2 vUv;\n\nvoid main() {\n  vec2 uvCenter = vec2(0.5, 0.5);\n\n  float pixiCoordDistance = distance(vUv, uvCenter);\n\n  float opacity = 1.;\n  float circle_gap = 0.2;\n  float circle_width = 0.02;\n  \n  if(\n    (abs(abs(vUv.x - circle_width - 0.5) - u_time_count) <= circle_width && abs(vUv.y - 0.5) <= u_time_count) || \n    (abs(abs(vUv.y - circle_width - 0.5) - u_time_count) <= circle_width && abs(vUv.x - 0.5) <= u_time_count) ||\n    (abs(abs(vUv.x - circle_width - 0.5) - u_time_count) <= circle_width && abs(abs(vUv.y - circle_width - 0.5) - u_time_count) <= circle_width)\n  ){\n    float i = max(abs(vUv.x - 0.5), abs(vUv.y - 0.5)) * 2.;\n    i = smoothstep(.0, 1., i) * 2.;\n    opacity *= i;\n\n    // opacity *= (0.5 - u_time_count) * 2.0;\n  } else {\n    discard;\n  }\n\n  gl_FragColor = vec4(u_color, opacity * u_opacity);\n}",a.exports});;
Cube("datav:/com/datav-expo-glowploy/0.0.1",["datav:/npm/chroma-js/1.3.4","datav:/npm/eventemitter3/2.0.3","datav:/npm/safely-merge/1.0.1"],function(a,b,c){let d=null;const e=c("datav:/npm/chroma-js/1.3.4"),f=c("datav:/npm/eventemitter3/2.0.3"),g=c("datav:/npm/safely-merge/1.0.1"),h={shapeType:"circle",color:"#A8EEFE",speed:0.01,size:10},i={rectFrag:c("datav:/com/datav-expo-glowploy/0.0.1/shader/rect.frag.glsl"),rectVert:c("datav:/com/datav-expo-glowploy/0.0.1/shader/rect.vert.glsl"),circleFrag:c("datav:/com/datav-expo-glowploy/0.0.1/shader/circle.frag.glsl"),circleVert:c("datav:/com/datav-expo-glowploy/0.0.1/shader/circle.vert.glsl")};return a.exports=class extends f{constructor(a,b){super(),this.options=g(h,b||{})}addTo(a){return a?void(d=a.three,this.map=a,this.scene=a.scene,this.animation=this.animation.bind(this),this.map.on("animationFrame",this.animation),this.init()):console.log("Ambient Lighter layer needs map layer")}init(){this.geometry=new d.PlaneBufferGeometry(100,100,64),this.material=this.initMaterial(),this.mesh=new d.Mesh(this.geometry,this.material),this.mesh.scale.x=this.options.size,this.mesh.scale.y=this.options.size,this.mesh.lookAt(new d.Vector3(0,1,0)),this.scene.add(this.mesh)}initMaterial(){let a=this.options,b=e(a.color).gl(),c=a.shapeType,f=e(a.color).rgba(),g=void 0===f[3]?1:f[3];return new d.ShaderMaterial({uniforms:{u_time_count:{type:"f",value:0},u_opacity:{type:"f",value:g},u_color:{type:"vec3",value:new d.Vector3(b[0],b[1],b[2])}},vertexShader:"rect"===c?i.rectVert:i.circleVert,fragmentShader:"rect"===c?i.rectFrag:i.circleFrag,side:d.DoubleSide,blending:d.AdditiveBlending,depthTest:!1,transparent:!0})}setPosition(){const a=this.data;if(a&&Array.isArray(a)&&a.length&&this.mesh){const b=a[0].x,c=a[0].y,d=a[0].z;this.mesh.position.set(b,c,d)}}setData(a){this.data=a,this.setPosition()}updateMaterial(){let a=this.options,b=a.shapeType,c=e(a.color).gl(),f=e(a.color).rgba(),g=void 0===f[3]?1:f[3];this.material.uniforms.u_opacity.value=g,this.material.uniforms.u_color.value=new d.Vector3(c[0],c[1],c[2]),this.material.vertexShader="rect"===b?i.rectVert:i.circleVert,this.material.fragmentShader="rect"===b?i.rectFrag:i.circleFrag,this.material.needsUpdate=!0}updateMesh(){this.mesh.scale.x=this.options.size,this.mesh.scale.y=this.options.size}updateOptions(a){this.options=g(this.options,a||{}),this.updateMaterial(),this.updateMesh()}animation(){this.material&&(this.material.uniforms.u_time_count.value+=this.options.speed,.5<this.material.uniforms.u_time_count.value&&(this.material.uniforms.u_time_count.value=0))}remove(){this.map.off("animationFrame",this.animation),this.scene.remove(this.mesh),this.mesh&&this.mesh.dispose&&this.mesh.dispose(),this.material&&this.material.dispose&&this.material.dispose(),this.geometry&&this.geometry.dispose&&this.geometry.dispose(),this.mesh=null,this.material=null,this.geometry=null,this.data=null}},a.exports});